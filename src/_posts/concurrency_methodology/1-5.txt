@startuml
title: 最终方案\ngithub.com/nimoc/blog/issues/42
autonumber
participant thread1 #lightBlue
database redis
participant thread2 #lightCyan
thread1 -> thread1: 生成随机字符串 password_1 = uuid()
thread1 -> redis: SET lock_key password_1 EX 10 NX
redis -> thread1: 上锁成功
...
thread1 -> thread1: thread1 执行一些业务逻辑花了一些时间
thread2 -> redis: SET lock_key password_2 EX 10 NX
note right#eee: 此时 thread1 业务逻辑执行时间决定了 thread2 上锁是否成功
alt thread2 上锁成功
    redis -> thread2: lock_key == password_2
end
alt thread2 上锁失败
    redis -> thread2: lock_key == password_1
end
...
thread1 -> redis: 验证lock_key并删除
note left#lightGreen: 使用 lua 脚本保障 get del 的原子性 \n if redis.call("get", lock_key) == password_1 \nthen \n  return redis.call("del", lock_key) \nelse \n  return 0 \n end
...
redis->redis:
note right#eee: 此时如果有其他线程上锁成功会导致 lock_key = thread3Password
...
alt 删除了1个 key
thread1 ->o thread1: 解锁成功
note left#lightGreen: 锁密码验证保障了出现操作延迟也不会误删锁
else 删除了0个key
thread1 ->o thread1: 解锁失败
end
@enduml
