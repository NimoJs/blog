{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/vexo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/vexo/source/fonts/SourceSansPro.ttf","path":"fonts/SourceSansPro.ttf","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/gitment.js","path":"js/gitment.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/qrious.js","path":"js/qrious.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/alipay.jpg","path":"css/images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/catalog.png","path":"css/images/catalog.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/escheres.png","path":"css/images/escheres.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/menu.png","path":"css/images/menu.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/top.png","path":"css/images/top.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/wechat.jpg","path":"css/images/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/plugins/gitment.css","path":"css/plugins/gitment.css","modified":0,"renderable":1}],"Cache":[{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"9a94875cbf4c27fbe2e63da0496242addc6d2876","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":499162500000},{"_id":"source/beginner_job_advice.md","hash":"631f261bf920ea1907df03394dcecaf78d4d5850","modified":1614407740909},{"_id":"source/cache_practice.md","hash":"1072c6bb4de46c3b2e7b4616b1eb00653f5ec71d","modified":1614407740910},{"_id":"source/js_prototype_trap.md","hash":"5437c25198bde0e865b6f2c5da071713cb54a008","modified":1614407741015},{"_id":"source/js_replace.md","hash":"33c4d6d1493195a6ef57faa797a009c2745bebf8","modified":1614407741015},{"_id":"source/learn_js.md","hash":"b9b3f711aad5651e25651766448982e0db427715","modified":1614407741016},{"_id":"source/f2e_up.md","hash":"35223cf34fa300a25402e96c77e32d0ab62cc1f4","modified":1614407741009},{"_id":"source/ignore_browser_compatibility.md","hash":"50391a8c0dfaafa08c3c703539e8d8bafd652fb6","modified":1614407741014},{"_id":"source/gulp_book.md","hash":"3e2f9c87441a58c0a6c42807c8dd061529baecf5","modified":1614407741014},{"_id":"source/concurrency_methodology.md","hash":"db1711ca36daf96228786aaa83043ee3d0a3a499","modified":1614407740980},{"_id":"source/ts_go_generics.doc.ts","hash":"51daa6885e6d80e45524808b51d88dcecd1d7174","modified":1614407741897},{"_id":"source/ts_go_generics.md","hash":"8493a537cf200e87888f9783fa58fec649ee84dc","modified":1614407741899},{"_id":"source/watch.md","hash":"4b7ae8ddbc16f39fe81fa9147758228b9dc61fdd","modified":1614407741905},{"_id":"source/zero_value_typescript.doc.ts","hash":"5c5eaecc7a349cd3b04948912b74bd19f60ea365","modified":1614407741911},{"_id":"source/zero_value_typescript.md","hash":"53474f298195d9a3ae2a69435aa6b72133ff109c","modified":1614407741911},{"_id":"source/_posts/.DS_Store","hash":"d6bf4fd113212175d4081f69868cc5c7e508d9b0","modified":1614407386945},{"_id":"source/web_design_notes.md","hash":"61f9e711226160680a913fbfda03f1e10f0ad05f","modified":1614407741907},{"_id":"source/weapp_ad_jump.md","hash":"dc072c376115a41f7f4cf2d52c05c538a96a1101","modified":1614407741906},{"_id":"source/web_team_interface.md","hash":"8f47194fe91ec6e7217f6fd82f50af8eb25271a8","modified":1614407741908},{"_id":"source/cache_practice/1-1.txt","hash":"b5dae4e0b2aa2b604e666d91b4b682a30aec38e5","modified":1614407740924},{"_id":"source/cache_practice/1-2.txt","hash":"490a6d5bccab215acc65a8dfffaaa03f480ed575","modified":1614407740931},{"_id":"source/cache_practice/1-1.png","hash":"60467ddc7b65b54ab5564e34b97094d0171e950f","modified":1614407740924},{"_id":"source/cache_practice/1-3.txt","hash":"6d7dae21396797880da2c59529fc1fca403616e6","modified":1614407740934},{"_id":"source/cache_practice/1-3.png","hash":"b40f80532adc455029698d2b67e3b1c8fd72f024","modified":1614407740933},{"_id":"source/cache_practice/1-2.png","hash":"6bf7e67604b4f82209b06759930496cd81e2fa04","modified":1614407740926},{"_id":"source/cache_practice/1-4.png","hash":"30baab1a848b70154cc50633dfa22ff6dcb00d89","modified":1614407740939},{"_id":"source/cache_practice/1-4.txt","hash":"3157f9164bd6c2dded849ce1471f5e4cca5ea0f4","modified":1614407740942},{"_id":"source/cache_practice/1-5.txt","hash":"d5dc6445d990f6169eca6991e4d600123904c7a3","modified":1614407740951},{"_id":"source/cache_practice/1-6-2.txt","hash":"c46c5d92abe93d5bd9c25f917b0a62b85d22759d","modified":1614407740962},{"_id":"source/cache_practice/1-6.txt","hash":"2fb42a90d29b36d1c76250a4132bdf40adde8c25","modified":1614407740968},{"_id":"source/cache_practice/1-6-2.png","hash":"292fb5f6b5e7238af0dff78d73dce68b19eed149","modified":1614407740960},{"_id":"source/cache_practice/1-6.png","hash":"19b1ac095f4d14a3b2058e6e77090c8fd1709504","modified":1614407740966},{"_id":"source/cache_practice/1-7.txt","hash":"6fdf42851dbf93266623f7e0ee873abcc5ff499f","modified":1614407740972},{"_id":"source/cache_practice/1-8.txt","hash":"65979652590c20398fa8446011bdae3e5769633f","modified":1614407740976},{"_id":"source/cache_practice/1-9.txt","hash":"ef6379fe6ea8bc72dd280af18232de7490f1b904","modified":1614407740980},{"_id":"source/concurrency_methodology/1-1.txt","hash":"ba147f9a3fb82ab0bb2e67643abb41a1aa42c6b8","modified":1614407740982},{"_id":"source/concurrency_methodology/1-1.png","hash":"aad4300760757028158693f3373bbb80cc7daa6d","modified":1614407743046},{"_id":"source/concurrency_methodology/1-2.txt","hash":"6e50f7e4f6bcb43e5a977a913c97b73372e52ccb","modified":1614407740996},{"_id":"source/concurrency_methodology/1-2.png","hash":"d4b9f0c3491ee42d680ac1201b9dec2a3cb711a9","modified":1614407742726},{"_id":"source/concurrency_methodology/1-3.txt","hash":"eef3858f5b6bdabcf2d379b45481ef5fddacd242","modified":1614407740999},{"_id":"source/concurrency_methodology/1-4.txt","hash":"222534286a3e32611a5c3c8600ca4ec680f2cc26","modified":1614407741002},{"_id":"source/concurrency_methodology/1-4.png","hash":"61576385c0968f23a700fe6b72f055703a1376e3","modified":1614407743859},{"_id":"source/concurrency_methodology/1-5.txt","hash":"555ab4cbcc0767d338c4dbcb18f7c1a0a8de1ceb","modified":1614407741009},{"_id":"source/go_channel/channel_test.go","hash":"5331e128f761e936acc1ddff2989c3f3561d86b7","modified":1614407741012},{"_id":"source/go_trap/trap_test.go","hash":"afaf563d96bac11bedf2d95054b58f7f6316d022","modified":1614407741013},{"_id":"source/go_interface_basic/interface_test.go","hash":"585dc57f6840cd8d2e45d2989128a01b98a4d95e","modified":1614407741013},{"_id":"source/cache_practice/1-5.png","hash":"4824a42014891c6d9e255bf3adcf1032a3ccec71","modified":1614407740951},{"_id":"source/cache_practice/1-7.png","hash":"675204e9f2dce7dec8970d106a5533fb0eadf07b","modified":1614407740972},{"_id":"source/cache_practice/1-9.png","hash":"356d0f73c5b92b09fac7dc0f34e8b66904b77d01","modified":1614407740979},{"_id":"source/cache_practice/1-8.png","hash":"81b2a74d297bc057c5cd3de825f616f60318c353","modified":1614407740975},{"_id":"source/concurrency_methodology/1-3.png","hash":"6f23ca983b1dc0000cc193561787a6000b84e195","modified":1614407743534},{"_id":"source/concurrency_methodology/1-5.png","hash":"c4350ab72d168647b113feedd381987e3ed172db","modified":1614407744058},{"_id":"source/plantuml.jar","hash":"956fbb3615e2ed993c81be15c85c6c3d25206a8f","modified":1614407741885},{"_id":"source/_drafts/cache_practice/1-1.txt","hash":"b5dae4e0b2aa2b604e666d91b4b682a30aec38e5","modified":1614407740924},{"_id":"source/_drafts/cache_practice/1-2.png","hash":"6bf7e67604b4f82209b06759930496cd81e2fa04","modified":1614407740926},{"_id":"source/_drafts/cache_practice/1-2.txt","hash":"490a6d5bccab215acc65a8dfffaaa03f480ed575","modified":1614407740931},{"_id":"source/_drafts/cache_practice/1-3.png","hash":"b40f80532adc455029698d2b67e3b1c8fd72f024","modified":1614407740933},{"_id":"source/_drafts/cache_practice/1-3.txt","hash":"6d7dae21396797880da2c59529fc1fca403616e6","modified":1614407740934},{"_id":"source/_drafts/cache_practice/1-4.png","hash":"30baab1a848b70154cc50633dfa22ff6dcb00d89","modified":1614407740939},{"_id":"source/_drafts/cache_practice/1-4.txt","hash":"3157f9164bd6c2dded849ce1471f5e4cca5ea0f4","modified":1614407740942},{"_id":"source/_drafts/cache_practice/1-5.txt","hash":"d5dc6445d990f6169eca6991e4d600123904c7a3","modified":1614407740951},{"_id":"source/_drafts/cache_practice/1-6-2.txt","hash":"c46c5d92abe93d5bd9c25f917b0a62b85d22759d","modified":1614407740962},{"_id":"source/_drafts/cache_practice/1-6-2.png","hash":"292fb5f6b5e7238af0dff78d73dce68b19eed149","modified":1614407740960},{"_id":"source/_drafts/cache_practice/1-6.png","hash":"19b1ac095f4d14a3b2058e6e77090c8fd1709504","modified":1614407740966},{"_id":"source/_drafts/cache_practice/1-6.txt","hash":"2fb42a90d29b36d1c76250a4132bdf40adde8c25","modified":1614407740968},{"_id":"source/_drafts/cache_practice/1-7.txt","hash":"6fdf42851dbf93266623f7e0ee873abcc5ff499f","modified":1614407740972},{"_id":"source/_drafts/cache_practice/1-8.txt","hash":"65979652590c20398fa8446011bdae3e5769633f","modified":1614407740976},{"_id":"source/_drafts/cache_practice/1-9.txt","hash":"ef6379fe6ea8bc72dd280af18232de7490f1b904","modified":1614407740980},{"_id":"source/_drafts/cache_practice/1-1.png","hash":"60467ddc7b65b54ab5564e34b97094d0171e950f","modified":1614407740924},{"_id":"source/_drafts/cache_practice/1-5.png","hash":"4824a42014891c6d9e255bf3adcf1032a3ccec71","modified":1614407740951},{"_id":"source/_drafts/cache_practice/1-7.png","hash":"675204e9f2dce7dec8970d106a5533fb0eadf07b","modified":1614407740972},{"_id":"source/_drafts/cache_practice/1-8.png","hash":"81b2a74d297bc057c5cd3de825f616f60318c353","modified":1614407740975},{"_id":"source/_drafts/cache_practice/1-9.png","hash":"356d0f73c5b92b09fac7dc0f34e8b66904b77d01","modified":1614407740979},{"_id":"source/_drafts/concurrency_methodology/1-1.txt","hash":"ba147f9a3fb82ab0bb2e67643abb41a1aa42c6b8","modified":1614407740982},{"_id":"source/_drafts/concurrency_methodology/1-1.png","hash":"aad4300760757028158693f3373bbb80cc7daa6d","modified":1614407743046},{"_id":"source/_drafts/concurrency_methodology/1-2.png","hash":"d4b9f0c3491ee42d680ac1201b9dec2a3cb711a9","modified":1614407742726},{"_id":"source/_drafts/concurrency_methodology/1-2.txt","hash":"6e50f7e4f6bcb43e5a977a913c97b73372e52ccb","modified":1614407740996},{"_id":"source/_drafts/concurrency_methodology/1-3.txt","hash":"eef3858f5b6bdabcf2d379b45481ef5fddacd242","modified":1614407740999},{"_id":"source/_drafts/concurrency_methodology/1-4.txt","hash":"222534286a3e32611a5c3c8600ca4ec680f2cc26","modified":1614407741002},{"_id":"source/_drafts/concurrency_methodology/1-5.txt","hash":"555ab4cbcc0767d338c4dbcb18f7c1a0a8de1ceb","modified":1614407741009},{"_id":"source/_drafts/concurrency_methodology/1-4.png","hash":"61576385c0968f23a700fe6b72f055703a1376e3","modified":1614407743859},{"_id":"source/_drafts/go_channel/channel_test.go","hash":"5331e128f761e936acc1ddff2989c3f3561d86b7","modified":1614407741012},{"_id":"source/_drafts/go_interface_basic/interface_test.go","hash":"585dc57f6840cd8d2e45d2989128a01b98a4d95e","modified":1614407741013},{"_id":"source/_drafts/go_trap/trap_test.go","hash":"afaf563d96bac11bedf2d95054b58f7f6316d022","modified":1614407741013},{"_id":"source/_drafts/concurrency_methodology/1-3.png","hash":"6f23ca983b1dc0000cc193561787a6000b84e195","modified":1614407743534},{"_id":"source/_drafts/concurrency_methodology/1-5.png","hash":"c4350ab72d168647b113feedd381987e3ed172db","modified":1614407744058},{"_id":"src/_drafts/beginner_job_advice.md","hash":"dedb775525c06189b89a9adeb377f25e3ac69cbf","modified":1614409058990},{"_id":"src/.DS_Store","hash":"9491b9412ec5f5461c1208013b18f1b3f8180ab3","modified":1614408400164},{"_id":"src/_drafts/gulp_book.md","hash":"940a8472ca8bd0e2674b4fd9465a0bf8ce0bf098","modified":1614409058990},{"_id":"src/_drafts/.DS_Store","hash":"bf5cc0ef679684b97255424a2ea1c1ab8b32cd79","modified":1614408442255},{"_id":"src/_drafts/ignore_browser_compatibility.md","hash":"e01a2f046147f550e0140aef9fe0bcaa355924e4","modified":1614409058990},{"_id":"src/_drafts/js_replace.md","hash":"2bbe26b6f1106a55d44a2bd448242d27471ca3f3","modified":1614409058990},{"_id":"src/_drafts/js_prototype_trap.md","hash":"92f874ece877411cff9290c4d2e5558ebec8da6c","modified":1614409058990},{"_id":"src/_drafts/learn_js.md","hash":"8866b345d931b75bd7ef1763649ea8907ffce069","modified":1614409058990},{"_id":"src/_drafts/watch.md","hash":"4b7ae8ddbc16f39fe81fa9147758228b9dc61fdd","modified":1614407741905},{"_id":"src/_drafts/weapp_ad_jump.md","hash":"1b167173076ac977c4ac525daba83f4a0b690a68","modified":1614409058991},{"_id":"src/_drafts/web_team_interface.md","hash":"5920edb93173dafa21a77b06b9ff179f3cedc2dc","modified":1614409058991},{"_id":"src/_drafts/web_design_notes.md","hash":"da6f84cc54e1afc5ffa1b1d89e2f4ced5b56c5f6","modified":1614409058991},{"_id":"src/_posts/cache_practice.md","hash":"9bab397d1c3cf3d278163651fe9074cc83919645","modified":1614409593829},{"_id":"src/_posts/.DS_Store","hash":"ae1aef329b47cc139a3aee05710b10c70e37e35a","modified":1614408442257},{"_id":"src/_posts/concurrency_methodology.md","hash":"1a13f27f1f2b0e73fd499a444841590aacd647cf","modified":1614410225369},{"_id":"src/_posts/f2e_up.md","hash":"1b28b2a682ce978ecb7a7910e021724485cec7b9","modified":1614409562629},{"_id":"src/_posts/ts_go_generics.doc.ts","hash":"868b30934a2768a7a13db24c537578e550087a14","modified":1614409058990},{"_id":"src/_posts/zero_value_typescript.doc.ts","hash":"6221d15eccc788b72316fe2b50c65b8c0a4ee542","modified":1614409058990},{"_id":"src/_drafts/go_interface_basic/interface_test.go","hash":"585dc57f6840cd8d2e45d2989128a01b98a4d95e","modified":1614407741013},{"_id":"src/_drafts/go_channel/channel_test.go","hash":"5331e128f761e936acc1ddff2989c3f3561d86b7","modified":1614407741012},{"_id":"src/_drafts/go_trap/trap_test.go","hash":"afaf563d96bac11bedf2d95054b58f7f6316d022","modified":1614407741013},{"_id":"src/_posts/cache_practice/1-1.txt","hash":"b5dae4e0b2aa2b604e666d91b4b682a30aec38e5","modified":1614407740924},{"_id":"src/_posts/cache_practice/1-1.png","hash":"60467ddc7b65b54ab5564e34b97094d0171e950f","modified":1614407740924},{"_id":"src/_posts/cache_practice/1-2.png","hash":"6bf7e67604b4f82209b06759930496cd81e2fa04","modified":1614407740926},{"_id":"src/_posts/cache_practice/1-2.txt","hash":"490a6d5bccab215acc65a8dfffaaa03f480ed575","modified":1614407740931},{"_id":"src/_posts/cache_practice/1-3.png","hash":"b40f80532adc455029698d2b67e3b1c8fd72f024","modified":1614407740933},{"_id":"src/_posts/cache_practice/1-3.txt","hash":"6d7dae21396797880da2c59529fc1fca403616e6","modified":1614407740934},{"_id":"src/_posts/cache_practice/1-4.txt","hash":"3157f9164bd6c2dded849ce1471f5e4cca5ea0f4","modified":1614407740942},{"_id":"src/_posts/cache_practice/1-4.png","hash":"30baab1a848b70154cc50633dfa22ff6dcb00d89","modified":1614407740939},{"_id":"src/_posts/cache_practice/1-5.txt","hash":"d5dc6445d990f6169eca6991e4d600123904c7a3","modified":1614407740951},{"_id":"src/_posts/cache_practice/1-6-2.txt","hash":"c46c5d92abe93d5bd9c25f917b0a62b85d22759d","modified":1614407740962},{"_id":"src/_posts/cache_practice/1-6-2.png","hash":"292fb5f6b5e7238af0dff78d73dce68b19eed149","modified":1614407740960},{"_id":"src/_posts/cache_practice/1-7.txt","hash":"6fdf42851dbf93266623f7e0ee873abcc5ff499f","modified":1614407740972},{"_id":"src/_posts/cache_practice/1-6.png","hash":"19b1ac095f4d14a3b2058e6e77090c8fd1709504","modified":1614407740966},{"_id":"src/_posts/cache_practice/1-6.txt","hash":"2fb42a90d29b36d1c76250a4132bdf40adde8c25","modified":1614407740968},{"_id":"src/_posts/cache_practice/1-8.txt","hash":"65979652590c20398fa8446011bdae3e5769633f","modified":1614407740976},{"_id":"src/_posts/cache_practice/1-9.txt","hash":"ef6379fe6ea8bc72dd280af18232de7490f1b904","modified":1614407740980},{"_id":"src/_posts/concurrency_methodology/1-1.txt","hash":"ba147f9a3fb82ab0bb2e67643abb41a1aa42c6b8","modified":1614407740982},{"_id":"src/_posts/concurrency_methodology/1-2.png","hash":"d4b9f0c3491ee42d680ac1201b9dec2a3cb711a9","modified":1614407742726},{"_id":"src/_posts/concurrency_methodology/1-2.txt","hash":"6e50f7e4f6bcb43e5a977a913c97b73372e52ccb","modified":1614407740996},{"_id":"src/_posts/concurrency_methodology/1-1.png","hash":"aad4300760757028158693f3373bbb80cc7daa6d","modified":1614407743046},{"_id":"src/_posts/concurrency_methodology/1-4.txt","hash":"222534286a3e32611a5c3c8600ca4ec680f2cc26","modified":1614407741002},{"_id":"src/_posts/concurrency_methodology/1-3.txt","hash":"eef3858f5b6bdabcf2d379b45481ef5fddacd242","modified":1614407740999},{"_id":"src/_posts/concurrency_methodology/1-4.png","hash":"61576385c0968f23a700fe6b72f055703a1376e3","modified":1614407743859},{"_id":"src/_posts/concurrency_methodology/1-5.txt","hash":"555ab4cbcc0767d338c4dbcb18f7c1a0a8de1ceb","modified":1614407741009},{"_id":"src/_posts/cache_practice/1-5.png","hash":"4824a42014891c6d9e255bf3adcf1032a3ccec71","modified":1614407740951},{"_id":"src/_posts/cache_practice/1-7.png","hash":"675204e9f2dce7dec8970d106a5533fb0eadf07b","modified":1614407740972},{"_id":"src/_posts/cache_practice/1-8.png","hash":"81b2a74d297bc057c5cd3de825f616f60318c353","modified":1614407740975},{"_id":"src/_posts/cache_practice/1-9.png","hash":"356d0f73c5b92b09fac7dc0f34e8b66904b77d01","modified":1614407740979},{"_id":"src/_posts/concurrency_methodology/1-3.png","hash":"6f23ca983b1dc0000cc193561787a6000b84e195","modified":1614407743534},{"_id":"src/_posts/concurrency_methodology/1-5.png","hash":"c4350ab72d168647b113feedd381987e3ed172db","modified":1614407744058},{"_id":"themes/vexo/.gitignore","hash":"37fb9fd49e7f944716efd3284a6bf55adb6dd0c2","modified":1614403743288},{"_id":"themes/vexo/.DS_Store","hash":"ed01c316a12cff5e3f467e3a72e416abb3fbef4f","modified":1614408078186},{"_id":"themes/vexo/_config.yml","hash":"aa68098ba7faf4d070c0ff8f7cfd2cb777a78114","modified":1614408861734},{"_id":"themes/vexo/.travis.yml","hash":"cc482f06f4ea6962058f2548dcb814b954876e76","modified":1614403743289},{"_id":"themes/vexo/LICENSE","hash":"3e135cd69c0e02c0a49dd43d571f600223cc61d1","modified":1614403743289},{"_id":"themes/vexo/README.md","hash":"036ddc66e868b93411a15ed3fd5ed5e9101045a5","modified":1614403743289},{"_id":"themes/vexo/layout/archive.ejs","hash":"cb12abb19cb70e90d410a6233933eedb3f2c033a","modified":1614403743296},{"_id":"themes/vexo/layout/index.ejs","hash":"933df25f1242fb33e709831a069b293858faa17e","modified":1614405511691},{"_id":"themes/vexo/lint.sh","hash":"f580302e4aa9ccfb95a253851da6501d145613fe","modified":1614403743298},{"_id":"themes/vexo/package.json","hash":"44e46ed458ca4351db2a773bb4c09ac814b7b1e0","modified":1614403743299},{"_id":"themes/vexo/layout/layout.ejs","hash":"a7b8f1debdca12d667ecd1bcc3d4bc6e13a23d7b","modified":1614403743297},{"_id":"themes/vexo/layout/tags.ejs","hash":"5b326e2bd3292b3015d0666b796544d7126acfda","modified":1614403743298},{"_id":"themes/vexo/_source/about/index.md","hash":"68c8af0453deca5f6b03eb18ee6f89fb0c1f1f75","modified":1614403743290},{"_id":"themes/vexo/_source/project/index.md","hash":"b8f5482c157514bd2df4ce8a4e4d01a957497924","modified":1614403743290},{"_id":"themes/vexo/layout/project.ejs","hash":"3c9a517e273e029b57defb566c1b03de34e91144","modified":1614404877592},{"_id":"themes/vexo/layout/page.ejs","hash":"75662ef4199272e5f2c727d71e49c5a1c90066d1","modified":1614409987443},{"_id":"themes/vexo/layout/_partial/archive.ejs","hash":"9abbf14034d581569c0b6c992fe22035cb5306b3","modified":1614403743292},{"_id":"themes/vexo/_source/tags/index.md","hash":"80a15f1b5daff22b04849109e976bc91a410b83e","modified":1614403743291},{"_id":"themes/vexo/layout/_partial/catalog.ejs","hash":"0352ce39c28074dcfc3bd6416680195eeb384fd1","modified":1614403743292},{"_id":"themes/vexo/layout/_partial/header.ejs","hash":"d1856fcf1d4a5dea7fa29dbf477561bcbac3166c","modified":1614409500396},{"_id":"themes/vexo/layout/_partial/nav.ejs","hash":"3d8ddc1f6e135a240d40edd157cf37f5d0a12df6","modified":1614403743293},{"_id":"themes/vexo/layout/_partial/footer.ejs","hash":"e437b4ca5507b5224c12c972804f8307108e3c38","modified":1614404261464},{"_id":"themes/vexo/layout/_partial/pager.ejs","hash":"3a1b9680fbfa3baa76933c7c17216996381ad241","modified":1614403743294},{"_id":"themes/vexo/layout/_partial/head.ejs","hash":"8ab801a03acb9d121ae4a302361bbdea878412bb","modified":1614405964441},{"_id":"themes/vexo/layout/_partial/top.ejs","hash":"f09dea486246a580213005b21d4b38810dd16fb3","modified":1614403743295},{"_id":"themes/vexo/layout/_third-party/google_analytics.ejs","hash":"d09107a4ee5753a2fbbdb16ddf79d23ff0618c19","modified":1614403743295},{"_id":"themes/vexo/layout/_third-party/mathjax.ejs","hash":"aa58f0cfe22e7151c1a0521bbfa5cbd76f6dcd9d","modified":1614403743296},{"_id":"themes/vexo/layout/_partial/tag.ejs","hash":"5d2a2c3f8ca7000945ab426a0c6939421974b224","modified":1614403743294},{"_id":"themes/vexo/source/css/_config.styl","hash":"0c9c0e77d6b8813cb76494e8d757843aab9e117b","modified":1614403743300},{"_id":"themes/vexo/source/css/style.styl","hash":"10f307aade07e504906303f1a43ebb502d2064ac","modified":1614405447712},{"_id":"themes/vexo/source/js/script.js","hash":"19c6ac9c1d8220fa9ab2ec461c17eaae3bc962d7","modified":1614403743318},{"_id":"themes/vexo/source/js/qrious.js","hash":"a9271e81e2ac6a692b1c133811afa33f0f3d7dc5","modified":1614403743317},{"_id":"themes/vexo/source/css/_partial/archive.styl","hash":"e80ddf26f2af3523632afeabd57f81592537985a","modified":1614403743301},{"_id":"themes/vexo/source/css/_partial/about.styl","hash":"da7b093e3973ccd70723cbe93370f772946ba433","modified":1614405517973},{"_id":"themes/vexo/source/css/_partial/catalog.styl","hash":"cbf3f59d3c3162700eb9cbd4cf72c8470c170f81","modified":1614403743301},{"_id":"themes/vexo/source/css/_partial/footer.styl","hash":"970b6fd3d05834926c69724934b798dd5a1472e6","modified":1614403743302},{"_id":"themes/vexo/source/css/_partial/header.styl","hash":"def3a6938d925c585a7da6256a6f2e90f3b7d61e","modified":1614403743302},{"_id":"themes/vexo/source/css/_partial/markdown.styl","hash":"5cfd022169adda3e2a266034e7818c8ccd349212","modified":1614403743302},{"_id":"themes/vexo/source/css/_partial/nav.styl","hash":"e92c010c5cd460e75c67083df8cdd0bf4d25cde4","modified":1614403743302},{"_id":"themes/vexo/source/css/_partial/project.styl","hash":"e9b6faadf4852bce3a4141cba0a102a7afb81e9f","modified":1614403743303},{"_id":"themes/vexo/source/css/_partial/pager.styl","hash":"888384c67429c7568aa38b5ebe5acae3cc4de367","modified":1614403743303},{"_id":"themes/vexo/source/css/_partial/tags.styl","hash":"5198a7f7c221341138ae5c65185e86b6e13e8e26","modified":1614403743303},{"_id":"themes/vexo/source/css/images/escheres.png","hash":"55deece3236dcc2fb44c28dec3e8bacbb7b46542","modified":1614403743305},{"_id":"themes/vexo/source/css/images/alipay.jpg","hash":"c49822ea6f06f868c2404fb00a93f913c8fff7b5","modified":1614403743304},{"_id":"themes/vexo/source/css/images/catalog.png","hash":"541d20dd600fc2c9230329ceb6885d86e6c151dd","modified":1614403743305},{"_id":"themes/vexo/source/css/images/top.png","hash":"611a257907474ca02828319f81b006c1d818bb84","modified":1614403743306},{"_id":"themes/vexo/source/css/images/menu.png","hash":"bdaa35eb1ed119caeb934e15a05b9f4a5396d957","modified":1614403743305},{"_id":"themes/vexo/source/css/images/logo.png","hash":"718c6e48956249121cf3cca1a22a99f8372a3f0d","modified":1614403743305},{"_id":"themes/vexo/source/css/plugins/gitment.css","hash":"541ff18d7f3542b5663dc6aad06d43e135332b71","modified":1614403743308},{"_id":"themes/vexo/source/css/images/wechat.jpg","hash":"5bed6d3eb9f71b227b0ea0187c1a7ba8caf5ee64","modified":1614403743306},{"_id":"themes/vexo/layout/about.ejs","hash":"76ba7418788eb2bb9ba46844f4d750734847d0b4","modified":1614403743296},{"_id":"themes/vexo/source/fonts/SourceSansPro.ttf","hash":"1e9f0372c269da205fdbac8cf27cb9cf59f6ad45","modified":1614403743313},{"_id":"themes/vexo/source/js/gitment.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1614403743316},{"_id":"src/_drafts/plantuml.jar","hash":"956fbb3615e2ed993c81be15c85c6c3d25206a8f","modified":1614407741885}],"Category":[],"Data":[],"Page":[],"Post":[{"_content":"# JavaScript初学者建议：不要去管浏览器兼容\n\n[![nimoc.io](http://nimoc.io/notice/index.svg)](https://nimoc.io/notice/index.html)\n\n\n如果可以回到过去的话，我会告诉自己这句话：**\"初学 JavaScript 的时候无视 DOM 和 BOM 的兼容性\"**\n## 我初学时的处境\n\n在我初学 JavaScript 的时候最头痛的就是浏览器兼容问题。在 Firefox 下面好好的代码到 IE 就不能显示了，又或者是在 IE 能正常显示的代码在 Firefox 又报错了。\n\n前端开发工程师的职责就包括跨浏览器开发。所以我就**在还不了解 JS 这门语言本身的时候去花时间学习浏览器兼容知识**，**这样会让JS学习难度增加**。**但是不能兼容主流浏览器的代码不能用在实际项目中。**\n\n**DOM 和 BOM 的兼容性问题一度让我的 JavaScript 学习停滞不前**。语言理解不够，代码又只能在特定浏览器运行。\n## 我的建议\n\n如果你正初学 JavaScript 并有着和我一样的处境的话我建议你：**初学 JavaScript 时无视 DOM 和 BOM 的兼容性，将更多的时间花在了解语言本身（ECMAScript）**。只在特定浏览器编写代码（Chrome/Firefox/Safari），实际工作中使用成熟的 JavaScript 框架（jQuery等）。放心，很少有公司会让 JS 新手用原生 JS 做前端开发。\n### 学习 JS 初期无视兼容问题有什么好处\n1. 降低学习难度\n2. 减少挫败感\n3. 花更多的时间学习 ECMAScript\n## 什么时候学习JS跨浏览器开发知识\n\n而浏览器兼容问题留到什么时候解决呢？  \n当你能熟练使用 JavaScript 框架编写可复用的代码时（jQuery插件或前端控件），或当你准备自己开发一个 JavaScript 框架时。\n## 其他一些 JavaScript 初学者建议\n1. 无编程经验千万不要拿JavaScript权威指南当入门书籍\n2. 应该用JavaScript高级程序设计最新版本（目前是第三版）作为入门书籍\n3. 传值和传址、作用域知识必须理解\n4. 调试工具必须懂并多用，学会自己捕捉错误。（chrome developer tool/Firebug）\n5. 耐心再耐心，对每一个知识点深挖能学的更轻松。\n\n以上就是我的一些分享希望若能帮助到初学 JavaScript 的你，如果觉得有误导的地方敬请立即指出。\n\n[点此订阅博客](https://github.com/nimoc/blog/issues/15)\n\n若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：[https://github.com/nimoc/blog/issues/1](https://github.com/nimoc/blog/issues/1)\n\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","source":"_drafts/ignore_browser_compatibility.md","raw":"# JavaScript初学者建议：不要去管浏览器兼容\n\n[![nimoc.io](http://nimoc.io/notice/index.svg)](https://nimoc.io/notice/index.html)\n\n\n如果可以回到过去的话，我会告诉自己这句话：**\"初学 JavaScript 的时候无视 DOM 和 BOM 的兼容性\"**\n## 我初学时的处境\n\n在我初学 JavaScript 的时候最头痛的就是浏览器兼容问题。在 Firefox 下面好好的代码到 IE 就不能显示了，又或者是在 IE 能正常显示的代码在 Firefox 又报错了。\n\n前端开发工程师的职责就包括跨浏览器开发。所以我就**在还不了解 JS 这门语言本身的时候去花时间学习浏览器兼容知识**，**这样会让JS学习难度增加**。**但是不能兼容主流浏览器的代码不能用在实际项目中。**\n\n**DOM 和 BOM 的兼容性问题一度让我的 JavaScript 学习停滞不前**。语言理解不够，代码又只能在特定浏览器运行。\n## 我的建议\n\n如果你正初学 JavaScript 并有着和我一样的处境的话我建议你：**初学 JavaScript 时无视 DOM 和 BOM 的兼容性，将更多的时间花在了解语言本身（ECMAScript）**。只在特定浏览器编写代码（Chrome/Firefox/Safari），实际工作中使用成熟的 JavaScript 框架（jQuery等）。放心，很少有公司会让 JS 新手用原生 JS 做前端开发。\n### 学习 JS 初期无视兼容问题有什么好处\n1. 降低学习难度\n2. 减少挫败感\n3. 花更多的时间学习 ECMAScript\n## 什么时候学习JS跨浏览器开发知识\n\n而浏览器兼容问题留到什么时候解决呢？  \n当你能熟练使用 JavaScript 框架编写可复用的代码时（jQuery插件或前端控件），或当你准备自己开发一个 JavaScript 框架时。\n## 其他一些 JavaScript 初学者建议\n1. 无编程经验千万不要拿JavaScript权威指南当入门书籍\n2. 应该用JavaScript高级程序设计最新版本（目前是第三版）作为入门书籍\n3. 传值和传址、作用域知识必须理解\n4. 调试工具必须懂并多用，学会自己捕捉错误。（chrome developer tool/Firebug）\n5. 耐心再耐心，对每一个知识点深挖能学的更轻松。\n\n以上就是我的一些分享希望若能帮助到初学 JavaScript 的你，如果觉得有误导的地方敬请立即指出。\n\n[点此订阅博客](https://github.com/nimoc/blog/issues/15)\n\n若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：[https://github.com/nimoc/blog/issues/1](https://github.com/nimoc/blog/issues/1)\n\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","slug":"ignore_browser_compatibility","published":0,"date":"2021-02-27T06:35:41.014Z","updated":"2021-02-27T06:57:38.990Z","_id":"cklndcymn0000pvu803m51mzo","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"JavaScript初学者建议：不要去管浏览器兼容\"><a href=\"#JavaScript初学者建议：不要去管浏览器兼容\" class=\"headerlink\" title=\"JavaScript初学者建议：不要去管浏览器兼容\"></a>JavaScript初学者建议：不要去管浏览器兼容</h1><p><a href=\"https://nimoc.io/notice/index.html\"><img src=\"http://nimoc.io/notice/index.svg\" alt=\"nimoc.io\"></a></p>\n<p>如果可以回到过去的话，我会告诉自己这句话：**”初学 JavaScript 的时候无视 DOM 和 BOM 的兼容性”**</p>\n<h2 id=\"我初学时的处境\"><a href=\"#我初学时的处境\" class=\"headerlink\" title=\"我初学时的处境\"></a>我初学时的处境</h2><p>在我初学 JavaScript 的时候最头痛的就是浏览器兼容问题。在 Firefox 下面好好的代码到 IE 就不能显示了，又或者是在 IE 能正常显示的代码在 Firefox 又报错了。</p>\n<p>前端开发工程师的职责就包括跨浏览器开发。所以我就<strong>在还不了解 JS 这门语言本身的时候去花时间学习浏览器兼容知识</strong>，<strong>这样会让JS学习难度增加</strong>。<strong>但是不能兼容主流浏览器的代码不能用在实际项目中。</strong></p>\n<p><strong>DOM 和 BOM 的兼容性问题一度让我的 JavaScript 学习停滞不前</strong>。语言理解不够，代码又只能在特定浏览器运行。</p>\n<h2 id=\"我的建议\"><a href=\"#我的建议\" class=\"headerlink\" title=\"我的建议\"></a>我的建议</h2><p>如果你正初学 JavaScript 并有着和我一样的处境的话我建议你：<strong>初学 JavaScript 时无视 DOM 和 BOM 的兼容性，将更多的时间花在了解语言本身（ECMAScript）</strong>。只在特定浏览器编写代码（Chrome/Firefox/Safari），实际工作中使用成熟的 JavaScript 框架（jQuery等）。放心，很少有公司会让 JS 新手用原生 JS 做前端开发。</p>\n<h3 id=\"学习-JS-初期无视兼容问题有什么好处\"><a href=\"#学习-JS-初期无视兼容问题有什么好处\" class=\"headerlink\" title=\"学习 JS 初期无视兼容问题有什么好处\"></a>学习 JS 初期无视兼容问题有什么好处</h3><ol>\n<li>降低学习难度</li>\n<li>减少挫败感</li>\n<li>花更多的时间学习 ECMAScript<h2 id=\"什么时候学习JS跨浏览器开发知识\"><a href=\"#什么时候学习JS跨浏览器开发知识\" class=\"headerlink\" title=\"什么时候学习JS跨浏览器开发知识\"></a>什么时候学习JS跨浏览器开发知识</h2></li>\n</ol>\n<p>而浏览器兼容问题留到什么时候解决呢？<br>当你能熟练使用 JavaScript 框架编写可复用的代码时（jQuery插件或前端控件），或当你准备自己开发一个 JavaScript 框架时。</p>\n<h2 id=\"其他一些-JavaScript-初学者建议\"><a href=\"#其他一些-JavaScript-初学者建议\" class=\"headerlink\" title=\"其他一些 JavaScript 初学者建议\"></a>其他一些 JavaScript 初学者建议</h2><ol>\n<li>无编程经验千万不要拿JavaScript权威指南当入门书籍</li>\n<li>应该用JavaScript高级程序设计最新版本（目前是第三版）作为入门书籍</li>\n<li>传值和传址、作用域知识必须理解</li>\n<li>调试工具必须懂并多用，学会自己捕捉错误。（chrome developer tool/Firebug）</li>\n<li>耐心再耐心，对每一个知识点深挖能学的更轻松。</li>\n</ol>\n<p>以上就是我的一些分享希望若能帮助到初学 JavaScript 的你，如果觉得有误导的地方敬请立即指出。</p>\n<p><a href=\"https://github.com/nimoc/blog/issues/15\">点此订阅博客</a></p>\n<p>若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：<a href=\"https://github.com/nimoc/blog/issues/1\">https://github.com/nimoc/blog/issues/1</a></p>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JavaScript初学者建议：不要去管浏览器兼容\"><a href=\"#JavaScript初学者建议：不要去管浏览器兼容\" class=\"headerlink\" title=\"JavaScript初学者建议：不要去管浏览器兼容\"></a>JavaScript初学者建议：不要去管浏览器兼容</h1><p><a href=\"https://nimoc.io/notice/index.html\"><img src=\"http://nimoc.io/notice/index.svg\" alt=\"nimoc.io\"></a></p>\n<p>如果可以回到过去的话，我会告诉自己这句话：**”初学 JavaScript 的时候无视 DOM 和 BOM 的兼容性”**</p>\n<h2 id=\"我初学时的处境\"><a href=\"#我初学时的处境\" class=\"headerlink\" title=\"我初学时的处境\"></a>我初学时的处境</h2><p>在我初学 JavaScript 的时候最头痛的就是浏览器兼容问题。在 Firefox 下面好好的代码到 IE 就不能显示了，又或者是在 IE 能正常显示的代码在 Firefox 又报错了。</p>\n<p>前端开发工程师的职责就包括跨浏览器开发。所以我就<strong>在还不了解 JS 这门语言本身的时候去花时间学习浏览器兼容知识</strong>，<strong>这样会让JS学习难度增加</strong>。<strong>但是不能兼容主流浏览器的代码不能用在实际项目中。</strong></p>\n<p><strong>DOM 和 BOM 的兼容性问题一度让我的 JavaScript 学习停滞不前</strong>。语言理解不够，代码又只能在特定浏览器运行。</p>\n<h2 id=\"我的建议\"><a href=\"#我的建议\" class=\"headerlink\" title=\"我的建议\"></a>我的建议</h2><p>如果你正初学 JavaScript 并有着和我一样的处境的话我建议你：<strong>初学 JavaScript 时无视 DOM 和 BOM 的兼容性，将更多的时间花在了解语言本身（ECMAScript）</strong>。只在特定浏览器编写代码（Chrome/Firefox/Safari），实际工作中使用成熟的 JavaScript 框架（jQuery等）。放心，很少有公司会让 JS 新手用原生 JS 做前端开发。</p>\n<h3 id=\"学习-JS-初期无视兼容问题有什么好处\"><a href=\"#学习-JS-初期无视兼容问题有什么好处\" class=\"headerlink\" title=\"学习 JS 初期无视兼容问题有什么好处\"></a>学习 JS 初期无视兼容问题有什么好处</h3><ol>\n<li>降低学习难度</li>\n<li>减少挫败感</li>\n<li>花更多的时间学习 ECMAScript<h2 id=\"什么时候学习JS跨浏览器开发知识\"><a href=\"#什么时候学习JS跨浏览器开发知识\" class=\"headerlink\" title=\"什么时候学习JS跨浏览器开发知识\"></a>什么时候学习JS跨浏览器开发知识</h2></li>\n</ol>\n<p>而浏览器兼容问题留到什么时候解决呢？<br>当你能熟练使用 JavaScript 框架编写可复用的代码时（jQuery插件或前端控件），或当你准备自己开发一个 JavaScript 框架时。</p>\n<h2 id=\"其他一些-JavaScript-初学者建议\"><a href=\"#其他一些-JavaScript-初学者建议\" class=\"headerlink\" title=\"其他一些 JavaScript 初学者建议\"></a>其他一些 JavaScript 初学者建议</h2><ol>\n<li>无编程经验千万不要拿JavaScript权威指南当入门书籍</li>\n<li>应该用JavaScript高级程序设计最新版本（目前是第三版）作为入门书籍</li>\n<li>传值和传址、作用域知识必须理解</li>\n<li>调试工具必须懂并多用，学会自己捕捉错误。（chrome developer tool/Firebug）</li>\n<li>耐心再耐心，对每一个知识点深挖能学的更轻松。</li>\n</ol>\n<p>以上就是我的一些分享希望若能帮助到初学 JavaScript 的你，如果觉得有误导的地方敬请立即指出。</p>\n<p><a href=\"https://github.com/nimoc/blog/issues/15\">点此订阅博客</a></p>\n<p>若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：<a href=\"https://github.com/nimoc/blog/issues/1\">https://github.com/nimoc/blog/issues/1</a></p>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>"},{"_content":"# JavaScript原型赋值陷阱\n[![nimoc.io](http://nimoc.io/notice/index.svg)](https://nimoc.io/notice/index.html)\n\n不通过对象的 `constructor.prototype` 对原型中的属性进行递增时候会触发原型赋值陷阱。\n\n本文通过一个 Popup 弹出框来解释陷阱的出现情况，并说明如何找到陷阱和解决问题。并且本文假设你至少简单了解 JavaScript 中的原型。\n## 记录alert次数的弹出框\n\n**单实例调用**\n\n``` js\nvar Popup=function(){\n}\nPopup.prototype.alert=function(message){\n    this.iMessageCount++;\n    alert(message+'~alert过'+this.iMessageCount+'次');    \n}\nPopup.prototype.iMessageCount=0;\nvar oNimo=new Popup();\noNimo.alert('你好我是nimo!');//  alert 过1次\noNimo.alert('Nice to meet you,I am Nimo!');//  alert 过2次\n```\n\n代码解释\n1. 创建构造函数 Popup\n2. 给 Popup 添加 alert 方法。弹出内容是消息加弹出次数，每次弹出递增 iMessageCount 属性。\n3. 添加公用属性 iMessageCount 用于记录弹出次数。\n4. 创建oNimo实例，并用 oNimo 弹出2次内容。\n\n弹出内容\n1. 你好我是nimo!~alert过1次\n2. Nice to meet you,I am Nimo!~alert过2次\n\n**添加一个实例**\n\n在上面的代码底部添加如下代码\n\n```\nvar oDemo=new Popup();\noDemo.alert('我是demo!'); //alert过1次  \n```\n\n代码解释\n1. 创建oDemo实例，并用oDemo弹出2次内容。\n\n弹出内容\n1. 我是demo!~alert过1次\n\noDemo 的弹出结果应该是 alert 过3次，结果却是 alert 过1次\n## debug\n\n遇到 bug 先将相关对象输出检查\n\n``` js\nconsole.log(oNimo);\nconsole.log(oDemo);\n```\n\n![](https://cloud.githubusercontent.com/assets/3949015/7004697/0f1560d4-dca2-11e4-8c19-0668203b9000.png)\n打印结果后发现原型中 iMessageCount 属性并没有递增，依然是0。而 oNimo 和 oDemo 自身属性中却存储着 iMessageCount 属性，分别是2和1。说明 `this.iMessageCount++` 递增的是对象自身属性并不是原型属\n### 拆分 bug\n\n既然问题出在 `this.iMessageCount++` 那么就对这行代码进行详细分析。\n\n以下三行代码实际相等\n\n``` js\nthis.iMessageCount++\nthis.iMessageCount=this.iMessageCount+1\nthis.iMessageCount=this.constructor.prototype.iMessageCount+1\n```\n\n解释\n1. 递增操作\n2. iMessageCount属性等于iMessageCount属性+1\n3. 因为一开始对象自身并没有iMessageCount属性而原型中有，所有结果是将原型属性中的iMessageCount属性+1并赋值给对象自身属性中的iMessageCount属性。\n\n当调用新的 `oDemo` 时并没有修改 `Popup` 的原型。和上面一样，只是获取了 `Popup.prototype.iMessage` 的值。\n\n知识点：对象访问一个属性会首先查找自身属性如果找不到自身属性就查找对象的 constructor 中的 prototype 中的属性（对象构造函数的原型中的属性）。\n\n跳过陷阱\n\n如需对原型中的属性进行递增操作请直接对对象的 constructor 中的 protorype 中的属性进行递增。\n\n修复后的代码：\n\n关键代码： `this.constructor.prototype.iMessageCount++`\n\n完整代码：\n\n``` js\nvar Popup=function(){\n}\nPopup.prototype.alert=function(message){\n    this.constructor.prototype.iMessageCount++;\n    alert(message+'~alert过'+this.iMessageCount+'次');    \n}\nPopup.prototype.iMessageCount=0;\nvar oNimo=new Popup();\noNimo.alert('你好我是nimo!');//  alert 过1次\noNimo.alert('Nice to meet you,I am Nimo!');//  alert 过2次\n\nvar oDemo=new Popup();\noDemo.alert('我是demo!'); //alert过3次\n```\n## 小结\n\n不通过对象的 constructor.prototype 对原型中的属性进行递增时候会触发原型递增陷阱。\n\n如需对原型中的属性进行递增操作请直接对对象的constructor中的protorype中的属性进行递增。\n\n\n[点此订阅博客](https://github.com/nimoc/blog/issues/15)\n\n若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：[https://github.com/nimoc/blog/issues/17](https://github.com/nimoc/blog/issues/17)\n\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"17\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","source":"_drafts/js_prototype_trap.md","raw":"# JavaScript原型赋值陷阱\n[![nimoc.io](http://nimoc.io/notice/index.svg)](https://nimoc.io/notice/index.html)\n\n不通过对象的 `constructor.prototype` 对原型中的属性进行递增时候会触发原型赋值陷阱。\n\n本文通过一个 Popup 弹出框来解释陷阱的出现情况，并说明如何找到陷阱和解决问题。并且本文假设你至少简单了解 JavaScript 中的原型。\n## 记录alert次数的弹出框\n\n**单实例调用**\n\n``` js\nvar Popup=function(){\n}\nPopup.prototype.alert=function(message){\n    this.iMessageCount++;\n    alert(message+'~alert过'+this.iMessageCount+'次');    \n}\nPopup.prototype.iMessageCount=0;\nvar oNimo=new Popup();\noNimo.alert('你好我是nimo!');//  alert 过1次\noNimo.alert('Nice to meet you,I am Nimo!');//  alert 过2次\n```\n\n代码解释\n1. 创建构造函数 Popup\n2. 给 Popup 添加 alert 方法。弹出内容是消息加弹出次数，每次弹出递增 iMessageCount 属性。\n3. 添加公用属性 iMessageCount 用于记录弹出次数。\n4. 创建oNimo实例，并用 oNimo 弹出2次内容。\n\n弹出内容\n1. 你好我是nimo!~alert过1次\n2. Nice to meet you,I am Nimo!~alert过2次\n\n**添加一个实例**\n\n在上面的代码底部添加如下代码\n\n```\nvar oDemo=new Popup();\noDemo.alert('我是demo!'); //alert过1次  \n```\n\n代码解释\n1. 创建oDemo实例，并用oDemo弹出2次内容。\n\n弹出内容\n1. 我是demo!~alert过1次\n\noDemo 的弹出结果应该是 alert 过3次，结果却是 alert 过1次\n## debug\n\n遇到 bug 先将相关对象输出检查\n\n``` js\nconsole.log(oNimo);\nconsole.log(oDemo);\n```\n\n![](https://cloud.githubusercontent.com/assets/3949015/7004697/0f1560d4-dca2-11e4-8c19-0668203b9000.png)\n打印结果后发现原型中 iMessageCount 属性并没有递增，依然是0。而 oNimo 和 oDemo 自身属性中却存储着 iMessageCount 属性，分别是2和1。说明 `this.iMessageCount++` 递增的是对象自身属性并不是原型属\n### 拆分 bug\n\n既然问题出在 `this.iMessageCount++` 那么就对这行代码进行详细分析。\n\n以下三行代码实际相等\n\n``` js\nthis.iMessageCount++\nthis.iMessageCount=this.iMessageCount+1\nthis.iMessageCount=this.constructor.prototype.iMessageCount+1\n```\n\n解释\n1. 递增操作\n2. iMessageCount属性等于iMessageCount属性+1\n3. 因为一开始对象自身并没有iMessageCount属性而原型中有，所有结果是将原型属性中的iMessageCount属性+1并赋值给对象自身属性中的iMessageCount属性。\n\n当调用新的 `oDemo` 时并没有修改 `Popup` 的原型。和上面一样，只是获取了 `Popup.prototype.iMessage` 的值。\n\n知识点：对象访问一个属性会首先查找自身属性如果找不到自身属性就查找对象的 constructor 中的 prototype 中的属性（对象构造函数的原型中的属性）。\n\n跳过陷阱\n\n如需对原型中的属性进行递增操作请直接对对象的 constructor 中的 protorype 中的属性进行递增。\n\n修复后的代码：\n\n关键代码： `this.constructor.prototype.iMessageCount++`\n\n完整代码：\n\n``` js\nvar Popup=function(){\n}\nPopup.prototype.alert=function(message){\n    this.constructor.prototype.iMessageCount++;\n    alert(message+'~alert过'+this.iMessageCount+'次');    \n}\nPopup.prototype.iMessageCount=0;\nvar oNimo=new Popup();\noNimo.alert('你好我是nimo!');//  alert 过1次\noNimo.alert('Nice to meet you,I am Nimo!');//  alert 过2次\n\nvar oDemo=new Popup();\noDemo.alert('我是demo!'); //alert过3次\n```\n## 小结\n\n不通过对象的 constructor.prototype 对原型中的属性进行递增时候会触发原型递增陷阱。\n\n如需对原型中的属性进行递增操作请直接对对象的constructor中的protorype中的属性进行递增。\n\n\n[点此订阅博客](https://github.com/nimoc/blog/issues/15)\n\n若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：[https://github.com/nimoc/blog/issues/17](https://github.com/nimoc/blog/issues/17)\n\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"17\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","slug":"js_prototype_trap","published":0,"date":"2021-02-27T06:35:41.015Z","updated":"2021-02-27T06:57:38.990Z","_id":"cklndcynk0001pvu85nbmei5l","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"JavaScript原型赋值陷阱\"><a href=\"#JavaScript原型赋值陷阱\" class=\"headerlink\" title=\"JavaScript原型赋值陷阱\"></a>JavaScript原型赋值陷阱</h1><p><a href=\"https://nimoc.io/notice/index.html\"><img src=\"http://nimoc.io/notice/index.svg\" alt=\"nimoc.io\"></a></p>\n<p>不通过对象的 <code>constructor.prototype</code> 对原型中的属性进行递增时候会触发原型赋值陷阱。</p>\n<p>本文通过一个 Popup 弹出框来解释陷阱的出现情况，并说明如何找到陷阱和解决问题。并且本文假设你至少简单了解 JavaScript 中的原型。</p>\n<h2 id=\"记录alert次数的弹出框\"><a href=\"#记录alert次数的弹出框\" class=\"headerlink\" title=\"记录alert次数的弹出框\"></a>记录alert次数的弹出框</h2><p><strong>单实例调用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Popup=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Popup.prototype.alert=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">message</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.iMessageCount++;</span><br><span class=\"line\">    alert(message+<span class=\"string\">&#x27;~alert过&#x27;</span>+<span class=\"built_in\">this</span>.iMessageCount+<span class=\"string\">&#x27;次&#x27;</span>);    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Popup.prototype.iMessageCount=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> oNimo=<span class=\"keyword\">new</span> Popup();</span><br><span class=\"line\">oNimo.alert(<span class=\"string\">&#x27;你好我是nimo!&#x27;</span>);<span class=\"comment\">//  alert 过1次</span></span><br><span class=\"line\">oNimo.alert(<span class=\"string\">&#x27;Nice to meet you,I am Nimo!&#x27;</span>);<span class=\"comment\">//  alert 过2次</span></span><br></pre></td></tr></table></figure>\n\n<p>代码解释</p>\n<ol>\n<li>创建构造函数 Popup</li>\n<li>给 Popup 添加 alert 方法。弹出内容是消息加弹出次数，每次弹出递增 iMessageCount 属性。</li>\n<li>添加公用属性 iMessageCount 用于记录弹出次数。</li>\n<li>创建oNimo实例，并用 oNimo 弹出2次内容。</li>\n</ol>\n<p>弹出内容</p>\n<ol>\n<li>你好我是nimo!~alert过1次</li>\n<li>Nice to meet you,I am Nimo!~alert过2次</li>\n</ol>\n<p><strong>添加一个实例</strong></p>\n<p>在上面的代码底部添加如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var oDemo&#x3D;new Popup();</span><br><span class=\"line\">oDemo.alert(&#39;我是demo!&#39;); &#x2F;&#x2F;alert过1次  </span><br></pre></td></tr></table></figure>\n\n<p>代码解释</p>\n<ol>\n<li>创建oDemo实例，并用oDemo弹出2次内容。</li>\n</ol>\n<p>弹出内容</p>\n<ol>\n<li>我是demo!~alert过1次</li>\n</ol>\n<p>oDemo 的弹出结果应该是 alert 过3次，结果却是 alert 过1次</p>\n<h2 id=\"debug\"><a href=\"#debug\" class=\"headerlink\" title=\"debug\"></a>debug</h2><p>遇到 bug 先将相关对象输出检查</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(oNimo);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(oDemo);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cloud.githubusercontent.com/assets/3949015/7004697/0f1560d4-dca2-11e4-8c19-0668203b9000.png\"><br>打印结果后发现原型中 iMessageCount 属性并没有递增，依然是0。而 oNimo 和 oDemo 自身属性中却存储着 iMessageCount 属性，分别是2和1。说明 <code>this.iMessageCount++</code> 递增的是对象自身属性并不是原型属</p>\n<h3 id=\"拆分-bug\"><a href=\"#拆分-bug\" class=\"headerlink\" title=\"拆分 bug\"></a>拆分 bug</h3><p>既然问题出在 <code>this.iMessageCount++</code> 那么就对这行代码进行详细分析。</p>\n<p>以下三行代码实际相等</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.iMessageCount++</span><br><span class=\"line\"><span class=\"built_in\">this</span>.iMessageCount=<span class=\"built_in\">this</span>.iMessageCount+<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.iMessageCount=<span class=\"built_in\">this</span>.constructor.prototype.iMessageCount+<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>解释</p>\n<ol>\n<li>递增操作</li>\n<li>iMessageCount属性等于iMessageCount属性+1</li>\n<li>因为一开始对象自身并没有iMessageCount属性而原型中有，所有结果是将原型属性中的iMessageCount属性+1并赋值给对象自身属性中的iMessageCount属性。</li>\n</ol>\n<p>当调用新的 <code>oDemo</code> 时并没有修改 <code>Popup</code> 的原型。和上面一样，只是获取了 <code>Popup.prototype.iMessage</code> 的值。</p>\n<p>知识点：对象访问一个属性会首先查找自身属性如果找不到自身属性就查找对象的 constructor 中的 prototype 中的属性（对象构造函数的原型中的属性）。</p>\n<p>跳过陷阱</p>\n<p>如需对原型中的属性进行递增操作请直接对对象的 constructor 中的 protorype 中的属性进行递增。</p>\n<p>修复后的代码：</p>\n<p>关键代码： <code>this.constructor.prototype.iMessageCount++</code></p>\n<p>完整代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Popup=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Popup.prototype.alert=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">message</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.constructor.prototype.iMessageCount++;</span><br><span class=\"line\">    alert(message+<span class=\"string\">&#x27;~alert过&#x27;</span>+<span class=\"built_in\">this</span>.iMessageCount+<span class=\"string\">&#x27;次&#x27;</span>);    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Popup.prototype.iMessageCount=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> oNimo=<span class=\"keyword\">new</span> Popup();</span><br><span class=\"line\">oNimo.alert(<span class=\"string\">&#x27;你好我是nimo!&#x27;</span>);<span class=\"comment\">//  alert 过1次</span></span><br><span class=\"line\">oNimo.alert(<span class=\"string\">&#x27;Nice to meet you,I am Nimo!&#x27;</span>);<span class=\"comment\">//  alert 过2次</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> oDemo=<span class=\"keyword\">new</span> Popup();</span><br><span class=\"line\">oDemo.alert(<span class=\"string\">&#x27;我是demo!&#x27;</span>); <span class=\"comment\">//alert过3次</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>不通过对象的 constructor.prototype 对原型中的属性进行递增时候会触发原型递增陷阱。</p>\n<p>如需对原型中的属性进行递增操作请直接对对象的constructor中的protorype中的属性进行递增。</p>\n<p><a href=\"https://github.com/nimoc/blog/issues/15\">点此订阅博客</a></p>\n<p>若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：<a href=\"https://github.com/nimoc/blog/issues/17\">https://github.com/nimoc/blog/issues/17</a></p>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"17\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JavaScript原型赋值陷阱\"><a href=\"#JavaScript原型赋值陷阱\" class=\"headerlink\" title=\"JavaScript原型赋值陷阱\"></a>JavaScript原型赋值陷阱</h1><p><a href=\"https://nimoc.io/notice/index.html\"><img src=\"http://nimoc.io/notice/index.svg\" alt=\"nimoc.io\"></a></p>\n<p>不通过对象的 <code>constructor.prototype</code> 对原型中的属性进行递增时候会触发原型赋值陷阱。</p>\n<p>本文通过一个 Popup 弹出框来解释陷阱的出现情况，并说明如何找到陷阱和解决问题。并且本文假设你至少简单了解 JavaScript 中的原型。</p>\n<h2 id=\"记录alert次数的弹出框\"><a href=\"#记录alert次数的弹出框\" class=\"headerlink\" title=\"记录alert次数的弹出框\"></a>记录alert次数的弹出框</h2><p><strong>单实例调用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Popup=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Popup.prototype.alert=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">message</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.iMessageCount++;</span><br><span class=\"line\">    alert(message+<span class=\"string\">&#x27;~alert过&#x27;</span>+<span class=\"built_in\">this</span>.iMessageCount+<span class=\"string\">&#x27;次&#x27;</span>);    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Popup.prototype.iMessageCount=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> oNimo=<span class=\"keyword\">new</span> Popup();</span><br><span class=\"line\">oNimo.alert(<span class=\"string\">&#x27;你好我是nimo!&#x27;</span>);<span class=\"comment\">//  alert 过1次</span></span><br><span class=\"line\">oNimo.alert(<span class=\"string\">&#x27;Nice to meet you,I am Nimo!&#x27;</span>);<span class=\"comment\">//  alert 过2次</span></span><br></pre></td></tr></table></figure>\n\n<p>代码解释</p>\n<ol>\n<li>创建构造函数 Popup</li>\n<li>给 Popup 添加 alert 方法。弹出内容是消息加弹出次数，每次弹出递增 iMessageCount 属性。</li>\n<li>添加公用属性 iMessageCount 用于记录弹出次数。</li>\n<li>创建oNimo实例，并用 oNimo 弹出2次内容。</li>\n</ol>\n<p>弹出内容</p>\n<ol>\n<li>你好我是nimo!~alert过1次</li>\n<li>Nice to meet you,I am Nimo!~alert过2次</li>\n</ol>\n<p><strong>添加一个实例</strong></p>\n<p>在上面的代码底部添加如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var oDemo&#x3D;new Popup();</span><br><span class=\"line\">oDemo.alert(&#39;我是demo!&#39;); &#x2F;&#x2F;alert过1次  </span><br></pre></td></tr></table></figure>\n\n<p>代码解释</p>\n<ol>\n<li>创建oDemo实例，并用oDemo弹出2次内容。</li>\n</ol>\n<p>弹出内容</p>\n<ol>\n<li>我是demo!~alert过1次</li>\n</ol>\n<p>oDemo 的弹出结果应该是 alert 过3次，结果却是 alert 过1次</p>\n<h2 id=\"debug\"><a href=\"#debug\" class=\"headerlink\" title=\"debug\"></a>debug</h2><p>遇到 bug 先将相关对象输出检查</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(oNimo);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(oDemo);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cloud.githubusercontent.com/assets/3949015/7004697/0f1560d4-dca2-11e4-8c19-0668203b9000.png\"><br>打印结果后发现原型中 iMessageCount 属性并没有递增，依然是0。而 oNimo 和 oDemo 自身属性中却存储着 iMessageCount 属性，分别是2和1。说明 <code>this.iMessageCount++</code> 递增的是对象自身属性并不是原型属</p>\n<h3 id=\"拆分-bug\"><a href=\"#拆分-bug\" class=\"headerlink\" title=\"拆分 bug\"></a>拆分 bug</h3><p>既然问题出在 <code>this.iMessageCount++</code> 那么就对这行代码进行详细分析。</p>\n<p>以下三行代码实际相等</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.iMessageCount++</span><br><span class=\"line\"><span class=\"built_in\">this</span>.iMessageCount=<span class=\"built_in\">this</span>.iMessageCount+<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.iMessageCount=<span class=\"built_in\">this</span>.constructor.prototype.iMessageCount+<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>解释</p>\n<ol>\n<li>递增操作</li>\n<li>iMessageCount属性等于iMessageCount属性+1</li>\n<li>因为一开始对象自身并没有iMessageCount属性而原型中有，所有结果是将原型属性中的iMessageCount属性+1并赋值给对象自身属性中的iMessageCount属性。</li>\n</ol>\n<p>当调用新的 <code>oDemo</code> 时并没有修改 <code>Popup</code> 的原型。和上面一样，只是获取了 <code>Popup.prototype.iMessage</code> 的值。</p>\n<p>知识点：对象访问一个属性会首先查找自身属性如果找不到自身属性就查找对象的 constructor 中的 prototype 中的属性（对象构造函数的原型中的属性）。</p>\n<p>跳过陷阱</p>\n<p>如需对原型中的属性进行递增操作请直接对对象的 constructor 中的 protorype 中的属性进行递增。</p>\n<p>修复后的代码：</p>\n<p>关键代码： <code>this.constructor.prototype.iMessageCount++</code></p>\n<p>完整代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Popup=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Popup.prototype.alert=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">message</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.constructor.prototype.iMessageCount++;</span><br><span class=\"line\">    alert(message+<span class=\"string\">&#x27;~alert过&#x27;</span>+<span class=\"built_in\">this</span>.iMessageCount+<span class=\"string\">&#x27;次&#x27;</span>);    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Popup.prototype.iMessageCount=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> oNimo=<span class=\"keyword\">new</span> Popup();</span><br><span class=\"line\">oNimo.alert(<span class=\"string\">&#x27;你好我是nimo!&#x27;</span>);<span class=\"comment\">//  alert 过1次</span></span><br><span class=\"line\">oNimo.alert(<span class=\"string\">&#x27;Nice to meet you,I am Nimo!&#x27;</span>);<span class=\"comment\">//  alert 过2次</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> oDemo=<span class=\"keyword\">new</span> Popup();</span><br><span class=\"line\">oDemo.alert(<span class=\"string\">&#x27;我是demo!&#x27;</span>); <span class=\"comment\">//alert过3次</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>不通过对象的 constructor.prototype 对原型中的属性进行递增时候会触发原型递增陷阱。</p>\n<p>如需对原型中的属性进行递增操作请直接对对象的constructor中的protorype中的属性进行递增。</p>\n<p><a href=\"https://github.com/nimoc/blog/issues/15\">点此订阅博客</a></p>\n<p>若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：<a href=\"https://github.com/nimoc/blog/issues/17\">https://github.com/nimoc/blog/issues/17</a></p>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"17\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>"},{"_content":"# 深入理解JavaScript-replace\n\n[![nimoc.io](http://nimoc.io/notice/index.svg)](https://nimoc.io/notice/index.html)\n\nreplace方法是属于String对象的，可用于替换字符串。\n## 简单介绍:\n\n`String.replace(searchValue,replaceValue)`\n1.  String:字符串\n2.  searchValue：字符串或正则表达式\n3.  replaceValue:字符串或者函数\n## 字符串替换字符串\n\n``` javascript\n'I am loser!'.replace('loser','hero')\n//I am hero!\n```\n\n直接使用字符串能让自己从loser变成hero，但是如果有2个loser就不能一起变成hero了。\n\n``` javascript\n'I am loser,You are loser'.replace('loser','hero');\n//I am hero,You are loser \n```\n## 正则表达式替换为字符串\n\n``` javascript\n'I am loser,You are loser'.replace(/loser/g,'hero')\n//I am hero,You are hero\n```\n\n使用正则表达式，并将正则的global属性改为true则可以让所有loser都变为hero\n## 有趣的替换字符\n\n`replaceValue` 可以是字符串。如果字符串中有几个特定字符的话，会被转换为特定字符串。\n\n| 字符 | 替换文本 |\n| :-- | :-- |\n| $& | 与正则相匹配的字符串 |\n| $` | 匹配字符串左边的字符 |\n| $' | 匹配字符串右边的字符 |\n| $1,$2,$3,…,$n | 匹配结果中对应的分组匹配结果 |\n### 使用$&字符给匹配字符加大括号\n\n``` javascript\nvar sStr='讨论一下正则表达式中的replace的用法';\nsStr.replace(/正则表达式/,'{$&}');\n//讨论一下{正则表达式}中的replace的用法\n```\n### 使用$`和$'字符替换内容\n\n``` javascript\n'abc'.replace(/b/,\"$`\");//aac\n'abc'.replace(/b/,\"$'\");//acc\n```\n### 使用分组匹配组合新的字符串\n\n``` javascript\n'nimoc@126.com'.replace(/(.+)(@)(.*)/,\"$2$1\")//@nimoc\n```\n## replaceValue参数可以是一个函数\n\n`String.replace(searchValue,replaceValue)` 中的**replaceValue**可以是一个函数.\n\n如果replaceValue是一个函数的话那么，这个函数的arguments会有n+3个参数（n为正则匹配到的次数）\n\n**先看例子帮助理解：**\n\n``` javascript\nfunction logArguments(){    \n    console.log(arguments);//[\"nimoc@126.com\", \"nimoc\", \"@\", \"126.com\", 0, \"nimoc@126.com\"] \n    return '返回值会替换掉匹配到的目标'\n}\nconsole.log(\n    'nimoc@126.com'.replace(/(.+)(@)(.*)/,logArguments)\n)\n```\n\n**参数分别为**\n1.  匹配到的字符串（此例为nimoc@126.com,推荐修改上面代码的正则来查看匹配到的字符帮助理解)\n2.  如果正则使用了分组匹配就为多个否则无此参数。（此例的参数就分别为`\"nimoc\", \"@\", \"126.com\"`。推荐修改正则为/nimo/查看控制台中返回的arguments值）\n3.  匹配字符串的对应索引位置（此例为0）\n4.  原始字符串(此例为nimoc@126.com)\n### 使用自定义函数将A-G字符串改为小写\n\n``` javascript\n'JAVASCRIPT'.replace(/[A-G]/g,function(){\n    return arguments[0].toLowerCase();\n})//JaVaScRIPT \n```\n### 使用自定义函数做回调式替换将行内样式中的单引号删除\n\n``` javascript\n'<span style=\"font-family:\\'微软雅黑\\';\">;demo</span>'.replace(/\\'[^']+\\'/g,function(){      \n    var sResult=arguments[0];\n    console.log(sResult);//'微软雅黑'\n    sResult=sResult.replace(/\\'/g,'');\n    console.log(sResult);//微软雅黑\n    return sResult;\n})//<span style=\"font-family:微软雅黑;\">demo</span> \n```\n## 最后的小试牛刀\n\n这一节是交给阅读者发挥的内容：\n### 洗扑克\n\n需要将Thisnimoc-JavaScript使用正则替换成 `TJhaivsaNSicmroijpst`\n\n[点此订阅博客](https://github.com/nimoc/blog/issues/15)\n\n若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：[https://github.com/nimoc/blog/issues/2](https://github.com/nimoc/blog/issues/2)\n\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","source":"_drafts/js_replace.md","raw":"# 深入理解JavaScript-replace\n\n[![nimoc.io](http://nimoc.io/notice/index.svg)](https://nimoc.io/notice/index.html)\n\nreplace方法是属于String对象的，可用于替换字符串。\n## 简单介绍:\n\n`String.replace(searchValue,replaceValue)`\n1.  String:字符串\n2.  searchValue：字符串或正则表达式\n3.  replaceValue:字符串或者函数\n## 字符串替换字符串\n\n``` javascript\n'I am loser!'.replace('loser','hero')\n//I am hero!\n```\n\n直接使用字符串能让自己从loser变成hero，但是如果有2个loser就不能一起变成hero了。\n\n``` javascript\n'I am loser,You are loser'.replace('loser','hero');\n//I am hero,You are loser \n```\n## 正则表达式替换为字符串\n\n``` javascript\n'I am loser,You are loser'.replace(/loser/g,'hero')\n//I am hero,You are hero\n```\n\n使用正则表达式，并将正则的global属性改为true则可以让所有loser都变为hero\n## 有趣的替换字符\n\n`replaceValue` 可以是字符串。如果字符串中有几个特定字符的话，会被转换为特定字符串。\n\n| 字符 | 替换文本 |\n| :-- | :-- |\n| $& | 与正则相匹配的字符串 |\n| $` | 匹配字符串左边的字符 |\n| $' | 匹配字符串右边的字符 |\n| $1,$2,$3,…,$n | 匹配结果中对应的分组匹配结果 |\n### 使用$&字符给匹配字符加大括号\n\n``` javascript\nvar sStr='讨论一下正则表达式中的replace的用法';\nsStr.replace(/正则表达式/,'{$&}');\n//讨论一下{正则表达式}中的replace的用法\n```\n### 使用$`和$'字符替换内容\n\n``` javascript\n'abc'.replace(/b/,\"$`\");//aac\n'abc'.replace(/b/,\"$'\");//acc\n```\n### 使用分组匹配组合新的字符串\n\n``` javascript\n'nimoc@126.com'.replace(/(.+)(@)(.*)/,\"$2$1\")//@nimoc\n```\n## replaceValue参数可以是一个函数\n\n`String.replace(searchValue,replaceValue)` 中的**replaceValue**可以是一个函数.\n\n如果replaceValue是一个函数的话那么，这个函数的arguments会有n+3个参数（n为正则匹配到的次数）\n\n**先看例子帮助理解：**\n\n``` javascript\nfunction logArguments(){    \n    console.log(arguments);//[\"nimoc@126.com\", \"nimoc\", \"@\", \"126.com\", 0, \"nimoc@126.com\"] \n    return '返回值会替换掉匹配到的目标'\n}\nconsole.log(\n    'nimoc@126.com'.replace(/(.+)(@)(.*)/,logArguments)\n)\n```\n\n**参数分别为**\n1.  匹配到的字符串（此例为nimoc@126.com,推荐修改上面代码的正则来查看匹配到的字符帮助理解)\n2.  如果正则使用了分组匹配就为多个否则无此参数。（此例的参数就分别为`\"nimoc\", \"@\", \"126.com\"`。推荐修改正则为/nimo/查看控制台中返回的arguments值）\n3.  匹配字符串的对应索引位置（此例为0）\n4.  原始字符串(此例为nimoc@126.com)\n### 使用自定义函数将A-G字符串改为小写\n\n``` javascript\n'JAVASCRIPT'.replace(/[A-G]/g,function(){\n    return arguments[0].toLowerCase();\n})//JaVaScRIPT \n```\n### 使用自定义函数做回调式替换将行内样式中的单引号删除\n\n``` javascript\n'<span style=\"font-family:\\'微软雅黑\\';\">;demo</span>'.replace(/\\'[^']+\\'/g,function(){      \n    var sResult=arguments[0];\n    console.log(sResult);//'微软雅黑'\n    sResult=sResult.replace(/\\'/g,'');\n    console.log(sResult);//微软雅黑\n    return sResult;\n})//<span style=\"font-family:微软雅黑;\">demo</span> \n```\n## 最后的小试牛刀\n\n这一节是交给阅读者发挥的内容：\n### 洗扑克\n\n需要将Thisnimoc-JavaScript使用正则替换成 `TJhaivsaNSicmroijpst`\n\n[点此订阅博客](https://github.com/nimoc/blog/issues/15)\n\n若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：[https://github.com/nimoc/blog/issues/2](https://github.com/nimoc/blog/issues/2)\n\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","slug":"js_replace","published":0,"date":"2021-02-27T06:35:41.015Z","updated":"2021-02-27T06:57:38.990Z","_id":"cklndcyno0002pvu880ja1szh","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"深入理解JavaScript-replace\"><a href=\"#深入理解JavaScript-replace\" class=\"headerlink\" title=\"深入理解JavaScript-replace\"></a>深入理解JavaScript-replace</h1><p><a href=\"https://nimoc.io/notice/index.html\"><img src=\"http://nimoc.io/notice/index.svg\" alt=\"nimoc.io\"></a></p>\n<p>replace方法是属于String对象的，可用于替换字符串。</p>\n<h2 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍:\"></a>简单介绍:</h2><p><code>String.replace(searchValue,replaceValue)</code></p>\n<ol>\n<li> String:字符串</li>\n<li> searchValue：字符串或正则表达式</li>\n<li> replaceValue:字符串或者函数<h2 id=\"字符串替换字符串\"><a href=\"#字符串替换字符串\" class=\"headerlink\" title=\"字符串替换字符串\"></a>字符串替换字符串</h2></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;I am loser!&#x27;</span>.replace(<span class=\"string\">&#x27;loser&#x27;</span>,<span class=\"string\">&#x27;hero&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">//I am hero!</span></span><br></pre></td></tr></table></figure>\n\n<p>直接使用字符串能让自己从loser变成hero，但是如果有2个loser就不能一起变成hero了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;I am loser,You are loser&#x27;</span>.replace(<span class=\"string\">&#x27;loser&#x27;</span>,<span class=\"string\">&#x27;hero&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//I am hero,You are loser </span></span><br></pre></td></tr></table></figure>\n<h2 id=\"正则表达式替换为字符串\"><a href=\"#正则表达式替换为字符串\" class=\"headerlink\" title=\"正则表达式替换为字符串\"></a>正则表达式替换为字符串</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;I am loser,You are loser&#x27;</span>.replace(<span class=\"regexp\">/loser/g</span>,<span class=\"string\">&#x27;hero&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">//I am hero,You are hero</span></span><br></pre></td></tr></table></figure>\n\n<p>使用正则表达式，并将正则的global属性改为true则可以让所有loser都变为hero</p>\n<h2 id=\"有趣的替换字符\"><a href=\"#有趣的替换字符\" class=\"headerlink\" title=\"有趣的替换字符\"></a>有趣的替换字符</h2><p><code>replaceValue</code> 可以是字符串。如果字符串中有几个特定字符的话，会被转换为特定字符串。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">字符</th>\n<th align=\"left\">替换文本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">$&amp;</td>\n<td align=\"left\">与正则相匹配的字符串</td>\n</tr>\n<tr>\n<td align=\"left\">$`</td>\n<td align=\"left\">匹配字符串左边的字符</td>\n</tr>\n<tr>\n<td align=\"left\">$’</td>\n<td align=\"left\">匹配字符串右边的字符</td>\n</tr>\n<tr>\n<td align=\"left\">$1,$2,$3,…,$n</td>\n<td align=\"left\">匹配结果中对应的分组匹配结果</td>\n</tr>\n</tbody></table>\n<h3 id=\"使用-amp-字符给匹配字符加大括号\"><a href=\"#使用-amp-字符给匹配字符加大括号\" class=\"headerlink\" title=\"使用$&amp;字符给匹配字符加大括号\"></a>使用$&amp;字符给匹配字符加大括号</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sStr=<span class=\"string\">&#x27;讨论一下正则表达式中的replace的用法&#x27;</span>;</span><br><span class=\"line\">sStr.replace(<span class=\"regexp\">/正则表达式/</span>,<span class=\"string\">&#x27;&#123;$&amp;&#125;&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//讨论一下&#123;正则表达式&#125;中的replace的用法</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-和-’字符替换内容\"><a href=\"#使用-和-’字符替换内容\" class=\"headerlink\" title=\"使用$`和$’字符替换内容\"></a>使用$`和$’字符替换内容</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;abc&#x27;</span>.replace(<span class=\"regexp\">/b/</span>,<span class=\"string\">&quot;$`&quot;</span>);<span class=\"comment\">//aac</span></span><br><span class=\"line\"><span class=\"string\">&#x27;abc&#x27;</span>.replace(<span class=\"regexp\">/b/</span>,<span class=\"string\">&quot;$&#x27;&quot;</span>);<span class=\"comment\">//acc</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用分组匹配组合新的字符串\"><a href=\"#使用分组匹配组合新的字符串\" class=\"headerlink\" title=\"使用分组匹配组合新的字符串\"></a>使用分组匹配组合新的字符串</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;nimoc@126.com&#x27;</span>.replace(<span class=\"regexp\">/(.+)(@)(.*)/</span>,<span class=\"string\">&quot;$2$1&quot;</span>)<span class=\"comment\">//@nimoc</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"replaceValue参数可以是一个函数\"><a href=\"#replaceValue参数可以是一个函数\" class=\"headerlink\" title=\"replaceValue参数可以是一个函数\"></a>replaceValue参数可以是一个函数</h2><p><code>String.replace(searchValue,replaceValue)</code> 中的<strong>replaceValue</strong>可以是一个函数.</p>\n<p>如果replaceValue是一个函数的话那么，这个函数的arguments会有n+3个参数（n为正则匹配到的次数）</p>\n<p><strong>先看例子帮助理解：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logArguments</span>(<span class=\"params\"></span>)</span>&#123;    </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);<span class=\"comment\">//[&quot;nimoc@126.com&quot;, &quot;nimoc&quot;, &quot;@&quot;, &quot;126.com&quot;, 0, &quot;nimoc@126.com&quot;] </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;返回值会替换掉匹配到的目标&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">    <span class=\"string\">&#x27;nimoc@126.com&#x27;</span>.replace(<span class=\"regexp\">/(.+)(@)(.*)/</span>,logArguments)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p><strong>参数分别为</strong></p>\n<ol>\n<li> 匹配到的字符串（此例为<a href=\"mailto:&#110;&#x69;&#109;&#x6f;&#x63;&#64;&#x31;&#x32;&#54;&#x2e;&#x63;&#111;&#109;\">&#110;&#x69;&#109;&#x6f;&#x63;&#64;&#x31;&#x32;&#54;&#x2e;&#x63;&#111;&#109;</a>,推荐修改上面代码的正则来查看匹配到的字符帮助理解)</li>\n<li> 如果正则使用了分组匹配就为多个否则无此参数。（此例的参数就分别为<code>&quot;nimoc&quot;, &quot;@&quot;, &quot;126.com&quot;</code>。推荐修改正则为/nimo/查看控制台中返回的arguments值）</li>\n<li> 匹配字符串的对应索引位置（此例为0）</li>\n<li> 原始字符串(此例为<a href=\"mailto:&#110;&#x69;&#x6d;&#111;&#x63;&#x40;&#x31;&#50;&#x36;&#x2e;&#99;&#111;&#109;\">&#110;&#x69;&#x6d;&#111;&#x63;&#x40;&#x31;&#50;&#x36;&#x2e;&#99;&#111;&#109;</a>)<h3 id=\"使用自定义函数将A-G字符串改为小写\"><a href=\"#使用自定义函数将A-G字符串改为小写\" class=\"headerlink\" title=\"使用自定义函数将A-G字符串改为小写\"></a>使用自定义函数将A-G字符串改为小写</h3></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;JAVASCRIPT&#x27;</span>.replace(<span class=\"regexp\">/[A-G]/g</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>].toLowerCase();</span><br><span class=\"line\">&#125;)<span class=\"comment\">//JaVaScRIPT </span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用自定义函数做回调式替换将行内样式中的单引号删除\"><a href=\"#使用自定义函数做回调式替换将行内样式中的单引号删除\" class=\"headerlink\" title=\"使用自定义函数做回调式替换将行内样式中的单引号删除\"></a>使用自定义函数做回调式替换将行内样式中的单引号删除</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&lt;span style=&quot;font-family:\\&#x27;微软雅黑\\&#x27;;&quot;&gt;;demo&lt;/span&gt;&#x27;</span>.replace(<span class=\"regexp\">/\\&#x27;[^&#x27;]+\\&#x27;/g</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;      </span><br><span class=\"line\">    <span class=\"keyword\">var</span> sResult=<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(sResult);<span class=\"comment\">//&#x27;微软雅黑&#x27;</span></span><br><span class=\"line\">    sResult=sResult.replace(<span class=\"regexp\">/\\&#x27;/g</span>,<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(sResult);<span class=\"comment\">//微软雅黑</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sResult;</span><br><span class=\"line\">&#125;)<span class=\"comment\">//&lt;span style=&quot;font-family:微软雅黑;&quot;&gt;demo&lt;/span&gt; </span></span><br></pre></td></tr></table></figure>\n<h2 id=\"最后的小试牛刀\"><a href=\"#最后的小试牛刀\" class=\"headerlink\" title=\"最后的小试牛刀\"></a>最后的小试牛刀</h2><p>这一节是交给阅读者发挥的内容：</p>\n<h3 id=\"洗扑克\"><a href=\"#洗扑克\" class=\"headerlink\" title=\"洗扑克\"></a>洗扑克</h3><p>需要将Thisnimoc-JavaScript使用正则替换成 <code>TJhaivsaNSicmroijpst</code></p>\n<p><a href=\"https://github.com/nimoc/blog/issues/15\">点此订阅博客</a></p>\n<p>若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：<a href=\"https://github.com/nimoc/blog/issues/2\">https://github.com/nimoc/blog/issues/2</a></p>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"深入理解JavaScript-replace\"><a href=\"#深入理解JavaScript-replace\" class=\"headerlink\" title=\"深入理解JavaScript-replace\"></a>深入理解JavaScript-replace</h1><p><a href=\"https://nimoc.io/notice/index.html\"><img src=\"http://nimoc.io/notice/index.svg\" alt=\"nimoc.io\"></a></p>\n<p>replace方法是属于String对象的，可用于替换字符串。</p>\n<h2 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍:\"></a>简单介绍:</h2><p><code>String.replace(searchValue,replaceValue)</code></p>\n<ol>\n<li> String:字符串</li>\n<li> searchValue：字符串或正则表达式</li>\n<li> replaceValue:字符串或者函数<h2 id=\"字符串替换字符串\"><a href=\"#字符串替换字符串\" class=\"headerlink\" title=\"字符串替换字符串\"></a>字符串替换字符串</h2></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;I am loser!&#x27;</span>.replace(<span class=\"string\">&#x27;loser&#x27;</span>,<span class=\"string\">&#x27;hero&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">//I am hero!</span></span><br></pre></td></tr></table></figure>\n\n<p>直接使用字符串能让自己从loser变成hero，但是如果有2个loser就不能一起变成hero了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;I am loser,You are loser&#x27;</span>.replace(<span class=\"string\">&#x27;loser&#x27;</span>,<span class=\"string\">&#x27;hero&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//I am hero,You are loser </span></span><br></pre></td></tr></table></figure>\n<h2 id=\"正则表达式替换为字符串\"><a href=\"#正则表达式替换为字符串\" class=\"headerlink\" title=\"正则表达式替换为字符串\"></a>正则表达式替换为字符串</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;I am loser,You are loser&#x27;</span>.replace(<span class=\"regexp\">/loser/g</span>,<span class=\"string\">&#x27;hero&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">//I am hero,You are hero</span></span><br></pre></td></tr></table></figure>\n\n<p>使用正则表达式，并将正则的global属性改为true则可以让所有loser都变为hero</p>\n<h2 id=\"有趣的替换字符\"><a href=\"#有趣的替换字符\" class=\"headerlink\" title=\"有趣的替换字符\"></a>有趣的替换字符</h2><p><code>replaceValue</code> 可以是字符串。如果字符串中有几个特定字符的话，会被转换为特定字符串。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">字符</th>\n<th align=\"left\">替换文本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">$&amp;</td>\n<td align=\"left\">与正则相匹配的字符串</td>\n</tr>\n<tr>\n<td align=\"left\">$`</td>\n<td align=\"left\">匹配字符串左边的字符</td>\n</tr>\n<tr>\n<td align=\"left\">$’</td>\n<td align=\"left\">匹配字符串右边的字符</td>\n</tr>\n<tr>\n<td align=\"left\">$1,$2,$3,…,$n</td>\n<td align=\"left\">匹配结果中对应的分组匹配结果</td>\n</tr>\n</tbody></table>\n<h3 id=\"使用-amp-字符给匹配字符加大括号\"><a href=\"#使用-amp-字符给匹配字符加大括号\" class=\"headerlink\" title=\"使用$&amp;字符给匹配字符加大括号\"></a>使用$&amp;字符给匹配字符加大括号</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sStr=<span class=\"string\">&#x27;讨论一下正则表达式中的replace的用法&#x27;</span>;</span><br><span class=\"line\">sStr.replace(<span class=\"regexp\">/正则表达式/</span>,<span class=\"string\">&#x27;&#123;$&amp;&#125;&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//讨论一下&#123;正则表达式&#125;中的replace的用法</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-和-’字符替换内容\"><a href=\"#使用-和-’字符替换内容\" class=\"headerlink\" title=\"使用$`和$’字符替换内容\"></a>使用$`和$’字符替换内容</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;abc&#x27;</span>.replace(<span class=\"regexp\">/b/</span>,<span class=\"string\">&quot;$`&quot;</span>);<span class=\"comment\">//aac</span></span><br><span class=\"line\"><span class=\"string\">&#x27;abc&#x27;</span>.replace(<span class=\"regexp\">/b/</span>,<span class=\"string\">&quot;$&#x27;&quot;</span>);<span class=\"comment\">//acc</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用分组匹配组合新的字符串\"><a href=\"#使用分组匹配组合新的字符串\" class=\"headerlink\" title=\"使用分组匹配组合新的字符串\"></a>使用分组匹配组合新的字符串</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;nimoc@126.com&#x27;</span>.replace(<span class=\"regexp\">/(.+)(@)(.*)/</span>,<span class=\"string\">&quot;$2$1&quot;</span>)<span class=\"comment\">//@nimoc</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"replaceValue参数可以是一个函数\"><a href=\"#replaceValue参数可以是一个函数\" class=\"headerlink\" title=\"replaceValue参数可以是一个函数\"></a>replaceValue参数可以是一个函数</h2><p><code>String.replace(searchValue,replaceValue)</code> 中的<strong>replaceValue</strong>可以是一个函数.</p>\n<p>如果replaceValue是一个函数的话那么，这个函数的arguments会有n+3个参数（n为正则匹配到的次数）</p>\n<p><strong>先看例子帮助理解：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logArguments</span>(<span class=\"params\"></span>)</span>&#123;    </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);<span class=\"comment\">//[&quot;nimoc@126.com&quot;, &quot;nimoc&quot;, &quot;@&quot;, &quot;126.com&quot;, 0, &quot;nimoc@126.com&quot;] </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;返回值会替换掉匹配到的目标&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">    <span class=\"string\">&#x27;nimoc@126.com&#x27;</span>.replace(<span class=\"regexp\">/(.+)(@)(.*)/</span>,logArguments)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p><strong>参数分别为</strong></p>\n<ol>\n<li> 匹配到的字符串（此例为<a href=\"mailto:&#110;&#x69;&#109;&#x6f;&#x63;&#64;&#x31;&#x32;&#54;&#x2e;&#x63;&#111;&#109;\">&#110;&#x69;&#109;&#x6f;&#x63;&#64;&#x31;&#x32;&#54;&#x2e;&#x63;&#111;&#109;</a>,推荐修改上面代码的正则来查看匹配到的字符帮助理解)</li>\n<li> 如果正则使用了分组匹配就为多个否则无此参数。（此例的参数就分别为<code>&quot;nimoc&quot;, &quot;@&quot;, &quot;126.com&quot;</code>。推荐修改正则为/nimo/查看控制台中返回的arguments值）</li>\n<li> 匹配字符串的对应索引位置（此例为0）</li>\n<li> 原始字符串(此例为<a href=\"mailto:&#110;&#x69;&#x6d;&#111;&#x63;&#x40;&#x31;&#50;&#x36;&#x2e;&#99;&#111;&#109;\">&#110;&#x69;&#x6d;&#111;&#x63;&#x40;&#x31;&#50;&#x36;&#x2e;&#99;&#111;&#109;</a>)<h3 id=\"使用自定义函数将A-G字符串改为小写\"><a href=\"#使用自定义函数将A-G字符串改为小写\" class=\"headerlink\" title=\"使用自定义函数将A-G字符串改为小写\"></a>使用自定义函数将A-G字符串改为小写</h3></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;JAVASCRIPT&#x27;</span>.replace(<span class=\"regexp\">/[A-G]/g</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>].toLowerCase();</span><br><span class=\"line\">&#125;)<span class=\"comment\">//JaVaScRIPT </span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用自定义函数做回调式替换将行内样式中的单引号删除\"><a href=\"#使用自定义函数做回调式替换将行内样式中的单引号删除\" class=\"headerlink\" title=\"使用自定义函数做回调式替换将行内样式中的单引号删除\"></a>使用自定义函数做回调式替换将行内样式中的单引号删除</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&lt;span style=&quot;font-family:\\&#x27;微软雅黑\\&#x27;;&quot;&gt;;demo&lt;/span&gt;&#x27;</span>.replace(<span class=\"regexp\">/\\&#x27;[^&#x27;]+\\&#x27;/g</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;      </span><br><span class=\"line\">    <span class=\"keyword\">var</span> sResult=<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(sResult);<span class=\"comment\">//&#x27;微软雅黑&#x27;</span></span><br><span class=\"line\">    sResult=sResult.replace(<span class=\"regexp\">/\\&#x27;/g</span>,<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(sResult);<span class=\"comment\">//微软雅黑</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sResult;</span><br><span class=\"line\">&#125;)<span class=\"comment\">//&lt;span style=&quot;font-family:微软雅黑;&quot;&gt;demo&lt;/span&gt; </span></span><br></pre></td></tr></table></figure>\n<h2 id=\"最后的小试牛刀\"><a href=\"#最后的小试牛刀\" class=\"headerlink\" title=\"最后的小试牛刀\"></a>最后的小试牛刀</h2><p>这一节是交给阅读者发挥的内容：</p>\n<h3 id=\"洗扑克\"><a href=\"#洗扑克\" class=\"headerlink\" title=\"洗扑克\"></a>洗扑克</h3><p>需要将Thisnimoc-JavaScript使用正则替换成 <code>TJhaivsaNSicmroijpst</code></p>\n<p><a href=\"https://github.com/nimoc/blog/issues/15\">点此订阅博客</a></p>\n<p>若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：<a href=\"https://github.com/nimoc/blog/issues/2\">https://github.com/nimoc/blog/issues/2</a></p>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>"},{"_content":"# github订阅\n\n<img src=\"https://cloud.githubusercontent.com/assets/3949015/6850719/bf6f642e-d415-11e4-8096-157ed60f3c3b.png\" width=\"300\">\n\n## 订阅\n\n点击本页面右上角的 [Watch](https://github.com/nimoc/blog/subscription)  在弹出框中点击 `Watching` 订阅本博客，这样本博客的所有文章更新和评论都会在github首页出现。\n![image](https://cloud.githubusercontent.com/assets/3949015/6850925/f12bc470-d416-11e4-9a09-ec3f59041a00.png)\n### 收藏\n\n点击 `Star` 收藏本博客，以便在 [stars](https://github.com/stars) 中找到本博客。\n\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","source":"_drafts/watch.md","raw":"# github订阅\n\n<img src=\"https://cloud.githubusercontent.com/assets/3949015/6850719/bf6f642e-d415-11e4-8096-157ed60f3c3b.png\" width=\"300\">\n\n## 订阅\n\n点击本页面右上角的 [Watch](https://github.com/nimoc/blog/subscription)  在弹出框中点击 `Watching` 订阅本博客，这样本博客的所有文章更新和评论都会在github首页出现。\n![image](https://cloud.githubusercontent.com/assets/3949015/6850925/f12bc470-d416-11e4-9a09-ec3f59041a00.png)\n### 收藏\n\n点击 `Star` 收藏本博客，以便在 [stars](https://github.com/stars) 中找到本博客。\n\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","slug":"watch","published":0,"date":"2021-02-27T06:35:41.905Z","updated":"2021-02-27T06:35:41.905Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklndcynp0003pvu8efro3v3w","content":"<h1 id=\"github订阅\"><a href=\"#github订阅\" class=\"headerlink\" title=\"github订阅\"></a>github订阅</h1><img src=\"https://cloud.githubusercontent.com/assets/3949015/6850719/bf6f642e-d415-11e4-8096-157ed60f3c3b.png\" width=\"300\">\n\n<h2 id=\"订阅\"><a href=\"#订阅\" class=\"headerlink\" title=\"订阅\"></a>订阅</h2><p>点击本页面右上角的 <a href=\"https://github.com/nimoc/blog/subscription\">Watch</a>  在弹出框中点击 <code>Watching</code> 订阅本博客，这样本博客的所有文章更新和评论都会在github首页出现。<br><img src=\"https://cloud.githubusercontent.com/assets/3949015/6850925/f12bc470-d416-11e4-9a09-ec3f59041a00.png\" alt=\"image\"></p>\n<h3 id=\"收藏\"><a href=\"#收藏\" class=\"headerlink\" title=\"收藏\"></a>收藏</h3><p>点击 <code>Star</code> 收藏本博客，以便在 <a href=\"https://github.com/stars\">stars</a> 中找到本博客。</p>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"github订阅\"><a href=\"#github订阅\" class=\"headerlink\" title=\"github订阅\"></a>github订阅</h1><img src=\"https://cloud.githubusercontent.com/assets/3949015/6850719/bf6f642e-d415-11e4-8096-157ed60f3c3b.png\" width=\"300\">\n\n<h2 id=\"订阅\"><a href=\"#订阅\" class=\"headerlink\" title=\"订阅\"></a>订阅</h2><p>点击本页面右上角的 <a href=\"https://github.com/nimoc/blog/subscription\">Watch</a>  在弹出框中点击 <code>Watching</code> 订阅本博客，这样本博客的所有文章更新和评论都会在github首页出现。<br><img src=\"https://cloud.githubusercontent.com/assets/3949015/6850925/f12bc470-d416-11e4-9a09-ec3f59041a00.png\" alt=\"image\"></p>\n<h3 id=\"收藏\"><a href=\"#收藏\" class=\"headerlink\" title=\"收藏\"></a>收藏</h3><p>点击 <code>Star</code> 收藏本博客，以便在 <a href=\"https://github.com/stars\">stars</a> 中找到本博客。</p>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>"},{"_content":"## 微信小程序广告对接指导手册\n\n[![nimoc.io](http://nimoc.io/notice/index.svg)](https://nimoc.io/notice/index.html)\n\n友情链接: [fucking-weapp](https://github.com/onface/fucking-weapp)\n\n## 业务场景\n\n因公司业务需求，需要**在微信小程序中插入广告**。点击广告后跳转至广告客户的小程序中，或展示广告客户的信息。\n\n或者需要推广自己公司的微信小程序，需要支付其他公司广告费用，其他公司通过各种方式**引导普通用户进入微信小程序**。\n\n## 支持的对接方式\n\n### 流量方\n\n1. 跳转其他小程序\n2. 跳转APP\n3. 打开网页\n\n### 广告主\n\n1. 普通链接\n2. 公众号推文\n3. APP直接打开小程序\n4. 公众/服务号菜单\n\n\n> 流量方指的是在自己的小程序中加入客户的广告收取广告费用的公司\n\n> 广告主指的是支付广告费用给其他公司，其他公司通过各种方式引导普通用户进入自己的小程序\n\n## 流量方\n\n### 跳转其他小程序\n\n#### 商务\n\n跳转其他小程序需要客户提供他的小程序 `app-id` 小程序路径和 `extra-data`, `extra-data` 一般作为统计不同流量方的标识。（推广ID）\n\n并在自己的小程序管理后台关联客户的 `app-id`\n\n跳转有两种方式：\n\n1. 进入自己的小程序后直接跳转到其他小程序\n2. 点击按钮跳转到其他小程序\n\n> 目前可以打开自己的小程序直接跳转到客户的小程序，但是这个功能后续会被微信禁用。\n\n\n#### 技术实现\n\n##### 直接跳转\n\n> 此接口即将废弃，请使用 `<navigator>` 组件来使用此功能\n\n```js\nwx.navigateToMiniProgram({\n  appId: '',\n  path: '',\n  extraData: {\n    channel_id: '客户提供的流量方标识'\n  },\n  success(res) {\n    // 打开成功\n  }\n})\n```\n\n[wx.navigateToMiniProgram](https://developers.weixin.qq.com/miniprogram/dev/api/navigateToMiniProgram.html)\n\n##### 点击按钮跳转\n\n```html\n<navigator\n    target=\"miniProgram\"\n    open-type=\"navigate\"\n    app-id=\"小程序APPID\"\n    path=\"小程序路径\"\n    extra-data=\"\"\n    version=\"release\"\n    >跳转其他小程序</navigator>\n```\n[navigator](https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html)\n\n\n### 跳转 APP\n\n#### 商务\n\n跳转 APP 必须通过用户主动点击按钮才能跳转。\n\n与客户的技术对接时请将这个链接发送给客户 https://developers.weixin.qq.com/miniprogram/dev/api/launchApp.html 需要客户的技术人员接入微信 OpenSDK。\n\n#### 技术实现\n\n可尝试在 `app-parameter` 中传递用于统计的流量方标识\n\n```html\n<button open-type=\"launchApp\" app-parameter=\"wechat\" binderror=\"launchAppError\">打开APP</button>\n```\n\n```js\nPage({\n    launchAppError: function(e) {\n        console.log(e.detail.errMsg)\n    }\n})\n```\n\n[launchApp](https://developers.weixin.qq.com/miniprogram/dev/api/launchApp.html)\n\n### 打开网页\n\n微信小程序官方提供了打开网页的功能，但是只能打开绑定此小程序的域名。\n\n\n每个小程序只能绑定20个业务域名，业务域名也就是客户的网址。绑定业务域名时需要在微信小程序管理后台下载验证文件，交给广告客户上传到客户的服务器。（客户在安全性和便利性上不一定会愿意），上传成功后即可在小程序中打开客户的网站。但客户的网站中不可以跳转到其他不在业务域名的网站。\n\n> 注意：业务域名一年只能修改50次。所以建议寻找稳定的广告客户。小客户经常更换的不建议合作。\n\n[web-view](https://developers.weixin.qq.com/miniprogram/dev/component/web-view.html)\n\n\n## 广告主\n\n### 普通链接\n\n找设计人员设计页面，比如：\n\n![](http://effect.admpv.com/turntable/index.png)\n\n然后由技术人员上传到服务器，给商务人员一个在线访问地址。商务将地址给客户。客户引导用户进入页面识别二维码进入微信小程序。\n\n#### 技术实现\n\n通过微信小程序后台 **设置>开发设置>扫普通链接二维码打开小程序** 可以生成二维码，二维码可以加上唯一标识，统计不同流量的访问情况。\n\n\n### 公众号推文\n\n#### 阅读原文\n\n与普通链接一致，向技术索取链接地址\n\n#### 小程序\n\n微信推文中可插入小程序卡片，点击卡片可直接打开微信小程序。技术需要向商务提供 AppID,路径(path) ，路径上应该带上统计id。\n\n##### 流量方操作流程\n\n1. 流量方时需要在微信小程序管理后台管理关联我们的小程序（我们需要提供小程序 AppID）\n2. 关联后需要我们自己在微信小程序管理后台同意关联\n3. 创建推文时选择小程序>插入小程序卡片\n\n### APP直接打开小程序\n\n\n移动应用拉起小程序是指用户可以通过接入该功能的第三方移动应用（APP）跳转至某一微信小程序的指定页面，完成服务后跳回至原移动应用（APP）。\n\n##### 流量方操作流程\n\n[移动应用拉起小程序功能](https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=21526646385rK1Bs&token=&lang=zh_CN)\n\n**需要在微信开放平台创建应用后才能实现APP打开小程序 [创建应用](https://open.weixin.qq.com/cgi-bin/frame?t=home/app_tmpl&lang=zh_CN)**\n\n[Android开发示例](https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=21526646437Y6nEC&token=&lang=zh_CN)\n\n[iOS开发示例](https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=21526646447MMfXU&token=&lang=zh_CN)\n\n### 公众/服务号菜单\n\n#### 流量方操作流程\n\n登录微信公众号/服务号后台，选择左侧导航自定义菜单。选择对应菜单，菜单内容选择跳转小程序。\n\n未出现我们小程序的，需要关联我们的小程序。我们需要提供 AppID 给流量方关联后需要我们在后台确定绑定。\n\n\n若作者显示不是Nimo （被转载了），请访问Github原文进行讨论：https://github.com/nimoc/blog/issues/31\n\n\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"31\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","source":"_drafts/weapp_ad_jump.md","raw":"## 微信小程序广告对接指导手册\n\n[![nimoc.io](http://nimoc.io/notice/index.svg)](https://nimoc.io/notice/index.html)\n\n友情链接: [fucking-weapp](https://github.com/onface/fucking-weapp)\n\n## 业务场景\n\n因公司业务需求，需要**在微信小程序中插入广告**。点击广告后跳转至广告客户的小程序中，或展示广告客户的信息。\n\n或者需要推广自己公司的微信小程序，需要支付其他公司广告费用，其他公司通过各种方式**引导普通用户进入微信小程序**。\n\n## 支持的对接方式\n\n### 流量方\n\n1. 跳转其他小程序\n2. 跳转APP\n3. 打开网页\n\n### 广告主\n\n1. 普通链接\n2. 公众号推文\n3. APP直接打开小程序\n4. 公众/服务号菜单\n\n\n> 流量方指的是在自己的小程序中加入客户的广告收取广告费用的公司\n\n> 广告主指的是支付广告费用给其他公司，其他公司通过各种方式引导普通用户进入自己的小程序\n\n## 流量方\n\n### 跳转其他小程序\n\n#### 商务\n\n跳转其他小程序需要客户提供他的小程序 `app-id` 小程序路径和 `extra-data`, `extra-data` 一般作为统计不同流量方的标识。（推广ID）\n\n并在自己的小程序管理后台关联客户的 `app-id`\n\n跳转有两种方式：\n\n1. 进入自己的小程序后直接跳转到其他小程序\n2. 点击按钮跳转到其他小程序\n\n> 目前可以打开自己的小程序直接跳转到客户的小程序，但是这个功能后续会被微信禁用。\n\n\n#### 技术实现\n\n##### 直接跳转\n\n> 此接口即将废弃，请使用 `<navigator>` 组件来使用此功能\n\n```js\nwx.navigateToMiniProgram({\n  appId: '',\n  path: '',\n  extraData: {\n    channel_id: '客户提供的流量方标识'\n  },\n  success(res) {\n    // 打开成功\n  }\n})\n```\n\n[wx.navigateToMiniProgram](https://developers.weixin.qq.com/miniprogram/dev/api/navigateToMiniProgram.html)\n\n##### 点击按钮跳转\n\n```html\n<navigator\n    target=\"miniProgram\"\n    open-type=\"navigate\"\n    app-id=\"小程序APPID\"\n    path=\"小程序路径\"\n    extra-data=\"\"\n    version=\"release\"\n    >跳转其他小程序</navigator>\n```\n[navigator](https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html)\n\n\n### 跳转 APP\n\n#### 商务\n\n跳转 APP 必须通过用户主动点击按钮才能跳转。\n\n与客户的技术对接时请将这个链接发送给客户 https://developers.weixin.qq.com/miniprogram/dev/api/launchApp.html 需要客户的技术人员接入微信 OpenSDK。\n\n#### 技术实现\n\n可尝试在 `app-parameter` 中传递用于统计的流量方标识\n\n```html\n<button open-type=\"launchApp\" app-parameter=\"wechat\" binderror=\"launchAppError\">打开APP</button>\n```\n\n```js\nPage({\n    launchAppError: function(e) {\n        console.log(e.detail.errMsg)\n    }\n})\n```\n\n[launchApp](https://developers.weixin.qq.com/miniprogram/dev/api/launchApp.html)\n\n### 打开网页\n\n微信小程序官方提供了打开网页的功能，但是只能打开绑定此小程序的域名。\n\n\n每个小程序只能绑定20个业务域名，业务域名也就是客户的网址。绑定业务域名时需要在微信小程序管理后台下载验证文件，交给广告客户上传到客户的服务器。（客户在安全性和便利性上不一定会愿意），上传成功后即可在小程序中打开客户的网站。但客户的网站中不可以跳转到其他不在业务域名的网站。\n\n> 注意：业务域名一年只能修改50次。所以建议寻找稳定的广告客户。小客户经常更换的不建议合作。\n\n[web-view](https://developers.weixin.qq.com/miniprogram/dev/component/web-view.html)\n\n\n## 广告主\n\n### 普通链接\n\n找设计人员设计页面，比如：\n\n![](http://effect.admpv.com/turntable/index.png)\n\n然后由技术人员上传到服务器，给商务人员一个在线访问地址。商务将地址给客户。客户引导用户进入页面识别二维码进入微信小程序。\n\n#### 技术实现\n\n通过微信小程序后台 **设置>开发设置>扫普通链接二维码打开小程序** 可以生成二维码，二维码可以加上唯一标识，统计不同流量的访问情况。\n\n\n### 公众号推文\n\n#### 阅读原文\n\n与普通链接一致，向技术索取链接地址\n\n#### 小程序\n\n微信推文中可插入小程序卡片，点击卡片可直接打开微信小程序。技术需要向商务提供 AppID,路径(path) ，路径上应该带上统计id。\n\n##### 流量方操作流程\n\n1. 流量方时需要在微信小程序管理后台管理关联我们的小程序（我们需要提供小程序 AppID）\n2. 关联后需要我们自己在微信小程序管理后台同意关联\n3. 创建推文时选择小程序>插入小程序卡片\n\n### APP直接打开小程序\n\n\n移动应用拉起小程序是指用户可以通过接入该功能的第三方移动应用（APP）跳转至某一微信小程序的指定页面，完成服务后跳回至原移动应用（APP）。\n\n##### 流量方操作流程\n\n[移动应用拉起小程序功能](https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=21526646385rK1Bs&token=&lang=zh_CN)\n\n**需要在微信开放平台创建应用后才能实现APP打开小程序 [创建应用](https://open.weixin.qq.com/cgi-bin/frame?t=home/app_tmpl&lang=zh_CN)**\n\n[Android开发示例](https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=21526646437Y6nEC&token=&lang=zh_CN)\n\n[iOS开发示例](https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=21526646447MMfXU&token=&lang=zh_CN)\n\n### 公众/服务号菜单\n\n#### 流量方操作流程\n\n登录微信公众号/服务号后台，选择左侧导航自定义菜单。选择对应菜单，菜单内容选择跳转小程序。\n\n未出现我们小程序的，需要关联我们的小程序。我们需要提供 AppID 给流量方关联后需要我们在后台确定绑定。\n\n\n若作者显示不是Nimo （被转载了），请访问Github原文进行讨论：https://github.com/nimoc/blog/issues/31\n\n\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"31\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","slug":"weapp_ad_jump","published":0,"date":"2021-02-27T06:35:41.905Z","updated":"2021-02-27T06:57:38.991Z","_id":"cklndcynr0004pvu8gygddx1g","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"微信小程序广告对接指导手册\"><a href=\"#微信小程序广告对接指导手册\" class=\"headerlink\" title=\"微信小程序广告对接指导手册\"></a>微信小程序广告对接指导手册</h2><p><a href=\"https://nimoc.io/notice/index.html\"><img src=\"http://nimoc.io/notice/index.svg\" alt=\"nimoc.io\"></a></p>\n<p>友情链接: <a href=\"https://github.com/onface/fucking-weapp\">fucking-weapp</a></p>\n<h2 id=\"业务场景\"><a href=\"#业务场景\" class=\"headerlink\" title=\"业务场景\"></a>业务场景</h2><p>因公司业务需求，需要<strong>在微信小程序中插入广告</strong>。点击广告后跳转至广告客户的小程序中，或展示广告客户的信息。</p>\n<p>或者需要推广自己公司的微信小程序，需要支付其他公司广告费用，其他公司通过各种方式<strong>引导普通用户进入微信小程序</strong>。</p>\n<h2 id=\"支持的对接方式\"><a href=\"#支持的对接方式\" class=\"headerlink\" title=\"支持的对接方式\"></a>支持的对接方式</h2><h3 id=\"流量方\"><a href=\"#流量方\" class=\"headerlink\" title=\"流量方\"></a>流量方</h3><ol>\n<li>跳转其他小程序</li>\n<li>跳转APP</li>\n<li>打开网页</li>\n</ol>\n<h3 id=\"广告主\"><a href=\"#广告主\" class=\"headerlink\" title=\"广告主\"></a>广告主</h3><ol>\n<li>普通链接</li>\n<li>公众号推文</li>\n<li>APP直接打开小程序</li>\n<li>公众/服务号菜单</li>\n</ol>\n<blockquote>\n<p>流量方指的是在自己的小程序中加入客户的广告收取广告费用的公司</p>\n</blockquote>\n<blockquote>\n<p>广告主指的是支付广告费用给其他公司，其他公司通过各种方式引导普通用户进入自己的小程序</p>\n</blockquote>\n<h2 id=\"流量方-1\"><a href=\"#流量方-1\" class=\"headerlink\" title=\"流量方\"></a>流量方</h2><h3 id=\"跳转其他小程序\"><a href=\"#跳转其他小程序\" class=\"headerlink\" title=\"跳转其他小程序\"></a>跳转其他小程序</h3><h4 id=\"商务\"><a href=\"#商务\" class=\"headerlink\" title=\"商务\"></a>商务</h4><p>跳转其他小程序需要客户提供他的小程序 <code>app-id</code> 小程序路径和 <code>extra-data</code>, <code>extra-data</code> 一般作为统计不同流量方的标识。（推广ID）</p>\n<p>并在自己的小程序管理后台关联客户的 <code>app-id</code></p>\n<p>跳转有两种方式：</p>\n<ol>\n<li>进入自己的小程序后直接跳转到其他小程序</li>\n<li>点击按钮跳转到其他小程序</li>\n</ol>\n<blockquote>\n<p>目前可以打开自己的小程序直接跳转到客户的小程序，但是这个功能后续会被微信禁用。</p>\n</blockquote>\n<h4 id=\"技术实现\"><a href=\"#技术实现\" class=\"headerlink\" title=\"技术实现\"></a>技术实现</h4><h5 id=\"直接跳转\"><a href=\"#直接跳转\" class=\"headerlink\" title=\"直接跳转\"></a>直接跳转</h5><blockquote>\n<p>此接口即将废弃，请使用 <code>&lt;navigator&gt;</code> 组件来使用此功能</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.navigateToMiniProgram(&#123;</span><br><span class=\"line\">  appId: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  path: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  extraData: &#123;</span><br><span class=\"line\">    channel_id: <span class=\"string\">&#x27;客户提供的流量方标识&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">success</span>(<span class=\"params\">res</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打开成功</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/navigateToMiniProgram.html\">wx.navigateToMiniProgram</a></p>\n<h5 id=\"点击按钮跳转\"><a href=\"#点击按钮跳转\" class=\"headerlink\" title=\"点击按钮跳转\"></a>点击按钮跳转</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;navigator</span><br><span class=\"line\">    target=&quot;miniProgram&quot;</span><br><span class=\"line\">    open-type=&quot;navigate&quot;</span><br><span class=\"line\">    app-id=&quot;小程序APPID&quot;</span><br><span class=\"line\">    path=&quot;小程序路径&quot;</span><br><span class=\"line\">    extra-data=&quot;&quot;</span><br><span class=\"line\">    version=&quot;release&quot;</span><br><span class=\"line\">    &gt;跳转其他小程序<span class=\"tag\">&lt;/<span class=\"name\">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html\">navigator</a></p>\n<h3 id=\"跳转-APP\"><a href=\"#跳转-APP\" class=\"headerlink\" title=\"跳转 APP\"></a>跳转 APP</h3><h4 id=\"商务-1\"><a href=\"#商务-1\" class=\"headerlink\" title=\"商务\"></a>商务</h4><p>跳转 APP 必须通过用户主动点击按钮才能跳转。</p>\n<p>与客户的技术对接时请将这个链接发送给客户 <a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/launchApp.html\">https://developers.weixin.qq.com/miniprogram/dev/api/launchApp.html</a> 需要客户的技术人员接入微信 OpenSDK。</p>\n<h4 id=\"技术实现-1\"><a href=\"#技术实现-1\" class=\"headerlink\" title=\"技术实现\"></a>技术实现</h4><p>可尝试在 <code>app-parameter</code> 中传递用于统计的流量方标识</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">open-type</span>=<span class=\"string\">&quot;launchApp&quot;</span> <span class=\"attr\">app-parameter</span>=<span class=\"string\">&quot;wechat&quot;</span> <span class=\"attr\">binderror</span>=<span class=\"string\">&quot;launchAppError&quot;</span>&gt;</span>打开APP<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Page(&#123;</span><br><span class=\"line\">    launchAppError: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(e.detail.errMsg)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/launchApp.html\">launchApp</a></p>\n<h3 id=\"打开网页\"><a href=\"#打开网页\" class=\"headerlink\" title=\"打开网页\"></a>打开网页</h3><p>微信小程序官方提供了打开网页的功能，但是只能打开绑定此小程序的域名。</p>\n<p>每个小程序只能绑定20个业务域名，业务域名也就是客户的网址。绑定业务域名时需要在微信小程序管理后台下载验证文件，交给广告客户上传到客户的服务器。（客户在安全性和便利性上不一定会愿意），上传成功后即可在小程序中打开客户的网站。但客户的网站中不可以跳转到其他不在业务域名的网站。</p>\n<blockquote>\n<p>注意：业务域名一年只能修改50次。所以建议寻找稳定的广告客户。小客户经常更换的不建议合作。</p>\n</blockquote>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/web-view.html\">web-view</a></p>\n<h2 id=\"广告主-1\"><a href=\"#广告主-1\" class=\"headerlink\" title=\"广告主\"></a>广告主</h2><h3 id=\"普通链接\"><a href=\"#普通链接\" class=\"headerlink\" title=\"普通链接\"></a>普通链接</h3><p>找设计人员设计页面，比如：</p>\n<p><img src=\"http://effect.admpv.com/turntable/index.png\"></p>\n<p>然后由技术人员上传到服务器，给商务人员一个在线访问地址。商务将地址给客户。客户引导用户进入页面识别二维码进入微信小程序。</p>\n<h4 id=\"技术实现-2\"><a href=\"#技术实现-2\" class=\"headerlink\" title=\"技术实现\"></a>技术实现</h4><p>通过微信小程序后台 <strong>设置&gt;开发设置&gt;扫普通链接二维码打开小程序</strong> 可以生成二维码，二维码可以加上唯一标识，统计不同流量的访问情况。</p>\n<h3 id=\"公众号推文\"><a href=\"#公众号推文\" class=\"headerlink\" title=\"公众号推文\"></a>公众号推文</h3><h4 id=\"阅读原文\"><a href=\"#阅读原文\" class=\"headerlink\" title=\"阅读原文\"></a>阅读原文</h4><p>与普通链接一致，向技术索取链接地址</p>\n<h4 id=\"小程序\"><a href=\"#小程序\" class=\"headerlink\" title=\"小程序\"></a>小程序</h4><p>微信推文中可插入小程序卡片，点击卡片可直接打开微信小程序。技术需要向商务提供 AppID,路径(path) ，路径上应该带上统计id。</p>\n<h5 id=\"流量方操作流程\"><a href=\"#流量方操作流程\" class=\"headerlink\" title=\"流量方操作流程\"></a>流量方操作流程</h5><ol>\n<li>流量方时需要在微信小程序管理后台管理关联我们的小程序（我们需要提供小程序 AppID）</li>\n<li>关联后需要我们自己在微信小程序管理后台同意关联</li>\n<li>创建推文时选择小程序&gt;插入小程序卡片</li>\n</ol>\n<h3 id=\"APP直接打开小程序\"><a href=\"#APP直接打开小程序\" class=\"headerlink\" title=\"APP直接打开小程序\"></a>APP直接打开小程序</h3><p>移动应用拉起小程序是指用户可以通过接入该功能的第三方移动应用（APP）跳转至某一微信小程序的指定页面，完成服务后跳回至原移动应用（APP）。</p>\n<h5 id=\"流量方操作流程-1\"><a href=\"#流量方操作流程-1\" class=\"headerlink\" title=\"流量方操作流程\"></a>流量方操作流程</h5><p><a href=\"https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=21526646385rK1Bs&token=&lang=zh_CN\">移动应用拉起小程序功能</a></p>\n<p><strong>需要在微信开放平台创建应用后才能实现APP打开小程序 <a href=\"https://open.weixin.qq.com/cgi-bin/frame?t=home/app_tmpl&lang=zh_CN\">创建应用</a></strong></p>\n<p><a href=\"https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=21526646437Y6nEC&token=&lang=zh_CN\">Android开发示例</a></p>\n<p><a href=\"https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=21526646447MMfXU&token=&lang=zh_CN\">iOS开发示例</a></p>\n<h3 id=\"公众-服务号菜单\"><a href=\"#公众-服务号菜单\" class=\"headerlink\" title=\"公众/服务号菜单\"></a>公众/服务号菜单</h3><h4 id=\"流量方操作流程-2\"><a href=\"#流量方操作流程-2\" class=\"headerlink\" title=\"流量方操作流程\"></a>流量方操作流程</h4><p>登录微信公众号/服务号后台，选择左侧导航自定义菜单。选择对应菜单，菜单内容选择跳转小程序。</p>\n<p>未出现我们小程序的，需要关联我们的小程序。我们需要提供 AppID 给流量方关联后需要我们在后台确定绑定。</p>\n<p>若作者显示不是Nimo （被转载了），请访问Github原文进行讨论：<a href=\"https://github.com/nimoc/blog/issues/31\">https://github.com/nimoc/blog/issues/31</a></p>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"31\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"微信小程序广告对接指导手册\"><a href=\"#微信小程序广告对接指导手册\" class=\"headerlink\" title=\"微信小程序广告对接指导手册\"></a>微信小程序广告对接指导手册</h2><p><a href=\"https://nimoc.io/notice/index.html\"><img src=\"http://nimoc.io/notice/index.svg\" alt=\"nimoc.io\"></a></p>\n<p>友情链接: <a href=\"https://github.com/onface/fucking-weapp\">fucking-weapp</a></p>\n<h2 id=\"业务场景\"><a href=\"#业务场景\" class=\"headerlink\" title=\"业务场景\"></a>业务场景</h2><p>因公司业务需求，需要<strong>在微信小程序中插入广告</strong>。点击广告后跳转至广告客户的小程序中，或展示广告客户的信息。</p>\n<p>或者需要推广自己公司的微信小程序，需要支付其他公司广告费用，其他公司通过各种方式<strong>引导普通用户进入微信小程序</strong>。</p>\n<h2 id=\"支持的对接方式\"><a href=\"#支持的对接方式\" class=\"headerlink\" title=\"支持的对接方式\"></a>支持的对接方式</h2><h3 id=\"流量方\"><a href=\"#流量方\" class=\"headerlink\" title=\"流量方\"></a>流量方</h3><ol>\n<li>跳转其他小程序</li>\n<li>跳转APP</li>\n<li>打开网页</li>\n</ol>\n<h3 id=\"广告主\"><a href=\"#广告主\" class=\"headerlink\" title=\"广告主\"></a>广告主</h3><ol>\n<li>普通链接</li>\n<li>公众号推文</li>\n<li>APP直接打开小程序</li>\n<li>公众/服务号菜单</li>\n</ol>\n<blockquote>\n<p>流量方指的是在自己的小程序中加入客户的广告收取广告费用的公司</p>\n</blockquote>\n<blockquote>\n<p>广告主指的是支付广告费用给其他公司，其他公司通过各种方式引导普通用户进入自己的小程序</p>\n</blockquote>\n<h2 id=\"流量方-1\"><a href=\"#流量方-1\" class=\"headerlink\" title=\"流量方\"></a>流量方</h2><h3 id=\"跳转其他小程序\"><a href=\"#跳转其他小程序\" class=\"headerlink\" title=\"跳转其他小程序\"></a>跳转其他小程序</h3><h4 id=\"商务\"><a href=\"#商务\" class=\"headerlink\" title=\"商务\"></a>商务</h4><p>跳转其他小程序需要客户提供他的小程序 <code>app-id</code> 小程序路径和 <code>extra-data</code>, <code>extra-data</code> 一般作为统计不同流量方的标识。（推广ID）</p>\n<p>并在自己的小程序管理后台关联客户的 <code>app-id</code></p>\n<p>跳转有两种方式：</p>\n<ol>\n<li>进入自己的小程序后直接跳转到其他小程序</li>\n<li>点击按钮跳转到其他小程序</li>\n</ol>\n<blockquote>\n<p>目前可以打开自己的小程序直接跳转到客户的小程序，但是这个功能后续会被微信禁用。</p>\n</blockquote>\n<h4 id=\"技术实现\"><a href=\"#技术实现\" class=\"headerlink\" title=\"技术实现\"></a>技术实现</h4><h5 id=\"直接跳转\"><a href=\"#直接跳转\" class=\"headerlink\" title=\"直接跳转\"></a>直接跳转</h5><blockquote>\n<p>此接口即将废弃，请使用 <code>&lt;navigator&gt;</code> 组件来使用此功能</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.navigateToMiniProgram(&#123;</span><br><span class=\"line\">  appId: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  path: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  extraData: &#123;</span><br><span class=\"line\">    channel_id: <span class=\"string\">&#x27;客户提供的流量方标识&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">success</span>(<span class=\"params\">res</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打开成功</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/navigateToMiniProgram.html\">wx.navigateToMiniProgram</a></p>\n<h5 id=\"点击按钮跳转\"><a href=\"#点击按钮跳转\" class=\"headerlink\" title=\"点击按钮跳转\"></a>点击按钮跳转</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;navigator</span><br><span class=\"line\">    target=&quot;miniProgram&quot;</span><br><span class=\"line\">    open-type=&quot;navigate&quot;</span><br><span class=\"line\">    app-id=&quot;小程序APPID&quot;</span><br><span class=\"line\">    path=&quot;小程序路径&quot;</span><br><span class=\"line\">    extra-data=&quot;&quot;</span><br><span class=\"line\">    version=&quot;release&quot;</span><br><span class=\"line\">    &gt;跳转其他小程序<span class=\"tag\">&lt;/<span class=\"name\">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html\">navigator</a></p>\n<h3 id=\"跳转-APP\"><a href=\"#跳转-APP\" class=\"headerlink\" title=\"跳转 APP\"></a>跳转 APP</h3><h4 id=\"商务-1\"><a href=\"#商务-1\" class=\"headerlink\" title=\"商务\"></a>商务</h4><p>跳转 APP 必须通过用户主动点击按钮才能跳转。</p>\n<p>与客户的技术对接时请将这个链接发送给客户 <a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/launchApp.html\">https://developers.weixin.qq.com/miniprogram/dev/api/launchApp.html</a> 需要客户的技术人员接入微信 OpenSDK。</p>\n<h4 id=\"技术实现-1\"><a href=\"#技术实现-1\" class=\"headerlink\" title=\"技术实现\"></a>技术实现</h4><p>可尝试在 <code>app-parameter</code> 中传递用于统计的流量方标识</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">open-type</span>=<span class=\"string\">&quot;launchApp&quot;</span> <span class=\"attr\">app-parameter</span>=<span class=\"string\">&quot;wechat&quot;</span> <span class=\"attr\">binderror</span>=<span class=\"string\">&quot;launchAppError&quot;</span>&gt;</span>打开APP<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Page(&#123;</span><br><span class=\"line\">    launchAppError: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(e.detail.errMsg)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/launchApp.html\">launchApp</a></p>\n<h3 id=\"打开网页\"><a href=\"#打开网页\" class=\"headerlink\" title=\"打开网页\"></a>打开网页</h3><p>微信小程序官方提供了打开网页的功能，但是只能打开绑定此小程序的域名。</p>\n<p>每个小程序只能绑定20个业务域名，业务域名也就是客户的网址。绑定业务域名时需要在微信小程序管理后台下载验证文件，交给广告客户上传到客户的服务器。（客户在安全性和便利性上不一定会愿意），上传成功后即可在小程序中打开客户的网站。但客户的网站中不可以跳转到其他不在业务域名的网站。</p>\n<blockquote>\n<p>注意：业务域名一年只能修改50次。所以建议寻找稳定的广告客户。小客户经常更换的不建议合作。</p>\n</blockquote>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/web-view.html\">web-view</a></p>\n<h2 id=\"广告主-1\"><a href=\"#广告主-1\" class=\"headerlink\" title=\"广告主\"></a>广告主</h2><h3 id=\"普通链接\"><a href=\"#普通链接\" class=\"headerlink\" title=\"普通链接\"></a>普通链接</h3><p>找设计人员设计页面，比如：</p>\n<p><img src=\"http://effect.admpv.com/turntable/index.png\"></p>\n<p>然后由技术人员上传到服务器，给商务人员一个在线访问地址。商务将地址给客户。客户引导用户进入页面识别二维码进入微信小程序。</p>\n<h4 id=\"技术实现-2\"><a href=\"#技术实现-2\" class=\"headerlink\" title=\"技术实现\"></a>技术实现</h4><p>通过微信小程序后台 <strong>设置&gt;开发设置&gt;扫普通链接二维码打开小程序</strong> 可以生成二维码，二维码可以加上唯一标识，统计不同流量的访问情况。</p>\n<h3 id=\"公众号推文\"><a href=\"#公众号推文\" class=\"headerlink\" title=\"公众号推文\"></a>公众号推文</h3><h4 id=\"阅读原文\"><a href=\"#阅读原文\" class=\"headerlink\" title=\"阅读原文\"></a>阅读原文</h4><p>与普通链接一致，向技术索取链接地址</p>\n<h4 id=\"小程序\"><a href=\"#小程序\" class=\"headerlink\" title=\"小程序\"></a>小程序</h4><p>微信推文中可插入小程序卡片，点击卡片可直接打开微信小程序。技术需要向商务提供 AppID,路径(path) ，路径上应该带上统计id。</p>\n<h5 id=\"流量方操作流程\"><a href=\"#流量方操作流程\" class=\"headerlink\" title=\"流量方操作流程\"></a>流量方操作流程</h5><ol>\n<li>流量方时需要在微信小程序管理后台管理关联我们的小程序（我们需要提供小程序 AppID）</li>\n<li>关联后需要我们自己在微信小程序管理后台同意关联</li>\n<li>创建推文时选择小程序&gt;插入小程序卡片</li>\n</ol>\n<h3 id=\"APP直接打开小程序\"><a href=\"#APP直接打开小程序\" class=\"headerlink\" title=\"APP直接打开小程序\"></a>APP直接打开小程序</h3><p>移动应用拉起小程序是指用户可以通过接入该功能的第三方移动应用（APP）跳转至某一微信小程序的指定页面，完成服务后跳回至原移动应用（APP）。</p>\n<h5 id=\"流量方操作流程-1\"><a href=\"#流量方操作流程-1\" class=\"headerlink\" title=\"流量方操作流程\"></a>流量方操作流程</h5><p><a href=\"https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=21526646385rK1Bs&token=&lang=zh_CN\">移动应用拉起小程序功能</a></p>\n<p><strong>需要在微信开放平台创建应用后才能实现APP打开小程序 <a href=\"https://open.weixin.qq.com/cgi-bin/frame?t=home/app_tmpl&lang=zh_CN\">创建应用</a></strong></p>\n<p><a href=\"https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=21526646437Y6nEC&token=&lang=zh_CN\">Android开发示例</a></p>\n<p><a href=\"https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=21526646447MMfXU&token=&lang=zh_CN\">iOS开发示例</a></p>\n<h3 id=\"公众-服务号菜单\"><a href=\"#公众-服务号菜单\" class=\"headerlink\" title=\"公众/服务号菜单\"></a>公众/服务号菜单</h3><h4 id=\"流量方操作流程-2\"><a href=\"#流量方操作流程-2\" class=\"headerlink\" title=\"流量方操作流程\"></a>流量方操作流程</h4><p>登录微信公众号/服务号后台，选择左侧导航自定义菜单。选择对应菜单，菜单内容选择跳转小程序。</p>\n<p>未出现我们小程序的，需要关联我们的小程序。我们需要提供 AppID 给流量方关联后需要我们在后台确定绑定。</p>\n<p>若作者显示不是Nimo （被转载了），请访问Github原文进行讨论：<a href=\"https://github.com/nimoc/blog/issues/31\">https://github.com/nimoc/blog/issues/31</a></p>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"31\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>"},{"_content":"<h1>Web前端写给Web设计师的注意事项</h1>\n\n[![nimoc.io](http://nimoc.io/notice/index.svg)](https://nimoc.io/notice/index.html)\n\n<blockquote>\n<p>Web 设计和 Web 前端都应该仔细阅读此文档，会减少因为设计不合理导致的返工。</p>\n</blockquote>\n\n\n<p>Web 设计因为要在浏览器中实现，有时还需要『动』起来，在设计时有一定的限制。</p>\n\n\n<p><strong>前端同行应该以此文档作为审核设计稿的依据，不应该拿到设计稿直接开发。</strong></p>\n\n\n<p>有任何问题请 <a href=\"https://github.com/nimoc/web-desgin-notes/issues/new\">参与讨论</a> <a href=\"https://github.com/nimoc/web-desgin-notes/issues\">讨论列表</a></p>\n\n\n<blockquote>\n<p> <strong><a href=\"https://github.com/nimoc/web-desgin-notes/subscription\">Watch</a></strong> 订阅本文档更新</p>\n</blockquote>\n\n\n<hr>\n\n<p><a name=\"user-content-hash_top\" href=\"https://github.com/nimoc/web-design-notes#hash_top\"></a></p>\n\n\n<p><strong>索引</strong></p>\n\n\n<p><a href=\"https://github.com/nimoc/web-design-notes#hash_collect\">资源</a></p>\n\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_size\">页面尺寸</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_size_min-width\">最小宽度</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_responsive\">响应式设计</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_retina\">移动设备 Retina</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font\">字体</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font-size\">大小</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font-special\">特殊字体</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font-icon\">字体图标</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow\">内容溢出</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow-ddd\">...</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow-clip\">裁剪</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow-tip\">提示</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd\">PSD</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-layer-name\">图层命名</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-retina\">Retina</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-marker\">标注</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-font\">字体</a></li>\n</ol></li>\n<li>栅格化</li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status\">状态</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-loading\">Loading</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-hover\">hover</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-error\">error</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-paging\">分页</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-logout\">用户超时登出</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_ui\">UI组件化</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_ui-charts\">图表</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_typo\">typo 内容排版样式</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_typo-rich-text-editor\">富文本编辑</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_typo-markdown\">markdown</a>)</li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_everyone_checkout\">技术团队审核设计稿</a></li>\n</ol>\n\n\n[订阅博客](https://github.com/nimoc/blog/issues/15)\n\n若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：[https://github.com/nimoc/blog/issues/26](https://github.com/nimoc/blog/issues/26)\n\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","source":"_drafts/web_design_notes.md","raw":"<h1>Web前端写给Web设计师的注意事项</h1>\n\n[![nimoc.io](http://nimoc.io/notice/index.svg)](https://nimoc.io/notice/index.html)\n\n<blockquote>\n<p>Web 设计和 Web 前端都应该仔细阅读此文档，会减少因为设计不合理导致的返工。</p>\n</blockquote>\n\n\n<p>Web 设计因为要在浏览器中实现，有时还需要『动』起来，在设计时有一定的限制。</p>\n\n\n<p><strong>前端同行应该以此文档作为审核设计稿的依据，不应该拿到设计稿直接开发。</strong></p>\n\n\n<p>有任何问题请 <a href=\"https://github.com/nimoc/web-desgin-notes/issues/new\">参与讨论</a> <a href=\"https://github.com/nimoc/web-desgin-notes/issues\">讨论列表</a></p>\n\n\n<blockquote>\n<p> <strong><a href=\"https://github.com/nimoc/web-desgin-notes/subscription\">Watch</a></strong> 订阅本文档更新</p>\n</blockquote>\n\n\n<hr>\n\n<p><a name=\"user-content-hash_top\" href=\"https://github.com/nimoc/web-design-notes#hash_top\"></a></p>\n\n\n<p><strong>索引</strong></p>\n\n\n<p><a href=\"https://github.com/nimoc/web-design-notes#hash_collect\">资源</a></p>\n\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_size\">页面尺寸</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_size_min-width\">最小宽度</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_responsive\">响应式设计</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_retina\">移动设备 Retina</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font\">字体</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font-size\">大小</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font-special\">特殊字体</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font-icon\">字体图标</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow\">内容溢出</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow-ddd\">...</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow-clip\">裁剪</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow-tip\">提示</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd\">PSD</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-layer-name\">图层命名</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-retina\">Retina</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-marker\">标注</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-font\">字体</a></li>\n</ol></li>\n<li>栅格化</li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status\">状态</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-loading\">Loading</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-hover\">hover</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-error\">error</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-paging\">分页</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-logout\">用户超时登出</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_ui\">UI组件化</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_ui-charts\">图表</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_typo\">typo 内容排版样式</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_typo-rich-text-editor\">富文本编辑</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_typo-markdown\">markdown</a>)</li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_everyone_checkout\">技术团队审核设计稿</a></li>\n</ol>\n\n\n[订阅博客](https://github.com/nimoc/blog/issues/15)\n\n若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：[https://github.com/nimoc/blog/issues/26](https://github.com/nimoc/blog/issues/26)\n\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","slug":"web_design_notes","published":0,"date":"2021-02-27T06:35:41.906Z","updated":"2021-02-27T06:57:38.991Z","_id":"cklndcynt0005pvu8gkqn38c6","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1>Web前端写给Web设计师的注意事项</h1>\n\n<p><a href=\"https://nimoc.io/notice/index.html\"><img src=\"http://nimoc.io/notice/index.svg\" alt=\"nimoc.io\"></a></p>\n<blockquote>\n<p>Web 设计和 Web 前端都应该仔细阅读此文档，会减少因为设计不合理导致的返工。</p>\n</blockquote>\n\n\n<p>Web 设计因为要在浏览器中实现，有时还需要『动』起来，在设计时有一定的限制。</p>\n\n\n<p><strong>前端同行应该以此文档作为审核设计稿的依据，不应该拿到设计稿直接开发。</strong></p>\n\n\n<p>有任何问题请 <a href=\"https://github.com/nimoc/web-desgin-notes/issues/new\">参与讨论</a> <a href=\"https://github.com/nimoc/web-desgin-notes/issues\">讨论列表</a></p>\n\n\n<blockquote>\n<p> <strong><a href=\"https://github.com/nimoc/web-desgin-notes/subscription\">Watch</a></strong> 订阅本文档更新</p>\n</blockquote>\n\n\n<hr>\n\n<p><a name=\"user-content-hash_top\" href=\"https://github.com/nimoc/web-design-notes#hash_top\"></a></p>\n\n\n<p><strong>索引</strong></p>\n\n\n<p><a href=\"https://github.com/nimoc/web-design-notes#hash_collect\">资源</a></p>\n\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_size\">页面尺寸</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_size_min-width\">最小宽度</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_responsive\">响应式设计</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_retina\">移动设备 Retina</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font\">字体</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font-size\">大小</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font-special\">特殊字体</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font-icon\">字体图标</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow\">内容溢出</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow-ddd\">...</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow-clip\">裁剪</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow-tip\">提示</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd\">PSD</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-layer-name\">图层命名</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-retina\">Retina</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-marker\">标注</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-font\">字体</a></li>\n</ol></li>\n<li>栅格化</li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status\">状态</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-loading\">Loading</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-hover\">hover</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-error\">error</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-paging\">分页</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-logout\">用户超时登出</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_ui\">UI组件化</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_ui-charts\">图表</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_typo\">typo 内容排版样式</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_typo-rich-text-editor\">富文本编辑</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_typo-markdown\">markdown</a>)</li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_everyone_checkout\">技术团队审核设计稿</a></li>\n</ol>\n\n\n<p><a href=\"https://github.com/nimoc/blog/issues/15\">订阅博客</a></p>\n<p>若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：<a href=\"https://github.com/nimoc/blog/issues/26\">https://github.com/nimoc/blog/issues/26</a></p>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","site":{"data":{}},"excerpt":"","more":"<h1>Web前端写给Web设计师的注意事项</h1>\n\n<p><a href=\"https://nimoc.io/notice/index.html\"><img src=\"http://nimoc.io/notice/index.svg\" alt=\"nimoc.io\"></a></p>\n<blockquote>\n<p>Web 设计和 Web 前端都应该仔细阅读此文档，会减少因为设计不合理导致的返工。</p>\n</blockquote>\n\n\n<p>Web 设计因为要在浏览器中实现，有时还需要『动』起来，在设计时有一定的限制。</p>\n\n\n<p><strong>前端同行应该以此文档作为审核设计稿的依据，不应该拿到设计稿直接开发。</strong></p>\n\n\n<p>有任何问题请 <a href=\"https://github.com/nimoc/web-desgin-notes/issues/new\">参与讨论</a> <a href=\"https://github.com/nimoc/web-desgin-notes/issues\">讨论列表</a></p>\n\n\n<blockquote>\n<p> <strong><a href=\"https://github.com/nimoc/web-desgin-notes/subscription\">Watch</a></strong> 订阅本文档更新</p>\n</blockquote>\n\n\n<hr>\n\n<p><a name=\"user-content-hash_top\" href=\"https://github.com/nimoc/web-design-notes#hash_top\"></a></p>\n\n\n<p><strong>索引</strong></p>\n\n\n<p><a href=\"https://github.com/nimoc/web-design-notes#hash_collect\">资源</a></p>\n\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_size\">页面尺寸</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_size_min-width\">最小宽度</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_responsive\">响应式设计</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_retina\">移动设备 Retina</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font\">字体</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font-size\">大小</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font-special\">特殊字体</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font-icon\">字体图标</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow\">内容溢出</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow-ddd\">...</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow-clip\">裁剪</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow-tip\">提示</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd\">PSD</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-layer-name\">图层命名</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-retina\">Retina</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-marker\">标注</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-font\">字体</a></li>\n</ol></li>\n<li>栅格化</li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status\">状态</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-loading\">Loading</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-hover\">hover</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-error\">error</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-paging\">分页</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-logout\">用户超时登出</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_ui\">UI组件化</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_ui-charts\">图表</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_typo\">typo 内容排版样式</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_typo-rich-text-editor\">富文本编辑</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_typo-markdown\">markdown</a>)</li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_everyone_checkout\">技术团队审核设计稿</a></li>\n</ol>\n\n\n<p><a href=\"https://github.com/nimoc/blog/issues/15\">订阅博客</a></p>\n<p>若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：<a href=\"https://github.com/nimoc/blog/issues/26\">https://github.com/nimoc/blog/issues/26</a></p>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>"},{"_content":"# 前后端数据交互方法\n\n[![nimoc.io](http://nimoc.io/notice/index.svg)](https://nimoc.io/notice/index.html)\n\n> 本文写自 2015年,在现在看来很多方式已经被淘汰了.\n\n在此介绍几种常用的前后端数据交互方法，并给出使用建议。以提高前后端协同开发的效率。  \n此文章适合前后端协同开发经验不足的新手阅读。\n\n**目录:**  \n1. [HTML赋值](#hash_htmlvalue1)\n2. [JS赋值](#hash_jsvar2)\n3. [script填充JSON](#hash_json3)\n4. [AJAX获取JSON](#hash_ajaxjson4)\n5. [WebSocket实时传输数据](#hash_websocket5)\n6. [总结](#hash_summary6)\n\n<a title=\"HTML赋值\" id=\"hash_htmlvalue1\" name=\"hash_htmlvalue1\"></a>\n## HTML赋值\n\n输出到 Element 的 value 或 data-name \n\n``` php\n<input type=\"hidden\" value=\"<?php echo $user_avatar;?>\" />\n<div data-value=\"<?php echo $user_avatar;?>\"></div>\n\n```\n\n渲染结果\n\n``` html\n<input type=\"hidden\" value=\"https://avatars1.githubusercontent.com/u/3949015?v=3&s=40\" />\n<div data-avatar=\"https://avatars1.githubusercontent.com/u/3949015?v=3&s=40\"></div>\n\n```\n\n使用 JS 获取\n\n``` js\n$('input').val();\n// http://jquery.bootcss.com/jQuery.data/\n$('div').data('avatar');\n\n```\n\n**优点：**  \n不占用全局变量，由 JS 自由获取。\n\n**使用建议：**  \n\n适合传递简单数据，也非常适合多个简单数据与 Element 绑定关系。\n\n``` html\n<ul>\n<li>nimoc <span data-userid=\"1\" >删除</span></li>\n<li>nimo22 <span data-userid=\"2\" >删除</span></li>\n<li>nimo33 <span data-userid=\"3\" >删除</span></li>\n<li>nimo44 <span data-userid=\"4\" >删除</span></li>\n<li>nimo55 <span data-userid=\"5\" >删除</span></li>\n</ul>\n<script>\n$('span').on('click',function(){\n    $.post('/ajax/remove/',$(this).data('userid'),function(data){\n        // ...\n    })\n})\n</script>\n\n```\n\n<a title=\"JS赋值\" id=\"hash_jsvar2\" name=\"hash_jsvar2\"></a>\n## JS赋值\n\n将数据填充到 `<script>` 的 JavaScript 变量声明中。\n\n``` php\n<script>\nvar user_avatar = \"<?php echo $user_avatar;?>\";\n// 渲染结果\n// var user_avatar = \"https://avatars1.githubusercontent.com/u/3949015?v=3&s=40\";\n</script>\n\n```\n\n或使用 Smarty 后端模板引擎：\n\n``` js\n<script>\nvar user_avatar = \"{$user_avatar}\";\n</script>\n```\n\n**优点：**\n传递数据非常方便。前端直接调用 user_avatar 变量使用数据。\n\n**缺点：**\n1. 为了传递一个字符串数据占用了全局变量 `user_avatar`，当有很多数据需要传输时则会占用很多全局变量。\n2. 如果返回数据存在换行将会导致JS报错\n\n``` js\n// 渲染结果有换行符\nvar user_id = \"\n\nhttps://avatars1.githubusercontent.com/u/3949015?v=3&s=40\";\n// Uncaught SyntaxError: Unexpected token ILLEGAL\n\n```\n\n**优化：**  \n可以通过指向的某一个变量存放所有后端返回的内容，最小程度占用全局变量。例：\n\n``` js\n// PHP 代码\nvar SERVER_DATA = {\n    username: {$username},\n    userid: {$userid},\n    title: {$title}\n}\n// 渲染结果\nvar SERVER_DATA = {\n    username: \"NimoChu\",\n    userid: 1,\n    title: 'F2E'\n}\n\n```\n\n**使用建议：**  \n需要最快速度传递数据给 JS 并十分确定此数据稳定时，使用此方式。数据格式复杂的建议使用script填充JSON 或AJAX获取JSON 方法。\n\n<a title=\"script填充JSON\" id=\"hash_json3\" name=\"hash_json3\"></a>\n## script填充JSON\n\n[什么是JSON？](http://www.w3school.com.cn/json/json_syntax.asp)\n\n填充 JSON 数据到 `<script>` 标签中，前端通过 DOM 获取 JSON字符串并解析成对象。\n\n``` html\n<!-- PHP 代码 -->\n<script type=\"text/json\" id=\"data\"><?php echo json_encode($data) ?></script>\n<!-- 页面渲染结果 -->\n<script type=\"text/json\" id=\"data\">{\"username\":\"nimoc\",\"userid\":1}</script>\n<script>\nvar data = JSON.parse($('#data').html());\n//{username:\"nimoc\",userid:1}\n</script>\n```\n\n**优点：**  \n页面加载完成后就可以获取到数据。不占用全局变量，可传递大量数据集合。\n\n**缺点：**  \n数据量特别大时会导致页面初次加载变慢。变慢并不只是文件大小导致的，也因为服务器查询数据并返回合集是需要时间，可使用AJAX获取JSON完成按需加载和加载等待。\n\n**使用建议：**  \n适合传递在DOM加载完成时就需要用到的大量数据集合。例如：前端控制页面渲染，后端将JSON数据源填充到 `<script>` 由前端使用 [JavaScript模板引擎](http://www.gbtags.com/technology/javascript/20120917-javascript-template-engine-chooser/)进行页面渲染。\n\n<a title=\"AJAX获取JSON\" id=\"hash_ajaxjson4\" name=\"hash_ajaxjson4\"></a>\n## AJAX获取JSON\n\n使用 AJAX 获取JSON数据\n\n``` html\n<span id=\"showdata\">查看资料</span>\n<div style=\"display:none;\" id=\"box\">\n    <h2>用户信息</h2>\n    <p id=\"info\"><img src=\"loading.gif\" /></p>\n</div>\n```\n\n``` javascript\n$('#showdata').on('click',function(){\n    $('#box').show();\n    $.getJSON('/ajax/userdata/',function(oData){\n        // oData = {\"username\":\"nimoc\",\"userid\":1}\n        $('#info').html('用户名：' + oData.username + '<br>用户ID：' + oData.userid);\n    })\n})\n```\n\n这是一个通过AJAX 获取用户资料的示例。流程如下：\n1. 页面上只显示查看资料\n2. 用户点击查看资料\n3. 显示用户信息和 loading 图片\n4. 向服务器发送获取用户信息的AJAX请求\n5. 服务器返回JSON字符串，$.getJSON  自动将返回的 JSON字符串转换为对象\n6. 填充内容到 `<p id=\"info\">`\n\n**优点：**  \n不占用全局变量和 DOM 节点，可以自由控制获取数据的触发条件（页面加载完成时、用户点击查看资料时或用户点击某个按钮时）。当开始获取数据时可使用 loading 图片占位提示用户数据正在读取。防止页面加载所有数据导致的页面加载缓慢。\n\n**缺点：**  \n会产生额外的HTTP请求。不能在DOM加载完成以后立即获取，需要发送请求-接收响应。\n\n**使用建议：**  \n适合加载非主要信息、设定触发条件（用户点击查看资料时），并提供友好的数据读取等待提示。\n\n<a title=\"WebSocket实时传输数据\" id=\"hash_websocket5\" name=\"hash_websocket5\"></a>\n## WebSocket实时传输数据\n\n如果将 AJAX请求和响应比喻成给服务器发短信和等待服务器回复短信，而 WebSocket 就如同和服务器打电话。\n\n此处不对WebSocket做过多介绍，附上参考资料：\n1. [Wiki:WebSocket](http://zh.wikipedia.org/wiki/WebSocket)\n2. [使用 HTML5 WebSocket 构建实时 Web 应用](http://www.ibm.com/developerworks/cn/web/1112_huangxa_websocket/)\n3. [Ajax vs WebSocket](http://www.web-tinker.com/article/20372.html?utm_source=tuicool)\n\n<a title=\"总结\" id=\"hash_summary6\" name=\"hash_summary6\"></a>\n## 总结\n\n每种情况都有每种情况的用处，没有绝对正确的方法。**根据实际情况灵活的选择获取数据方式**。\n\n相关链接\n- [知乎：前端 ，后端 关于数据交互的问题?](http://www.zhihu.com/question/26532621)\n\n[点此订阅博客](https://github.com/nimoc/blog/issues/15)\n\n若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：[https://github.com/nimoc/blog/issues/13](https://github.com/nimoc/blog/issues/13)\n\n\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"13\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","source":"_drafts/web_team_interface.md","raw":"# 前后端数据交互方法\n\n[![nimoc.io](http://nimoc.io/notice/index.svg)](https://nimoc.io/notice/index.html)\n\n> 本文写自 2015年,在现在看来很多方式已经被淘汰了.\n\n在此介绍几种常用的前后端数据交互方法，并给出使用建议。以提高前后端协同开发的效率。  \n此文章适合前后端协同开发经验不足的新手阅读。\n\n**目录:**  \n1. [HTML赋值](#hash_htmlvalue1)\n2. [JS赋值](#hash_jsvar2)\n3. [script填充JSON](#hash_json3)\n4. [AJAX获取JSON](#hash_ajaxjson4)\n5. [WebSocket实时传输数据](#hash_websocket5)\n6. [总结](#hash_summary6)\n\n<a title=\"HTML赋值\" id=\"hash_htmlvalue1\" name=\"hash_htmlvalue1\"></a>\n## HTML赋值\n\n输出到 Element 的 value 或 data-name \n\n``` php\n<input type=\"hidden\" value=\"<?php echo $user_avatar;?>\" />\n<div data-value=\"<?php echo $user_avatar;?>\"></div>\n\n```\n\n渲染结果\n\n``` html\n<input type=\"hidden\" value=\"https://avatars1.githubusercontent.com/u/3949015?v=3&s=40\" />\n<div data-avatar=\"https://avatars1.githubusercontent.com/u/3949015?v=3&s=40\"></div>\n\n```\n\n使用 JS 获取\n\n``` js\n$('input').val();\n// http://jquery.bootcss.com/jQuery.data/\n$('div').data('avatar');\n\n```\n\n**优点：**  \n不占用全局变量，由 JS 自由获取。\n\n**使用建议：**  \n\n适合传递简单数据，也非常适合多个简单数据与 Element 绑定关系。\n\n``` html\n<ul>\n<li>nimoc <span data-userid=\"1\" >删除</span></li>\n<li>nimo22 <span data-userid=\"2\" >删除</span></li>\n<li>nimo33 <span data-userid=\"3\" >删除</span></li>\n<li>nimo44 <span data-userid=\"4\" >删除</span></li>\n<li>nimo55 <span data-userid=\"5\" >删除</span></li>\n</ul>\n<script>\n$('span').on('click',function(){\n    $.post('/ajax/remove/',$(this).data('userid'),function(data){\n        // ...\n    })\n})\n</script>\n\n```\n\n<a title=\"JS赋值\" id=\"hash_jsvar2\" name=\"hash_jsvar2\"></a>\n## JS赋值\n\n将数据填充到 `<script>` 的 JavaScript 变量声明中。\n\n``` php\n<script>\nvar user_avatar = \"<?php echo $user_avatar;?>\";\n// 渲染结果\n// var user_avatar = \"https://avatars1.githubusercontent.com/u/3949015?v=3&s=40\";\n</script>\n\n```\n\n或使用 Smarty 后端模板引擎：\n\n``` js\n<script>\nvar user_avatar = \"{$user_avatar}\";\n</script>\n```\n\n**优点：**\n传递数据非常方便。前端直接调用 user_avatar 变量使用数据。\n\n**缺点：**\n1. 为了传递一个字符串数据占用了全局变量 `user_avatar`，当有很多数据需要传输时则会占用很多全局变量。\n2. 如果返回数据存在换行将会导致JS报错\n\n``` js\n// 渲染结果有换行符\nvar user_id = \"\n\nhttps://avatars1.githubusercontent.com/u/3949015?v=3&s=40\";\n// Uncaught SyntaxError: Unexpected token ILLEGAL\n\n```\n\n**优化：**  \n可以通过指向的某一个变量存放所有后端返回的内容，最小程度占用全局变量。例：\n\n``` js\n// PHP 代码\nvar SERVER_DATA = {\n    username: {$username},\n    userid: {$userid},\n    title: {$title}\n}\n// 渲染结果\nvar SERVER_DATA = {\n    username: \"NimoChu\",\n    userid: 1,\n    title: 'F2E'\n}\n\n```\n\n**使用建议：**  \n需要最快速度传递数据给 JS 并十分确定此数据稳定时，使用此方式。数据格式复杂的建议使用script填充JSON 或AJAX获取JSON 方法。\n\n<a title=\"script填充JSON\" id=\"hash_json3\" name=\"hash_json3\"></a>\n## script填充JSON\n\n[什么是JSON？](http://www.w3school.com.cn/json/json_syntax.asp)\n\n填充 JSON 数据到 `<script>` 标签中，前端通过 DOM 获取 JSON字符串并解析成对象。\n\n``` html\n<!-- PHP 代码 -->\n<script type=\"text/json\" id=\"data\"><?php echo json_encode($data) ?></script>\n<!-- 页面渲染结果 -->\n<script type=\"text/json\" id=\"data\">{\"username\":\"nimoc\",\"userid\":1}</script>\n<script>\nvar data = JSON.parse($('#data').html());\n//{username:\"nimoc\",userid:1}\n</script>\n```\n\n**优点：**  \n页面加载完成后就可以获取到数据。不占用全局变量，可传递大量数据集合。\n\n**缺点：**  \n数据量特别大时会导致页面初次加载变慢。变慢并不只是文件大小导致的，也因为服务器查询数据并返回合集是需要时间，可使用AJAX获取JSON完成按需加载和加载等待。\n\n**使用建议：**  \n适合传递在DOM加载完成时就需要用到的大量数据集合。例如：前端控制页面渲染，后端将JSON数据源填充到 `<script>` 由前端使用 [JavaScript模板引擎](http://www.gbtags.com/technology/javascript/20120917-javascript-template-engine-chooser/)进行页面渲染。\n\n<a title=\"AJAX获取JSON\" id=\"hash_ajaxjson4\" name=\"hash_ajaxjson4\"></a>\n## AJAX获取JSON\n\n使用 AJAX 获取JSON数据\n\n``` html\n<span id=\"showdata\">查看资料</span>\n<div style=\"display:none;\" id=\"box\">\n    <h2>用户信息</h2>\n    <p id=\"info\"><img src=\"loading.gif\" /></p>\n</div>\n```\n\n``` javascript\n$('#showdata').on('click',function(){\n    $('#box').show();\n    $.getJSON('/ajax/userdata/',function(oData){\n        // oData = {\"username\":\"nimoc\",\"userid\":1}\n        $('#info').html('用户名：' + oData.username + '<br>用户ID：' + oData.userid);\n    })\n})\n```\n\n这是一个通过AJAX 获取用户资料的示例。流程如下：\n1. 页面上只显示查看资料\n2. 用户点击查看资料\n3. 显示用户信息和 loading 图片\n4. 向服务器发送获取用户信息的AJAX请求\n5. 服务器返回JSON字符串，$.getJSON  自动将返回的 JSON字符串转换为对象\n6. 填充内容到 `<p id=\"info\">`\n\n**优点：**  \n不占用全局变量和 DOM 节点，可以自由控制获取数据的触发条件（页面加载完成时、用户点击查看资料时或用户点击某个按钮时）。当开始获取数据时可使用 loading 图片占位提示用户数据正在读取。防止页面加载所有数据导致的页面加载缓慢。\n\n**缺点：**  \n会产生额外的HTTP请求。不能在DOM加载完成以后立即获取，需要发送请求-接收响应。\n\n**使用建议：**  \n适合加载非主要信息、设定触发条件（用户点击查看资料时），并提供友好的数据读取等待提示。\n\n<a title=\"WebSocket实时传输数据\" id=\"hash_websocket5\" name=\"hash_websocket5\"></a>\n## WebSocket实时传输数据\n\n如果将 AJAX请求和响应比喻成给服务器发短信和等待服务器回复短信，而 WebSocket 就如同和服务器打电话。\n\n此处不对WebSocket做过多介绍，附上参考资料：\n1. [Wiki:WebSocket](http://zh.wikipedia.org/wiki/WebSocket)\n2. [使用 HTML5 WebSocket 构建实时 Web 应用](http://www.ibm.com/developerworks/cn/web/1112_huangxa_websocket/)\n3. [Ajax vs WebSocket](http://www.web-tinker.com/article/20372.html?utm_source=tuicool)\n\n<a title=\"总结\" id=\"hash_summary6\" name=\"hash_summary6\"></a>\n## 总结\n\n每种情况都有每种情况的用处，没有绝对正确的方法。**根据实际情况灵活的选择获取数据方式**。\n\n相关链接\n- [知乎：前端 ，后端 关于数据交互的问题?](http://www.zhihu.com/question/26532621)\n\n[点此订阅博客](https://github.com/nimoc/blog/issues/15)\n\n若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：[https://github.com/nimoc/blog/issues/13](https://github.com/nimoc/blog/issues/13)\n\n\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"13\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","slug":"web_team_interface","published":0,"date":"2021-02-27T06:35:41.907Z","updated":"2021-02-27T06:57:38.991Z","_id":"cklndcynu0006pvu8hril2m8w","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前后端数据交互方法\"><a href=\"#前后端数据交互方法\" class=\"headerlink\" title=\"前后端数据交互方法\"></a>前后端数据交互方法</h1><p><a href=\"https://nimoc.io/notice/index.html\"><img src=\"http://nimoc.io/notice/index.svg\" alt=\"nimoc.io\"></a></p>\n<blockquote>\n<p>本文写自 2015年,在现在看来很多方式已经被淘汰了.</p>\n</blockquote>\n<p>在此介绍几种常用的前后端数据交互方法，并给出使用建议。以提高前后端协同开发的效率。<br>此文章适合前后端协同开发经验不足的新手阅读。</p>\n<p><strong>目录:</strong>  </p>\n<ol>\n<li><a href=\"#hash_htmlvalue1\">HTML赋值</a></li>\n<li><a href=\"#hash_jsvar2\">JS赋值</a></li>\n<li><a href=\"#hash_json3\">script填充JSON</a></li>\n<li><a href=\"#hash_ajaxjson4\">AJAX获取JSON</a></li>\n<li><a href=\"#hash_websocket5\">WebSocket实时传输数据</a></li>\n<li><a href=\"#hash_summary6\">总结</a></li>\n</ol>\n<p><a title=\"HTML赋值\" id=\"hash_htmlvalue1\" name=\"hash_htmlvalue1\"></a></p>\n<h2 id=\"HTML赋值\"><a href=\"#HTML赋值\" class=\"headerlink\" title=\"HTML赋值\"></a>HTML赋值</h2><p>输出到 Element 的 value 或 data-name </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">&quot;hidden&quot;</span> value=<span class=\"string\">&quot;&lt;?php echo <span class=\"subst\">$user_avatar</span>;?&gt;&quot;</span> /&gt;</span><br><span class=\"line\">&lt;div data-value=<span class=\"string\">&quot;&lt;?php echo <span class=\"subst\">$user_avatar</span>;?&gt;&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>渲染结果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;https://avatars1.githubusercontent.com/u/3949015?v=3&amp;s=40&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-avatar</span>=<span class=\"string\">&quot;https://avatars1.githubusercontent.com/u/3949015?v=3&amp;s=40&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用 JS 获取</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;input&#x27;</span>).val();</span><br><span class=\"line\"><span class=\"comment\">// http://jquery.bootcss.com/jQuery.data/</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;div&#x27;</span>).data(<span class=\"string\">&#x27;avatar&#x27;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong><br>不占用全局变量，由 JS 自由获取。</p>\n<p><strong>使用建议：</strong>  </p>\n<p>适合传递简单数据，也非常适合多个简单数据与 Element 绑定关系。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>nimoc <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">data-userid</span>=<span class=\"string\">&quot;1&quot;</span> &gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>nimo22 <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">data-userid</span>=<span class=\"string\">&quot;2&quot;</span> &gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>nimo33 <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">data-userid</span>=<span class=\"string\">&quot;3&quot;</span> &gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>nimo44 <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">data-userid</span>=<span class=\"string\">&quot;4&quot;</span> &gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>nimo55 <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">data-userid</span>=<span class=\"string\">&quot;5&quot;</span> &gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">$(<span class=\"string\">&#x27;span&#x27;</span>).on(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    $.post(<span class=\"string\">&#x27;/ajax/remove/&#x27;</span>,$(<span class=\"built_in\">this</span>).data(<span class=\"string\">&#x27;userid&#x27;</span>),<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// ...</span></span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><a title=\"JS赋值\" id=\"hash_jsvar2\" name=\"hash_jsvar2\"></a></p>\n<h2 id=\"JS赋值\"><a href=\"#JS赋值\" class=\"headerlink\" title=\"JS赋值\"></a>JS赋值</h2><p>将数据填充到 <code>&lt;script&gt;</code> 的 JavaScript 变量声明中。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> user_avatar = <span class=\"string\">&quot;&lt;?php echo <span class=\"subst\">$user_avatar</span>;?&gt;&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 渲染结果</span></span><br><span class=\"line\"><span class=\"comment\">// var user_avatar = &quot;https://avatars1.githubusercontent.com/u/3949015?v=3&amp;s=40&quot;;</span></span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>或使用 Smarty 后端模板引擎：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> user_avatar = <span class=\"string\">&quot;&#123;$user_avatar&#125;&quot;</span>;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong><br>传递数据非常方便。前端直接调用 user_avatar 变量使用数据。</p>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>为了传递一个字符串数据占用了全局变量 <code>user_avatar</code>，当有很多数据需要传输时则会占用很多全局变量。</li>\n<li>如果返回数据存在换行将会导致JS报错</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 渲染结果有换行符</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> user_id = <span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">https://avatars1.githubusercontent.com/u/3949015?v=3&amp;s=40&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// Uncaught SyntaxError: Unexpected token ILLEGAL</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>优化：</strong><br>可以通过指向的某一个变量存放所有后端返回的内容，最小程度占用全局变量。例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// PHP 代码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> SERVER_DATA = &#123;</span><br><span class=\"line\">    username: &#123;$username&#125;,</span><br><span class=\"line\">    userid: &#123;$userid&#125;,</span><br><span class=\"line\">    title: &#123;$title&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 渲染结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> SERVER_DATA = &#123;</span><br><span class=\"line\">    username: <span class=\"string\">&quot;NimoChu&quot;</span>,</span><br><span class=\"line\">    userid: <span class=\"number\">1</span>,</span><br><span class=\"line\">    title: <span class=\"string\">&#x27;F2E&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>使用建议：</strong><br>需要最快速度传递数据给 JS 并十分确定此数据稳定时，使用此方式。数据格式复杂的建议使用script填充JSON 或AJAX获取JSON 方法。</p>\n<p><a title=\"script填充JSON\" id=\"hash_json3\" name=\"hash_json3\"></a></p>\n<h2 id=\"script填充JSON\"><a href=\"#script填充JSON\" class=\"headerlink\" title=\"script填充JSON\"></a>script填充JSON</h2><p><a href=\"http://www.w3school.com.cn/json/json_syntax.asp\">什么是JSON？</a></p>\n<p>填充 JSON 数据到 <code>&lt;script&gt;</code> 标签中，前端通过 DOM 获取 JSON字符串并解析成对象。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- PHP 代码 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/json&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;data&quot;</span>&gt;</span>&lt;?php echo json_encode($data) ?&gt;<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 页面渲染结果 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/json&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;data&quot;</span>&gt;</span><span class=\"javascript\">&#123;<span class=\"string\">&quot;username&quot;</span>:<span class=\"string\">&quot;nimoc&quot;</span>,<span class=\"string\">&quot;userid&quot;</span>:<span class=\"number\">1</span>&#125;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.parse($(<span class=\"string\">&#x27;#data&#x27;</span>).html());</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//&#123;username:&quot;nimoc&quot;,userid:1&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong><br>页面加载完成后就可以获取到数据。不占用全局变量，可传递大量数据集合。</p>\n<p><strong>缺点：</strong><br>数据量特别大时会导致页面初次加载变慢。变慢并不只是文件大小导致的，也因为服务器查询数据并返回合集是需要时间，可使用AJAX获取JSON完成按需加载和加载等待。</p>\n<p><strong>使用建议：</strong><br>适合传递在DOM加载完成时就需要用到的大量数据集合。例如：前端控制页面渲染，后端将JSON数据源填充到 <code>&lt;script&gt;</code> 由前端使用 <a href=\"http://www.gbtags.com/technology/javascript/20120917-javascript-template-engine-chooser/\">JavaScript模板引擎</a>进行页面渲染。</p>\n<p><a title=\"AJAX获取JSON\" id=\"hash_ajaxjson4\" name=\"hash_ajaxjson4\"></a></p>\n<h2 id=\"AJAX获取JSON\"><a href=\"#AJAX获取JSON\" class=\"headerlink\" title=\"AJAX获取JSON\"></a>AJAX获取JSON</h2><p>使用 AJAX 获取JSON数据</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;showdata&quot;</span>&gt;</span>查看资料<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display:none;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>用户信息<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;info&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;loading.gif&quot;</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#showdata&#x27;</span>).on(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#box&#x27;</span>).show();</span><br><span class=\"line\">    $.getJSON(<span class=\"string\">&#x27;/ajax/userdata/&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">oData</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// oData = &#123;&quot;username&quot;:&quot;nimoc&quot;,&quot;userid&quot;:1&#125;</span></span><br><span class=\"line\">        $(<span class=\"string\">&#x27;#info&#x27;</span>).html(<span class=\"string\">&#x27;用户名：&#x27;</span> + oData.username + <span class=\"string\">&#x27;&lt;br&gt;用户ID：&#x27;</span> + oData.userid);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这是一个通过AJAX 获取用户资料的示例。流程如下：</p>\n<ol>\n<li>页面上只显示查看资料</li>\n<li>用户点击查看资料</li>\n<li>显示用户信息和 loading 图片</li>\n<li>向服务器发送获取用户信息的AJAX请求</li>\n<li>服务器返回JSON字符串，$.getJSON  自动将返回的 JSON字符串转换为对象</li>\n<li>填充内容到 <code>&lt;p id=&quot;info&quot;&gt;</code></li>\n</ol>\n<p><strong>优点：</strong><br>不占用全局变量和 DOM 节点，可以自由控制获取数据的触发条件（页面加载完成时、用户点击查看资料时或用户点击某个按钮时）。当开始获取数据时可使用 loading 图片占位提示用户数据正在读取。防止页面加载所有数据导致的页面加载缓慢。</p>\n<p><strong>缺点：</strong><br>会产生额外的HTTP请求。不能在DOM加载完成以后立即获取，需要发送请求-接收响应。</p>\n<p><strong>使用建议：</strong><br>适合加载非主要信息、设定触发条件（用户点击查看资料时），并提供友好的数据读取等待提示。</p>\n<p><a title=\"WebSocket实时传输数据\" id=\"hash_websocket5\" name=\"hash_websocket5\"></a></p>\n<h2 id=\"WebSocket实时传输数据\"><a href=\"#WebSocket实时传输数据\" class=\"headerlink\" title=\"WebSocket实时传输数据\"></a>WebSocket实时传输数据</h2><p>如果将 AJAX请求和响应比喻成给服务器发短信和等待服务器回复短信，而 WebSocket 就如同和服务器打电话。</p>\n<p>此处不对WebSocket做过多介绍，附上参考资料：</p>\n<ol>\n<li><a href=\"http://zh.wikipedia.org/wiki/WebSocket\">Wiki:WebSocket</a></li>\n<li><a href=\"http://www.ibm.com/developerworks/cn/web/1112_huangxa_websocket/\">使用 HTML5 WebSocket 构建实时 Web 应用</a></li>\n<li><a href=\"http://www.web-tinker.com/article/20372.html?utm_source=tuicool\">Ajax vs WebSocket</a></li>\n</ol>\n<p><a title=\"总结\" id=\"hash_summary6\" name=\"hash_summary6\"></a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>每种情况都有每种情况的用处，没有绝对正确的方法。<strong>根据实际情况灵活的选择获取数据方式</strong>。</p>\n<p>相关链接</p>\n<ul>\n<li><a href=\"http://www.zhihu.com/question/26532621\">知乎：前端 ，后端 关于数据交互的问题?</a></li>\n</ul>\n<p><a href=\"https://github.com/nimoc/blog/issues/15\">点此订阅博客</a></p>\n<p>若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：<a href=\"https://github.com/nimoc/blog/issues/13\">https://github.com/nimoc/blog/issues/13</a></p>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"13\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前后端数据交互方法\"><a href=\"#前后端数据交互方法\" class=\"headerlink\" title=\"前后端数据交互方法\"></a>前后端数据交互方法</h1><p><a href=\"https://nimoc.io/notice/index.html\"><img src=\"http://nimoc.io/notice/index.svg\" alt=\"nimoc.io\"></a></p>\n<blockquote>\n<p>本文写自 2015年,在现在看来很多方式已经被淘汰了.</p>\n</blockquote>\n<p>在此介绍几种常用的前后端数据交互方法，并给出使用建议。以提高前后端协同开发的效率。<br>此文章适合前后端协同开发经验不足的新手阅读。</p>\n<p><strong>目录:</strong>  </p>\n<ol>\n<li><a href=\"#hash_htmlvalue1\">HTML赋值</a></li>\n<li><a href=\"#hash_jsvar2\">JS赋值</a></li>\n<li><a href=\"#hash_json3\">script填充JSON</a></li>\n<li><a href=\"#hash_ajaxjson4\">AJAX获取JSON</a></li>\n<li><a href=\"#hash_websocket5\">WebSocket实时传输数据</a></li>\n<li><a href=\"#hash_summary6\">总结</a></li>\n</ol>\n<p><a title=\"HTML赋值\" id=\"hash_htmlvalue1\" name=\"hash_htmlvalue1\"></a></p>\n<h2 id=\"HTML赋值\"><a href=\"#HTML赋值\" class=\"headerlink\" title=\"HTML赋值\"></a>HTML赋值</h2><p>输出到 Element 的 value 或 data-name </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">&quot;hidden&quot;</span> value=<span class=\"string\">&quot;&lt;?php echo <span class=\"subst\">$user_avatar</span>;?&gt;&quot;</span> /&gt;</span><br><span class=\"line\">&lt;div data-value=<span class=\"string\">&quot;&lt;?php echo <span class=\"subst\">$user_avatar</span>;?&gt;&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>渲染结果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;https://avatars1.githubusercontent.com/u/3949015?v=3&amp;s=40&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-avatar</span>=<span class=\"string\">&quot;https://avatars1.githubusercontent.com/u/3949015?v=3&amp;s=40&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用 JS 获取</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;input&#x27;</span>).val();</span><br><span class=\"line\"><span class=\"comment\">// http://jquery.bootcss.com/jQuery.data/</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;div&#x27;</span>).data(<span class=\"string\">&#x27;avatar&#x27;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong><br>不占用全局变量，由 JS 自由获取。</p>\n<p><strong>使用建议：</strong>  </p>\n<p>适合传递简单数据，也非常适合多个简单数据与 Element 绑定关系。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>nimoc <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">data-userid</span>=<span class=\"string\">&quot;1&quot;</span> &gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>nimo22 <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">data-userid</span>=<span class=\"string\">&quot;2&quot;</span> &gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>nimo33 <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">data-userid</span>=<span class=\"string\">&quot;3&quot;</span> &gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>nimo44 <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">data-userid</span>=<span class=\"string\">&quot;4&quot;</span> &gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>nimo55 <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">data-userid</span>=<span class=\"string\">&quot;5&quot;</span> &gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">$(<span class=\"string\">&#x27;span&#x27;</span>).on(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    $.post(<span class=\"string\">&#x27;/ajax/remove/&#x27;</span>,$(<span class=\"built_in\">this</span>).data(<span class=\"string\">&#x27;userid&#x27;</span>),<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// ...</span></span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><a title=\"JS赋值\" id=\"hash_jsvar2\" name=\"hash_jsvar2\"></a></p>\n<h2 id=\"JS赋值\"><a href=\"#JS赋值\" class=\"headerlink\" title=\"JS赋值\"></a>JS赋值</h2><p>将数据填充到 <code>&lt;script&gt;</code> 的 JavaScript 变量声明中。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> user_avatar = <span class=\"string\">&quot;&lt;?php echo <span class=\"subst\">$user_avatar</span>;?&gt;&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 渲染结果</span></span><br><span class=\"line\"><span class=\"comment\">// var user_avatar = &quot;https://avatars1.githubusercontent.com/u/3949015?v=3&amp;s=40&quot;;</span></span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>或使用 Smarty 后端模板引擎：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> user_avatar = <span class=\"string\">&quot;&#123;$user_avatar&#125;&quot;</span>;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong><br>传递数据非常方便。前端直接调用 user_avatar 变量使用数据。</p>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>为了传递一个字符串数据占用了全局变量 <code>user_avatar</code>，当有很多数据需要传输时则会占用很多全局变量。</li>\n<li>如果返回数据存在换行将会导致JS报错</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 渲染结果有换行符</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> user_id = <span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">https://avatars1.githubusercontent.com/u/3949015?v=3&amp;s=40&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// Uncaught SyntaxError: Unexpected token ILLEGAL</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>优化：</strong><br>可以通过指向的某一个变量存放所有后端返回的内容，最小程度占用全局变量。例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// PHP 代码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> SERVER_DATA = &#123;</span><br><span class=\"line\">    username: &#123;$username&#125;,</span><br><span class=\"line\">    userid: &#123;$userid&#125;,</span><br><span class=\"line\">    title: &#123;$title&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 渲染结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> SERVER_DATA = &#123;</span><br><span class=\"line\">    username: <span class=\"string\">&quot;NimoChu&quot;</span>,</span><br><span class=\"line\">    userid: <span class=\"number\">1</span>,</span><br><span class=\"line\">    title: <span class=\"string\">&#x27;F2E&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>使用建议：</strong><br>需要最快速度传递数据给 JS 并十分确定此数据稳定时，使用此方式。数据格式复杂的建议使用script填充JSON 或AJAX获取JSON 方法。</p>\n<p><a title=\"script填充JSON\" id=\"hash_json3\" name=\"hash_json3\"></a></p>\n<h2 id=\"script填充JSON\"><a href=\"#script填充JSON\" class=\"headerlink\" title=\"script填充JSON\"></a>script填充JSON</h2><p><a href=\"http://www.w3school.com.cn/json/json_syntax.asp\">什么是JSON？</a></p>\n<p>填充 JSON 数据到 <code>&lt;script&gt;</code> 标签中，前端通过 DOM 获取 JSON字符串并解析成对象。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- PHP 代码 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/json&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;data&quot;</span>&gt;</span>&lt;?php echo json_encode($data) ?&gt;<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 页面渲染结果 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/json&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;data&quot;</span>&gt;</span><span class=\"javascript\">&#123;<span class=\"string\">&quot;username&quot;</span>:<span class=\"string\">&quot;nimoc&quot;</span>,<span class=\"string\">&quot;userid&quot;</span>:<span class=\"number\">1</span>&#125;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.parse($(<span class=\"string\">&#x27;#data&#x27;</span>).html());</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//&#123;username:&quot;nimoc&quot;,userid:1&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong><br>页面加载完成后就可以获取到数据。不占用全局变量，可传递大量数据集合。</p>\n<p><strong>缺点：</strong><br>数据量特别大时会导致页面初次加载变慢。变慢并不只是文件大小导致的，也因为服务器查询数据并返回合集是需要时间，可使用AJAX获取JSON完成按需加载和加载等待。</p>\n<p><strong>使用建议：</strong><br>适合传递在DOM加载完成时就需要用到的大量数据集合。例如：前端控制页面渲染，后端将JSON数据源填充到 <code>&lt;script&gt;</code> 由前端使用 <a href=\"http://www.gbtags.com/technology/javascript/20120917-javascript-template-engine-chooser/\">JavaScript模板引擎</a>进行页面渲染。</p>\n<p><a title=\"AJAX获取JSON\" id=\"hash_ajaxjson4\" name=\"hash_ajaxjson4\"></a></p>\n<h2 id=\"AJAX获取JSON\"><a href=\"#AJAX获取JSON\" class=\"headerlink\" title=\"AJAX获取JSON\"></a>AJAX获取JSON</h2><p>使用 AJAX 获取JSON数据</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;showdata&quot;</span>&gt;</span>查看资料<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display:none;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>用户信息<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;info&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;loading.gif&quot;</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#showdata&#x27;</span>).on(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#box&#x27;</span>).show();</span><br><span class=\"line\">    $.getJSON(<span class=\"string\">&#x27;/ajax/userdata/&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">oData</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// oData = &#123;&quot;username&quot;:&quot;nimoc&quot;,&quot;userid&quot;:1&#125;</span></span><br><span class=\"line\">        $(<span class=\"string\">&#x27;#info&#x27;</span>).html(<span class=\"string\">&#x27;用户名：&#x27;</span> + oData.username + <span class=\"string\">&#x27;&lt;br&gt;用户ID：&#x27;</span> + oData.userid);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这是一个通过AJAX 获取用户资料的示例。流程如下：</p>\n<ol>\n<li>页面上只显示查看资料</li>\n<li>用户点击查看资料</li>\n<li>显示用户信息和 loading 图片</li>\n<li>向服务器发送获取用户信息的AJAX请求</li>\n<li>服务器返回JSON字符串，$.getJSON  自动将返回的 JSON字符串转换为对象</li>\n<li>填充内容到 <code>&lt;p id=&quot;info&quot;&gt;</code></li>\n</ol>\n<p><strong>优点：</strong><br>不占用全局变量和 DOM 节点，可以自由控制获取数据的触发条件（页面加载完成时、用户点击查看资料时或用户点击某个按钮时）。当开始获取数据时可使用 loading 图片占位提示用户数据正在读取。防止页面加载所有数据导致的页面加载缓慢。</p>\n<p><strong>缺点：</strong><br>会产生额外的HTTP请求。不能在DOM加载完成以后立即获取，需要发送请求-接收响应。</p>\n<p><strong>使用建议：</strong><br>适合加载非主要信息、设定触发条件（用户点击查看资料时），并提供友好的数据读取等待提示。</p>\n<p><a title=\"WebSocket实时传输数据\" id=\"hash_websocket5\" name=\"hash_websocket5\"></a></p>\n<h2 id=\"WebSocket实时传输数据\"><a href=\"#WebSocket实时传输数据\" class=\"headerlink\" title=\"WebSocket实时传输数据\"></a>WebSocket实时传输数据</h2><p>如果将 AJAX请求和响应比喻成给服务器发短信和等待服务器回复短信，而 WebSocket 就如同和服务器打电话。</p>\n<p>此处不对WebSocket做过多介绍，附上参考资料：</p>\n<ol>\n<li><a href=\"http://zh.wikipedia.org/wiki/WebSocket\">Wiki:WebSocket</a></li>\n<li><a href=\"http://www.ibm.com/developerworks/cn/web/1112_huangxa_websocket/\">使用 HTML5 WebSocket 构建实时 Web 应用</a></li>\n<li><a href=\"http://www.web-tinker.com/article/20372.html?utm_source=tuicool\">Ajax vs WebSocket</a></li>\n</ol>\n<p><a title=\"总结\" id=\"hash_summary6\" name=\"hash_summary6\"></a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>每种情况都有每种情况的用处，没有绝对正确的方法。<strong>根据实际情况灵活的选择获取数据方式</strong>。</p>\n<p>相关链接</p>\n<ul>\n<li><a href=\"http://www.zhihu.com/question/26532621\">知乎：前端 ，后端 关于数据交互的问题?</a></li>\n</ul>\n<p><a href=\"https://github.com/nimoc/blog/issues/15\">点此订阅博客</a></p>\n<p>若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：<a href=\"https://github.com/nimoc/blog/issues/13\">https://github.com/nimoc/blog/issues/13</a></p>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"13\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>"},{"title":"解决并发方法论","date":"2021-02-26T16:00:00.000Z","_content":"\n# 解决并发方法论\n\n[![nimoc.io](http://nimoc.io/notice/index.svg)](https://nimoc.io/notice/index.html)\n\n首先记住以下几点\n\n1. **原子性**：确认哪些操作不是原子性，考虑不是原子性会导致什么问题。并考虑所有操作都可能失败或进程/协程中断\n2. **操作延迟**：代码中每个操作的执行时间都是不确定的。每一行之间都可能出现非常大的延迟，需假设每行代码之间都有 sleep 操作。网络io中客户端收到消息的时间距离服务端发送消息已经过了很久，需假设:0s client 发起请求-> 2s server 接收请求 -> 4s server 响应数据 -> 6s client 接收响应\n3. **竞态**：考虑会有其他线程/协程/同一时间对数据进行修改\n4. 通过时序图分析问题 https://plantuml.com/zh/\n\n以 redis 互斥锁为案例实现上述方法论：\n\n先看一下不严谨的上锁操作会产生的问题\n\n\n![](./concurrency_methodology/1-1.png)\n\n可以通过 SET key value  EX seconds NX 保证原子性\n\n![](./concurrency_methodology/1-2.png)\n\n上锁操作已经解决了原子性问题，接下来看不严谨的解锁操作会产生的问题\n\n\n![](./concurrency_methodology/1-3.png)\n\n为了解决延迟导致的错误解锁，通过不严谨的超时判断解决问题\n\n> 请先不要看红色注释框,自己分析存在的问题。然后查看红色注释框确认答案\n\n![](./concurrency_methodology/1-4.png)\n\n在上锁时设置密码，在解锁时验证密码以避免删除了别人的锁\n\n![](./concurrency_methodology/1-5.png)\n\n\nTODO:解锁失败后锁回滚，心跳续命锁，etcd分布式锁\n","source":"_posts/concurrency_methodology.md","raw":"----\ntitle: 解决并发方法论\ndate: 2021-02-27\n----\n\n# 解决并发方法论\n\n[![nimoc.io](http://nimoc.io/notice/index.svg)](https://nimoc.io/notice/index.html)\n\n首先记住以下几点\n\n1. **原子性**：确认哪些操作不是原子性，考虑不是原子性会导致什么问题。并考虑所有操作都可能失败或进程/协程中断\n2. **操作延迟**：代码中每个操作的执行时间都是不确定的。每一行之间都可能出现非常大的延迟，需假设每行代码之间都有 sleep 操作。网络io中客户端收到消息的时间距离服务端发送消息已经过了很久，需假设:0s client 发起请求-> 2s server 接收请求 -> 4s server 响应数据 -> 6s client 接收响应\n3. **竞态**：考虑会有其他线程/协程/同一时间对数据进行修改\n4. 通过时序图分析问题 https://plantuml.com/zh/\n\n以 redis 互斥锁为案例实现上述方法论：\n\n先看一下不严谨的上锁操作会产生的问题\n\n\n![](./concurrency_methodology/1-1.png)\n\n可以通过 SET key value  EX seconds NX 保证原子性\n\n![](./concurrency_methodology/1-2.png)\n\n上锁操作已经解决了原子性问题，接下来看不严谨的解锁操作会产生的问题\n\n\n![](./concurrency_methodology/1-3.png)\n\n为了解决延迟导致的错误解锁，通过不严谨的超时判断解决问题\n\n> 请先不要看红色注释框,自己分析存在的问题。然后查看红色注释框确认答案\n\n![](./concurrency_methodology/1-4.png)\n\n在上锁时设置密码，在解锁时验证密码以避免删除了别人的锁\n\n![](./concurrency_methodology/1-5.png)\n\n\nTODO:解锁失败后锁回滚，心跳续命锁，etcd分布式锁\n","slug":"concurrency_methodology","published":1,"updated":"2021-02-27T07:17:05.369Z","_id":"cklndcyny0007pvu8b6v9hyvl","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"解决并发方法论\"><a href=\"#解决并发方法论\" class=\"headerlink\" title=\"解决并发方法论\"></a>解决并发方法论</h1><p><a href=\"https://nimoc.io/notice/index.html\"><img src=\"http://nimoc.io/notice/index.svg\" alt=\"nimoc.io\"></a></p>\n<p>首先记住以下几点</p>\n<ol>\n<li><strong>原子性</strong>：确认哪些操作不是原子性，考虑不是原子性会导致什么问题。并考虑所有操作都可能失败或进程/协程中断</li>\n<li><strong>操作延迟</strong>：代码中每个操作的执行时间都是不确定的。每一行之间都可能出现非常大的延迟，需假设每行代码之间都有 sleep 操作。网络io中客户端收到消息的时间距离服务端发送消息已经过了很久，需假设:0s client 发起请求-&gt; 2s server 接收请求 -&gt; 4s server 响应数据 -&gt; 6s client 接收响应</li>\n<li><strong>竞态</strong>：考虑会有其他线程/协程/同一时间对数据进行修改</li>\n<li>通过时序图分析问题 <a href=\"https://plantuml.com/zh/\">https://plantuml.com/zh/</a></li>\n</ol>\n<p>以 redis 互斥锁为案例实现上述方法论：</p>\n<p>先看一下不严谨的上锁操作会产生的问题</p>\n<p><img src=\"/./concurrency_methodology/1-1.png\"></p>\n<p>可以通过 SET key value  EX seconds NX 保证原子性</p>\n<p><img src=\"/./concurrency_methodology/1-2.png\"></p>\n<p>上锁操作已经解决了原子性问题，接下来看不严谨的解锁操作会产生的问题</p>\n<p><img src=\"/./concurrency_methodology/1-3.png\"></p>\n<p>为了解决延迟导致的错误解锁，通过不严谨的超时判断解决问题</p>\n<blockquote>\n<p>请先不要看红色注释框,自己分析存在的问题。然后查看红色注释框确认答案</p>\n</blockquote>\n<p><img src=\"/./concurrency_methodology/1-4.png\"></p>\n<p>在上锁时设置密码，在解锁时验证密码以避免删除了别人的锁</p>\n<p><img src=\"/./concurrency_methodology/1-5.png\"></p>\n<p>TODO:解锁失败后锁回滚，心跳续命锁，etcd分布式锁</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"解决并发方法论\"><a href=\"#解决并发方法论\" class=\"headerlink\" title=\"解决并发方法论\"></a>解决并发方法论</h1><p><a href=\"https://nimoc.io/notice/index.html\"><img src=\"http://nimoc.io/notice/index.svg\" alt=\"nimoc.io\"></a></p>\n<p>首先记住以下几点</p>\n<ol>\n<li><strong>原子性</strong>：确认哪些操作不是原子性，考虑不是原子性会导致什么问题。并考虑所有操作都可能失败或进程/协程中断</li>\n<li><strong>操作延迟</strong>：代码中每个操作的执行时间都是不确定的。每一行之间都可能出现非常大的延迟，需假设每行代码之间都有 sleep 操作。网络io中客户端收到消息的时间距离服务端发送消息已经过了很久，需假设:0s client 发起请求-&gt; 2s server 接收请求 -&gt; 4s server 响应数据 -&gt; 6s client 接收响应</li>\n<li><strong>竞态</strong>：考虑会有其他线程/协程/同一时间对数据进行修改</li>\n<li>通过时序图分析问题 <a href=\"https://plantuml.com/zh/\">https://plantuml.com/zh/</a></li>\n</ol>\n<p>以 redis 互斥锁为案例实现上述方法论：</p>\n<p>先看一下不严谨的上锁操作会产生的问题</p>\n<p><img src=\"/./concurrency_methodology/1-1.png\"></p>\n<p>可以通过 SET key value  EX seconds NX 保证原子性</p>\n<p><img src=\"/./concurrency_methodology/1-2.png\"></p>\n<p>上锁操作已经解决了原子性问题，接下来看不严谨的解锁操作会产生的问题</p>\n<p><img src=\"/./concurrency_methodology/1-3.png\"></p>\n<p>为了解决延迟导致的错误解锁，通过不严谨的超时判断解决问题</p>\n<blockquote>\n<p>请先不要看红色注释框,自己分析存在的问题。然后查看红色注释框确认答案</p>\n</blockquote>\n<p><img src=\"/./concurrency_methodology/1-4.png\"></p>\n<p>在上锁时设置密码，在解锁时验证密码以避免删除了别人的锁</p>\n<p><img src=\"/./concurrency_methodology/1-5.png\"></p>\n<p>TODO:解锁失败后锁回滚，心跳续命锁，etcd分布式锁</p>\n"},{"title":"Web 前端的困局与突破","date":"2020-05-10T16:00:00.000Z","_content":"\n[![nimoc.io](http://nimoc.io/notice/index.svg)](https://nimoc.io/notice/index.html)\n\n\n\n# Web 前端的困局与突破\n\n[![nimoc.io](http://nimoc.io/notice/index.svg)](https://nimoc.io/notice/index.html)\n\n> 每个Web前端都会不时思考自身对于团队的价值和在团队中的话语权,这类思考背后存在困局和突破\n\n## 困局\n\n困局必然是负能量,耐下心来了解困局后再看突破.\n\n### 价值\n\n在团队中前端的职责是实现原型和设计工作中的客户端部分,是**实现者**.很少参与功能/程序设计.极少数业务场景下是重前端的.需要前端实现可视化编辑组件(可视化创建页面/Web编辑器).这样的团队少之又少.大部分情况下前端的职责就只是实现产品设计.\n\n前端巧妙的程序设计,优秀的页面大部分情况下与商业逻辑是无关的.技术是依附于商业生存的.在客观的管理者视角看,前端是有价值的,但在技术团队中前端的价值不重要.只要把活干好了,别出错就可以了.也不需要维护管理公司命脉数据库.\n\n> 价值的意义:收入,市场竞争力都是基于价值的\n\n\n\n### 话语权\n\n从项目管理的角度看:\n\n| 岗位     | 职责                                 | 分工               |\n| -------- | ------------------------------------ | ------------------ |\n| 产品经理 | 基于市场需求表达产品界面和功能逻辑   | 需求与业务逻辑设计 |\n| UI设计   | 基于产品表达的界面进行界面设计       | 基于原型UI交互设计 |\n| 前端     | 基于产品原型与UI设计完成客户端的实现 | 实现客户端         |\n| 后端     | 数据结构与程序的设计和实现           | 程序设计与实现     |\n\n\n\n产品同事对项目有绝对的话语权,设计同事是产品同事的下游,是基于产品同事的要求完成界面设计工作.\n\n后端同事看似也是实现者,实则是**后端是程序设计者**\n\n当前端遇到上下游意见相左时,因为前端的分工是实现者,所以往往前端是没有话语权的.\n\n有些人常说的用户体验,实际上这个活是UI设计干的活,前端只需要做到快速的基于设计完成客户端开发.并保证客户端的加载性能.\n\n高流量多信息聚合的页面需要基于前端的专业意见去协作开发,不过这种情况太少了\n\n> 话语权的意义: 决定项目中与前端相关的问题能用你的专业想法解决,而不是由\"外行\"解决.\n\n\n\n### 恶劣的的工作环境\n\n1. 没有产品原型\n2. 没有设计稿\n3. 没有后端接口文档\n4. 联调阶段扯皮\n\n以上问题在很多小团队出现的特别频繁,严重影响了工作进度.\n\n前端是实现者,要基于设计去实现,基于实现去\"消费\"接口.\n\n3 4 问题是出现的最频繁的,扯皮无止境,不停的内耗.\n\n\n\n### 天花板\n\n随着三大剑客(react vue ng)的流行,基于成熟的组件库能极大的提高前端开发效率.大部分团队不需要再造适合公司业务场景的组件轮子.从业两三年就可以达到日常90%的页面开发工作是\"**机械化**\"的.大量的时间反而是解决上节说到的恶劣的工作环境\n\n前端工程管理,前端开发流程的制定,前端架构设计这些都是由前端话事人去设计和执行的.在技能水平+经验+对团队的了解程度+话语权上都应该由前端话事人去解决.大部分前端只需要遵循团队流程规范即可.\n\n\n\n### JavaScript与Node\n\n> JavaScript 是困局这一点是很多人没有意识到,也不认同的.\n\nJavaScript 过于灵活宽松让代码不易于维护.动态语言在大型项目会降低可维护性. TypeScript 的类型系统需要对JavaScript 妥协.始终让前端在语言层面无法使用类型系统方便的写出分层明确和易于维护的代码.\n\n这点不深入讨论,了解过其他强类型系统语言再来使用 TypeScript 写非常严谨容错率低的代码自然就能明白.\n\n\n\n很多团队希望使用 Node 去提升自己的话语权,殊不知必须 Node 与公司所遇到的场景和问题契合才能解决问题.\n\n不要把自己限死在 JavaScript ,前端掌握当前团队的后端语言不是啥坏事.不是每个项目都需要要SSR.都需要使用Node进行前后端分离.\n\n## 突破\n\n困局有:\n\n1. 价值\n2. 话语权\n3. 恶劣的工作环境\n4. 天花板\n5. JavaScript\n\n\n\n一句话就能说明白如何突破:\n\n**不要把自己限制在客户端的实现者,让自己参与产品程序设计,精前端,懂业务,懂后端.**\n\n### 恶劣的工作环境\n\n当**没有产品原型和设计**的情况下,正确更多的时间,去了解产品需求,使用前端界面作为\"原型\".完成部分产品没时间或者认为不重要的产品设计工作.没有设计的情况下基于成熟的UI组件,antd element 完成表单类的开发,一些交互设计自己做主设计交互细节并实现.没有设计的情况下大概率你能做主.\n\n当后端**给不到接口**时,在前端角度维护接口文档,通过接口更深入的理解程序设计.有理有据的要求后端同时配合你给到接口让你使用,因为客户端是接口消费方.如果后端给不到接口就自行模拟接口,再联调的时候再修改也无妨,这样单前端定义接口的过程就是在进行程序设计.基于客观接口进行联调,避免主观争论.\n\n善于**使用错误追踪系统**记录错误,例如 Sentry . 有理有据的去排查问题,定位问题,给出问题修复报告.防止莫名其妙背锅.\n\n> 愿你不遇到恶劣的工作环境,遇到相互配合的好同事\n\n\n\n### 天花板与JavaScript\n\n在前端角度不要局限于 Web 前端,在吃透当前工作环境时去了解其他客户端技术,比如各类小程序, IOS Android.\n\nSwift Kotlin Java 都是不错的语言,了解他们后再回头写 TypeScript 会对编程有新的认识和理解.\n\n不要局限于前端,在项目中了解目前团队的后端语言和后端知识.参与后端提供的接口中数据类型的定义,(类似 TypeScript 中的 interface).了解后端语言(PHP就算了),对项目后端的程序设计有足够了解.必要时尝试参与后端开发,先完成一些简单不重要的后端工作.\n\n大部分情况下足够努力的前端做个三五年很容易在小团队做到天花板.不考虑换工作的情况下,去向全栈发展是个很好的选择.只有掌握了程序设计才能掌握话语权.\n\n现在很多人错误的理解了全栈,认为会 node 写个编译工具就是全栈,不要局限于掌握的后端语言是 Node . 使用 Node 能免去学习一门新语言的好处没有那么重要,反而会将你局限在 JavaScript.\n\n**了解一门强类型语言,了解各种后端技术.了解其他前端领域.**\n\n\n\n### 价值与话语权\n\n吃透目前工作环境所需要使用的前端技术后,由**实现者变为程序设计者**不要将自己局限于\"页面仔\".去理解了解业务才能提升自身价值.\n\n## 总结\n\n始于前端,不局限于前端.**不要把自己限制在客户端的实现者,让自己参与产品程序设计,精前端,懂业务,懂后端.\n\n原文地址 https://github.com/nimoc/blog/issues/35 (原文保持持续更新和更多的评论)\n","source":"_posts/f2e_up.md","raw":"----\ntitle: Web 前端的困局与突破\ndate: 2020-05-11\n----\n\n[![nimoc.io](http://nimoc.io/notice/index.svg)](https://nimoc.io/notice/index.html)\n\n\n\n# Web 前端的困局与突破\n\n[![nimoc.io](http://nimoc.io/notice/index.svg)](https://nimoc.io/notice/index.html)\n\n> 每个Web前端都会不时思考自身对于团队的价值和在团队中的话语权,这类思考背后存在困局和突破\n\n## 困局\n\n困局必然是负能量,耐下心来了解困局后再看突破.\n\n### 价值\n\n在团队中前端的职责是实现原型和设计工作中的客户端部分,是**实现者**.很少参与功能/程序设计.极少数业务场景下是重前端的.需要前端实现可视化编辑组件(可视化创建页面/Web编辑器).这样的团队少之又少.大部分情况下前端的职责就只是实现产品设计.\n\n前端巧妙的程序设计,优秀的页面大部分情况下与商业逻辑是无关的.技术是依附于商业生存的.在客观的管理者视角看,前端是有价值的,但在技术团队中前端的价值不重要.只要把活干好了,别出错就可以了.也不需要维护管理公司命脉数据库.\n\n> 价值的意义:收入,市场竞争力都是基于价值的\n\n\n\n### 话语权\n\n从项目管理的角度看:\n\n| 岗位     | 职责                                 | 分工               |\n| -------- | ------------------------------------ | ------------------ |\n| 产品经理 | 基于市场需求表达产品界面和功能逻辑   | 需求与业务逻辑设计 |\n| UI设计   | 基于产品表达的界面进行界面设计       | 基于原型UI交互设计 |\n| 前端     | 基于产品原型与UI设计完成客户端的实现 | 实现客户端         |\n| 后端     | 数据结构与程序的设计和实现           | 程序设计与实现     |\n\n\n\n产品同事对项目有绝对的话语权,设计同事是产品同事的下游,是基于产品同事的要求完成界面设计工作.\n\n后端同事看似也是实现者,实则是**后端是程序设计者**\n\n当前端遇到上下游意见相左时,因为前端的分工是实现者,所以往往前端是没有话语权的.\n\n有些人常说的用户体验,实际上这个活是UI设计干的活,前端只需要做到快速的基于设计完成客户端开发.并保证客户端的加载性能.\n\n高流量多信息聚合的页面需要基于前端的专业意见去协作开发,不过这种情况太少了\n\n> 话语权的意义: 决定项目中与前端相关的问题能用你的专业想法解决,而不是由\"外行\"解决.\n\n\n\n### 恶劣的的工作环境\n\n1. 没有产品原型\n2. 没有设计稿\n3. 没有后端接口文档\n4. 联调阶段扯皮\n\n以上问题在很多小团队出现的特别频繁,严重影响了工作进度.\n\n前端是实现者,要基于设计去实现,基于实现去\"消费\"接口.\n\n3 4 问题是出现的最频繁的,扯皮无止境,不停的内耗.\n\n\n\n### 天花板\n\n随着三大剑客(react vue ng)的流行,基于成熟的组件库能极大的提高前端开发效率.大部分团队不需要再造适合公司业务场景的组件轮子.从业两三年就可以达到日常90%的页面开发工作是\"**机械化**\"的.大量的时间反而是解决上节说到的恶劣的工作环境\n\n前端工程管理,前端开发流程的制定,前端架构设计这些都是由前端话事人去设计和执行的.在技能水平+经验+对团队的了解程度+话语权上都应该由前端话事人去解决.大部分前端只需要遵循团队流程规范即可.\n\n\n\n### JavaScript与Node\n\n> JavaScript 是困局这一点是很多人没有意识到,也不认同的.\n\nJavaScript 过于灵活宽松让代码不易于维护.动态语言在大型项目会降低可维护性. TypeScript 的类型系统需要对JavaScript 妥协.始终让前端在语言层面无法使用类型系统方便的写出分层明确和易于维护的代码.\n\n这点不深入讨论,了解过其他强类型系统语言再来使用 TypeScript 写非常严谨容错率低的代码自然就能明白.\n\n\n\n很多团队希望使用 Node 去提升自己的话语权,殊不知必须 Node 与公司所遇到的场景和问题契合才能解决问题.\n\n不要把自己限死在 JavaScript ,前端掌握当前团队的后端语言不是啥坏事.不是每个项目都需要要SSR.都需要使用Node进行前后端分离.\n\n## 突破\n\n困局有:\n\n1. 价值\n2. 话语权\n3. 恶劣的工作环境\n4. 天花板\n5. JavaScript\n\n\n\n一句话就能说明白如何突破:\n\n**不要把自己限制在客户端的实现者,让自己参与产品程序设计,精前端,懂业务,懂后端.**\n\n### 恶劣的工作环境\n\n当**没有产品原型和设计**的情况下,正确更多的时间,去了解产品需求,使用前端界面作为\"原型\".完成部分产品没时间或者认为不重要的产品设计工作.没有设计的情况下基于成熟的UI组件,antd element 完成表单类的开发,一些交互设计自己做主设计交互细节并实现.没有设计的情况下大概率你能做主.\n\n当后端**给不到接口**时,在前端角度维护接口文档,通过接口更深入的理解程序设计.有理有据的要求后端同时配合你给到接口让你使用,因为客户端是接口消费方.如果后端给不到接口就自行模拟接口,再联调的时候再修改也无妨,这样单前端定义接口的过程就是在进行程序设计.基于客观接口进行联调,避免主观争论.\n\n善于**使用错误追踪系统**记录错误,例如 Sentry . 有理有据的去排查问题,定位问题,给出问题修复报告.防止莫名其妙背锅.\n\n> 愿你不遇到恶劣的工作环境,遇到相互配合的好同事\n\n\n\n### 天花板与JavaScript\n\n在前端角度不要局限于 Web 前端,在吃透当前工作环境时去了解其他客户端技术,比如各类小程序, IOS Android.\n\nSwift Kotlin Java 都是不错的语言,了解他们后再回头写 TypeScript 会对编程有新的认识和理解.\n\n不要局限于前端,在项目中了解目前团队的后端语言和后端知识.参与后端提供的接口中数据类型的定义,(类似 TypeScript 中的 interface).了解后端语言(PHP就算了),对项目后端的程序设计有足够了解.必要时尝试参与后端开发,先完成一些简单不重要的后端工作.\n\n大部分情况下足够努力的前端做个三五年很容易在小团队做到天花板.不考虑换工作的情况下,去向全栈发展是个很好的选择.只有掌握了程序设计才能掌握话语权.\n\n现在很多人错误的理解了全栈,认为会 node 写个编译工具就是全栈,不要局限于掌握的后端语言是 Node . 使用 Node 能免去学习一门新语言的好处没有那么重要,反而会将你局限在 JavaScript.\n\n**了解一门强类型语言,了解各种后端技术.了解其他前端领域.**\n\n\n\n### 价值与话语权\n\n吃透目前工作环境所需要使用的前端技术后,由**实现者变为程序设计者**不要将自己局限于\"页面仔\".去理解了解业务才能提升自身价值.\n\n## 总结\n\n始于前端,不局限于前端.**不要把自己限制在客户端的实现者,让自己参与产品程序设计,精前端,懂业务,懂后端.\n\n原文地址 https://github.com/nimoc/blog/issues/35 (原文保持持续更新和更多的评论)\n","slug":"f2e_up","published":1,"updated":"2021-02-27T07:06:02.629Z","_id":"cklndcyo20008pvu8fmy18dm0","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://nimoc.io/notice/index.html\"><img src=\"http://nimoc.io/notice/index.svg\" alt=\"nimoc.io\"></a></p>\n<h1 id=\"Web-前端的困局与突破\"><a href=\"#Web-前端的困局与突破\" class=\"headerlink\" title=\"Web 前端的困局与突破\"></a>Web 前端的困局与突破</h1><p><a href=\"https://nimoc.io/notice/index.html\"><img src=\"http://nimoc.io/notice/index.svg\" alt=\"nimoc.io\"></a></p>\n<blockquote>\n<p>每个Web前端都会不时思考自身对于团队的价值和在团队中的话语权,这类思考背后存在困局和突破</p>\n</blockquote>\n<h2 id=\"困局\"><a href=\"#困局\" class=\"headerlink\" title=\"困局\"></a>困局</h2><p>困局必然是负能量,耐下心来了解困局后再看突破.</p>\n<h3 id=\"价值\"><a href=\"#价值\" class=\"headerlink\" title=\"价值\"></a>价值</h3><p>在团队中前端的职责是实现原型和设计工作中的客户端部分,是<strong>实现者</strong>.很少参与功能/程序设计.极少数业务场景下是重前端的.需要前端实现可视化编辑组件(可视化创建页面/Web编辑器).这样的团队少之又少.大部分情况下前端的职责就只是实现产品设计.</p>\n<p>前端巧妙的程序设计,优秀的页面大部分情况下与商业逻辑是无关的.技术是依附于商业生存的.在客观的管理者视角看,前端是有价值的,但在技术团队中前端的价值不重要.只要把活干好了,别出错就可以了.也不需要维护管理公司命脉数据库.</p>\n<blockquote>\n<p>价值的意义:收入,市场竞争力都是基于价值的</p>\n</blockquote>\n<h3 id=\"话语权\"><a href=\"#话语权\" class=\"headerlink\" title=\"话语权\"></a>话语权</h3><p>从项目管理的角度看:</p>\n<table>\n<thead>\n<tr>\n<th>岗位</th>\n<th>职责</th>\n<th>分工</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>产品经理</td>\n<td>基于市场需求表达产品界面和功能逻辑</td>\n<td>需求与业务逻辑设计</td>\n</tr>\n<tr>\n<td>UI设计</td>\n<td>基于产品表达的界面进行界面设计</td>\n<td>基于原型UI交互设计</td>\n</tr>\n<tr>\n<td>前端</td>\n<td>基于产品原型与UI设计完成客户端的实现</td>\n<td>实现客户端</td>\n</tr>\n<tr>\n<td>后端</td>\n<td>数据结构与程序的设计和实现</td>\n<td>程序设计与实现</td>\n</tr>\n</tbody></table>\n<p>产品同事对项目有绝对的话语权,设计同事是产品同事的下游,是基于产品同事的要求完成界面设计工作.</p>\n<p>后端同事看似也是实现者,实则是<strong>后端是程序设计者</strong></p>\n<p>当前端遇到上下游意见相左时,因为前端的分工是实现者,所以往往前端是没有话语权的.</p>\n<p>有些人常说的用户体验,实际上这个活是UI设计干的活,前端只需要做到快速的基于设计完成客户端开发.并保证客户端的加载性能.</p>\n<p>高流量多信息聚合的页面需要基于前端的专业意见去协作开发,不过这种情况太少了</p>\n<blockquote>\n<p>话语权的意义: 决定项目中与前端相关的问题能用你的专业想法解决,而不是由”外行”解决.</p>\n</blockquote>\n<h3 id=\"恶劣的的工作环境\"><a href=\"#恶劣的的工作环境\" class=\"headerlink\" title=\"恶劣的的工作环境\"></a>恶劣的的工作环境</h3><ol>\n<li>没有产品原型</li>\n<li>没有设计稿</li>\n<li>没有后端接口文档</li>\n<li>联调阶段扯皮</li>\n</ol>\n<p>以上问题在很多小团队出现的特别频繁,严重影响了工作进度.</p>\n<p>前端是实现者,要基于设计去实现,基于实现去”消费”接口.</p>\n<p>3 4 问题是出现的最频繁的,扯皮无止境,不停的内耗.</p>\n<h3 id=\"天花板\"><a href=\"#天花板\" class=\"headerlink\" title=\"天花板\"></a>天花板</h3><p>随着三大剑客(react vue ng)的流行,基于成熟的组件库能极大的提高前端开发效率.大部分团队不需要再造适合公司业务场景的组件轮子.从业两三年就可以达到日常90%的页面开发工作是”<strong>机械化</strong>“的.大量的时间反而是解决上节说到的恶劣的工作环境</p>\n<p>前端工程管理,前端开发流程的制定,前端架构设计这些都是由前端话事人去设计和执行的.在技能水平+经验+对团队的了解程度+话语权上都应该由前端话事人去解决.大部分前端只需要遵循团队流程规范即可.</p>\n<h3 id=\"JavaScript与Node\"><a href=\"#JavaScript与Node\" class=\"headerlink\" title=\"JavaScript与Node\"></a>JavaScript与Node</h3><blockquote>\n<p>JavaScript 是困局这一点是很多人没有意识到,也不认同的.</p>\n</blockquote>\n<p>JavaScript 过于灵活宽松让代码不易于维护.动态语言在大型项目会降低可维护性. TypeScript 的类型系统需要对JavaScript 妥协.始终让前端在语言层面无法使用类型系统方便的写出分层明确和易于维护的代码.</p>\n<p>这点不深入讨论,了解过其他强类型系统语言再来使用 TypeScript 写非常严谨容错率低的代码自然就能明白.</p>\n<p>很多团队希望使用 Node 去提升自己的话语权,殊不知必须 Node 与公司所遇到的场景和问题契合才能解决问题.</p>\n<p>不要把自己限死在 JavaScript ,前端掌握当前团队的后端语言不是啥坏事.不是每个项目都需要要SSR.都需要使用Node进行前后端分离.</p>\n<h2 id=\"突破\"><a href=\"#突破\" class=\"headerlink\" title=\"突破\"></a>突破</h2><p>困局有:</p>\n<ol>\n<li>价值</li>\n<li>话语权</li>\n<li>恶劣的工作环境</li>\n<li>天花板</li>\n<li>JavaScript</li>\n</ol>\n<p>一句话就能说明白如何突破:</p>\n<p><strong>不要把自己限制在客户端的实现者,让自己参与产品程序设计,精前端,懂业务,懂后端.</strong></p>\n<h3 id=\"恶劣的工作环境\"><a href=\"#恶劣的工作环境\" class=\"headerlink\" title=\"恶劣的工作环境\"></a>恶劣的工作环境</h3><p>当<strong>没有产品原型和设计</strong>的情况下,正确更多的时间,去了解产品需求,使用前端界面作为”原型”.完成部分产品没时间或者认为不重要的产品设计工作.没有设计的情况下基于成熟的UI组件,antd element 完成表单类的开发,一些交互设计自己做主设计交互细节并实现.没有设计的情况下大概率你能做主.</p>\n<p>当后端<strong>给不到接口</strong>时,在前端角度维护接口文档,通过接口更深入的理解程序设计.有理有据的要求后端同时配合你给到接口让你使用,因为客户端是接口消费方.如果后端给不到接口就自行模拟接口,再联调的时候再修改也无妨,这样单前端定义接口的过程就是在进行程序设计.基于客观接口进行联调,避免主观争论.</p>\n<p>善于<strong>使用错误追踪系统</strong>记录错误,例如 Sentry . 有理有据的去排查问题,定位问题,给出问题修复报告.防止莫名其妙背锅.</p>\n<blockquote>\n<p>愿你不遇到恶劣的工作环境,遇到相互配合的好同事</p>\n</blockquote>\n<h3 id=\"天花板与JavaScript\"><a href=\"#天花板与JavaScript\" class=\"headerlink\" title=\"天花板与JavaScript\"></a>天花板与JavaScript</h3><p>在前端角度不要局限于 Web 前端,在吃透当前工作环境时去了解其他客户端技术,比如各类小程序, IOS Android.</p>\n<p>Swift Kotlin Java 都是不错的语言,了解他们后再回头写 TypeScript 会对编程有新的认识和理解.</p>\n<p>不要局限于前端,在项目中了解目前团队的后端语言和后端知识.参与后端提供的接口中数据类型的定义,(类似 TypeScript 中的 interface).了解后端语言(PHP就算了),对项目后端的程序设计有足够了解.必要时尝试参与后端开发,先完成一些简单不重要的后端工作.</p>\n<p>大部分情况下足够努力的前端做个三五年很容易在小团队做到天花板.不考虑换工作的情况下,去向全栈发展是个很好的选择.只有掌握了程序设计才能掌握话语权.</p>\n<p>现在很多人错误的理解了全栈,认为会 node 写个编译工具就是全栈,不要局限于掌握的后端语言是 Node . 使用 Node 能免去学习一门新语言的好处没有那么重要,反而会将你局限在 JavaScript.</p>\n<p><strong>了解一门强类型语言,了解各种后端技术.了解其他前端领域.</strong></p>\n<h3 id=\"价值与话语权\"><a href=\"#价值与话语权\" class=\"headerlink\" title=\"价值与话语权\"></a>价值与话语权</h3><p>吃透目前工作环境所需要使用的前端技术后,由<strong>实现者变为程序设计者</strong>不要将自己局限于”页面仔”.去理解了解业务才能提升自身价值.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>始于前端,不局限于前端.**不要把自己限制在客户端的实现者,让自己参与产品程序设计,精前端,懂业务,懂后端.</p>\n<p>原文地址 <a href=\"https://github.com/nimoc/blog/issues/35\">https://github.com/nimoc/blog/issues/35</a> (原文保持持续更新和更多的评论)</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://nimoc.io/notice/index.html\"><img src=\"http://nimoc.io/notice/index.svg\" alt=\"nimoc.io\"></a></p>\n<h1 id=\"Web-前端的困局与突破\"><a href=\"#Web-前端的困局与突破\" class=\"headerlink\" title=\"Web 前端的困局与突破\"></a>Web 前端的困局与突破</h1><p><a href=\"https://nimoc.io/notice/index.html\"><img src=\"http://nimoc.io/notice/index.svg\" alt=\"nimoc.io\"></a></p>\n<blockquote>\n<p>每个Web前端都会不时思考自身对于团队的价值和在团队中的话语权,这类思考背后存在困局和突破</p>\n</blockquote>\n<h2 id=\"困局\"><a href=\"#困局\" class=\"headerlink\" title=\"困局\"></a>困局</h2><p>困局必然是负能量,耐下心来了解困局后再看突破.</p>\n<h3 id=\"价值\"><a href=\"#价值\" class=\"headerlink\" title=\"价值\"></a>价值</h3><p>在团队中前端的职责是实现原型和设计工作中的客户端部分,是<strong>实现者</strong>.很少参与功能/程序设计.极少数业务场景下是重前端的.需要前端实现可视化编辑组件(可视化创建页面/Web编辑器).这样的团队少之又少.大部分情况下前端的职责就只是实现产品设计.</p>\n<p>前端巧妙的程序设计,优秀的页面大部分情况下与商业逻辑是无关的.技术是依附于商业生存的.在客观的管理者视角看,前端是有价值的,但在技术团队中前端的价值不重要.只要把活干好了,别出错就可以了.也不需要维护管理公司命脉数据库.</p>\n<blockquote>\n<p>价值的意义:收入,市场竞争力都是基于价值的</p>\n</blockquote>\n<h3 id=\"话语权\"><a href=\"#话语权\" class=\"headerlink\" title=\"话语权\"></a>话语权</h3><p>从项目管理的角度看:</p>\n<table>\n<thead>\n<tr>\n<th>岗位</th>\n<th>职责</th>\n<th>分工</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>产品经理</td>\n<td>基于市场需求表达产品界面和功能逻辑</td>\n<td>需求与业务逻辑设计</td>\n</tr>\n<tr>\n<td>UI设计</td>\n<td>基于产品表达的界面进行界面设计</td>\n<td>基于原型UI交互设计</td>\n</tr>\n<tr>\n<td>前端</td>\n<td>基于产品原型与UI设计完成客户端的实现</td>\n<td>实现客户端</td>\n</tr>\n<tr>\n<td>后端</td>\n<td>数据结构与程序的设计和实现</td>\n<td>程序设计与实现</td>\n</tr>\n</tbody></table>\n<p>产品同事对项目有绝对的话语权,设计同事是产品同事的下游,是基于产品同事的要求完成界面设计工作.</p>\n<p>后端同事看似也是实现者,实则是<strong>后端是程序设计者</strong></p>\n<p>当前端遇到上下游意见相左时,因为前端的分工是实现者,所以往往前端是没有话语权的.</p>\n<p>有些人常说的用户体验,实际上这个活是UI设计干的活,前端只需要做到快速的基于设计完成客户端开发.并保证客户端的加载性能.</p>\n<p>高流量多信息聚合的页面需要基于前端的专业意见去协作开发,不过这种情况太少了</p>\n<blockquote>\n<p>话语权的意义: 决定项目中与前端相关的问题能用你的专业想法解决,而不是由”外行”解决.</p>\n</blockquote>\n<h3 id=\"恶劣的的工作环境\"><a href=\"#恶劣的的工作环境\" class=\"headerlink\" title=\"恶劣的的工作环境\"></a>恶劣的的工作环境</h3><ol>\n<li>没有产品原型</li>\n<li>没有设计稿</li>\n<li>没有后端接口文档</li>\n<li>联调阶段扯皮</li>\n</ol>\n<p>以上问题在很多小团队出现的特别频繁,严重影响了工作进度.</p>\n<p>前端是实现者,要基于设计去实现,基于实现去”消费”接口.</p>\n<p>3 4 问题是出现的最频繁的,扯皮无止境,不停的内耗.</p>\n<h3 id=\"天花板\"><a href=\"#天花板\" class=\"headerlink\" title=\"天花板\"></a>天花板</h3><p>随着三大剑客(react vue ng)的流行,基于成熟的组件库能极大的提高前端开发效率.大部分团队不需要再造适合公司业务场景的组件轮子.从业两三年就可以达到日常90%的页面开发工作是”<strong>机械化</strong>“的.大量的时间反而是解决上节说到的恶劣的工作环境</p>\n<p>前端工程管理,前端开发流程的制定,前端架构设计这些都是由前端话事人去设计和执行的.在技能水平+经验+对团队的了解程度+话语权上都应该由前端话事人去解决.大部分前端只需要遵循团队流程规范即可.</p>\n<h3 id=\"JavaScript与Node\"><a href=\"#JavaScript与Node\" class=\"headerlink\" title=\"JavaScript与Node\"></a>JavaScript与Node</h3><blockquote>\n<p>JavaScript 是困局这一点是很多人没有意识到,也不认同的.</p>\n</blockquote>\n<p>JavaScript 过于灵活宽松让代码不易于维护.动态语言在大型项目会降低可维护性. TypeScript 的类型系统需要对JavaScript 妥协.始终让前端在语言层面无法使用类型系统方便的写出分层明确和易于维护的代码.</p>\n<p>这点不深入讨论,了解过其他强类型系统语言再来使用 TypeScript 写非常严谨容错率低的代码自然就能明白.</p>\n<p>很多团队希望使用 Node 去提升自己的话语权,殊不知必须 Node 与公司所遇到的场景和问题契合才能解决问题.</p>\n<p>不要把自己限死在 JavaScript ,前端掌握当前团队的后端语言不是啥坏事.不是每个项目都需要要SSR.都需要使用Node进行前后端分离.</p>\n<h2 id=\"突破\"><a href=\"#突破\" class=\"headerlink\" title=\"突破\"></a>突破</h2><p>困局有:</p>\n<ol>\n<li>价值</li>\n<li>话语权</li>\n<li>恶劣的工作环境</li>\n<li>天花板</li>\n<li>JavaScript</li>\n</ol>\n<p>一句话就能说明白如何突破:</p>\n<p><strong>不要把自己限制在客户端的实现者,让自己参与产品程序设计,精前端,懂业务,懂后端.</strong></p>\n<h3 id=\"恶劣的工作环境\"><a href=\"#恶劣的工作环境\" class=\"headerlink\" title=\"恶劣的工作环境\"></a>恶劣的工作环境</h3><p>当<strong>没有产品原型和设计</strong>的情况下,正确更多的时间,去了解产品需求,使用前端界面作为”原型”.完成部分产品没时间或者认为不重要的产品设计工作.没有设计的情况下基于成熟的UI组件,antd element 完成表单类的开发,一些交互设计自己做主设计交互细节并实现.没有设计的情况下大概率你能做主.</p>\n<p>当后端<strong>给不到接口</strong>时,在前端角度维护接口文档,通过接口更深入的理解程序设计.有理有据的要求后端同时配合你给到接口让你使用,因为客户端是接口消费方.如果后端给不到接口就自行模拟接口,再联调的时候再修改也无妨,这样单前端定义接口的过程就是在进行程序设计.基于客观接口进行联调,避免主观争论.</p>\n<p>善于<strong>使用错误追踪系统</strong>记录错误,例如 Sentry . 有理有据的去排查问题,定位问题,给出问题修复报告.防止莫名其妙背锅.</p>\n<blockquote>\n<p>愿你不遇到恶劣的工作环境,遇到相互配合的好同事</p>\n</blockquote>\n<h3 id=\"天花板与JavaScript\"><a href=\"#天花板与JavaScript\" class=\"headerlink\" title=\"天花板与JavaScript\"></a>天花板与JavaScript</h3><p>在前端角度不要局限于 Web 前端,在吃透当前工作环境时去了解其他客户端技术,比如各类小程序, IOS Android.</p>\n<p>Swift Kotlin Java 都是不错的语言,了解他们后再回头写 TypeScript 会对编程有新的认识和理解.</p>\n<p>不要局限于前端,在项目中了解目前团队的后端语言和后端知识.参与后端提供的接口中数据类型的定义,(类似 TypeScript 中的 interface).了解后端语言(PHP就算了),对项目后端的程序设计有足够了解.必要时尝试参与后端开发,先完成一些简单不重要的后端工作.</p>\n<p>大部分情况下足够努力的前端做个三五年很容易在小团队做到天花板.不考虑换工作的情况下,去向全栈发展是个很好的选择.只有掌握了程序设计才能掌握话语权.</p>\n<p>现在很多人错误的理解了全栈,认为会 node 写个编译工具就是全栈,不要局限于掌握的后端语言是 Node . 使用 Node 能免去学习一门新语言的好处没有那么重要,反而会将你局限在 JavaScript.</p>\n<p><strong>了解一门强类型语言,了解各种后端技术.了解其他前端领域.</strong></p>\n<h3 id=\"价值与话语权\"><a href=\"#价值与话语权\" class=\"headerlink\" title=\"价值与话语权\"></a>价值与话语权</h3><p>吃透目前工作环境所需要使用的前端技术后,由<strong>实现者变为程序设计者</strong>不要将自己局限于”页面仔”.去理解了解业务才能提升自身价值.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>始于前端,不局限于前端.**不要把自己限制在客户端的实现者,让自己参与产品程序设计,精前端,懂业务,懂后端.</p>\n<p>原文地址 <a href=\"https://github.com/nimoc/blog/issues/35\">https://github.com/nimoc/blog/issues/35</a> (原文保持持续更新和更多的评论)</p>\n"},{"title":"缓存实践","date":"2021-02-26T16:00:00.000Z","_content":"\n# 缓存实践\n\n[![nimoc.io](http://nimoc.io/notice/index.svg)](https://nimoc.io/notice/index.html)\n\n本文将完整介绍以下知识点：\n\n1. 读多写少\n2. 读多写多\n3. 缓存与数据库的一致性\n\n\n## 读多写少\n\n\n### 不使用缓存\n\n例如我们在开发提问系统，提问访问量非常大，每秒一万次访问。\n\n最开始的伪代码如下：\n\n```javascript\nfunction QuestionByID(id) {\n  row = SQLQuery(\"SELECT title, describe FROM question WHERE id = ? LIMIT 1\")\n  if row == null {\n    return {\n      type: \"fail\",\n      msg : \"数据不存在\"，\n    }\n  }\n  return {\n    title: row.title,\n    describe: row.describe,\n  }\n}\n```\n\n上线后发现数据库压力过大，服务延迟非常高，\n\n## 使用缓存\n\n为了解决次问题，使用缓存减少频繁的 sql 操作。\n\n缓存设计方式如下：\n\n```\n第一个请求：查询缓存 > 缓存不存在 > 查询数据库 > 将数据写入缓存 > 响应数据\n第二个请求：查询缓存 > 缓存存在 > 响应数据\n```\n\n![](./cache_practice/1-1.png)\n\n\n\n修改后的伪代码如下：\n\n```javascript\nfunction QuestionByID(id) {\n  cacheKey = \"question:\" + id\n  cache = Redis(\"HGETALL\", cacheKey, )\n  // 判断缓存是否存在\n  if (cache == nil) {\n    // 查询数据库\n    row = SQLQuery(\"SELECT title, describe FROM question WHERE id = ? LIMIT 1\")\n    if row == null {\n      return {\n        type: \"fail\",\n        msg : \"数据不存在\"，\n      }\n    }\n    // 将数据库的数据同步到缓存\n    Redis(\"HSET\", cacheKey, \"title\", row.title, \"describe\", row.describe, \"cache_expire_uinx_seconds\", time.Now().Add(time.Secound*120).Unix()) row.describe)\n    // 响应数据\n    return {\n      title: cache.title,\n      describe: cache.describe,\n    }\n  }\n  // 响应缓存数据\n  return {\n    title: cache.title,\n    describe: cache.describe,\n  }\n}\n```\n\n\n> redis hash 的 feild 无法设置过期时间，可以通过定时任务使用 hscan 去检测 cache_expire_uinx_seconds 来实现 field 过期时间\n\n### 缓存击穿\n\n重新发布后，数据库压力大幅度减少。但部分新问题发布后还是会出现几秒短暂的sql连接数暴增。\n\n原因是一些粉丝量很大的用户发布提问后大量用户涌入，在缓存还没来得及同步时出现大量sql查询。这种情况叫**缓存击穿**\n\n为了解决这种情况，需要使用分布式互斥锁避免出现一个提问出现大量同步缓存操作。\n\n> 分布式互斥锁需要保证上锁和解锁都是原子性，在解锁时不要意外的解锁了其他线程/协程/机器上的锁和处理解锁时锁过期。本文不深入互斥锁。[互斥锁文章](https://github.com/search?q=user%3Animoc+%E4%BA%92%E6%96%A5%E9%94%81)\n\n\n```\n第一个请求：查询缓存 > 缓存不存在 > 尝试上锁 > 上锁成功 > 查询数据库 > 将数据写入缓存 > 响应数据\n第一个请求：查询缓存 > 缓存不存在 > 尝试上锁 > 上锁失败 > 延迟1秒后重试查询\n第二个请求：查询缓存 > 缓存存在 > 响应数据\n```\n\n\n![](./cache_practice/1-2.png)\n\n\n修改后的伪代码如下：\n\n```javascript\nfunction QuestionByID(id string, retry int) {\n  // （可暂时跳过这一段 if 代码）为防止意外多次重试出现死循环，增加中断条件\n  if (retry > 2) {\n    return {\n      type: \"fail\",\n      message: \"提问获取失败，请重试。\"\n    }\n  }\n  cacheKey = \"question:\" + id cache = Redis(\"HGETALL\", cacheKey, )\n\n  if (cache == nil) {\n    // 互斥锁\n    lockKey = \"question_sync_cache:\" + id lockSuccess,\n    Unlock = Lock(lockKey, {\n      ExpireSeconds: 3\n    }) if (lockSuccess == false) {\n      // 锁被占用时等待1秒\n      SleepSeconds(1)\n      // 再次调用 QuestionByID 重试查询，因为根据测试结果1秒的时间足够同步缓存完成。\n      return QuestionByID(id, retry + 1)\n    }\n\n    row = SQLQuery(\"SELECT title, describe FROM question WHERE id = ? LIMIT 1\")\n    if row == null {\n      return {\n        type: \"fail\",\n        msg : \"数据不存在\"，\n      }\n    }\n    Redis(\"HSET\", cacheKey, \"title\", row.title, \"describe\", row.describe, \"cache_expire_uinx_seconds\", time.Now().Add(time.Secound*120).Unix())\n    unlockSuccess = Unlock()\n    // 解锁失败\n    if (unlockSuccess == false) {\n      // 再次调用 QuestionByID 重试查询\n      return QuestionByID(id, retry + 1)\n    }\n    return {\n      title: cache.title,\n      describe: cache.describe,\n    }\n  }\n  return {\n    title: cache.title,\n    describe: cache.describe,\n  }\n}\n```\n\n\n当有新提问被大量并发访问时，只有一个请求会进入查询 SQL的逻辑，其他请求会等待一秒后重试。如果第一个请求因为各种原因导致没有能成功更新缓存，还会有其他请求重新加锁并更新缓存。\n\n在一种极端情况下：有出现大量的请求，成功上锁的那一个请求在上锁后因为各种原因线程中断了，导致没有解锁。此时会出现3秒内所有 QuestionByID 都不能响应数据。但这种情况出现的几率非常小，可根据业务场景来判断是否可以忽略。\n\n### 缓存穿透\n\n发布运行一段时间后一切正常，偶尔有一天发现当粉丝量很大的用户发布提问后又理解删除提问。发布提问时候推送消息已经推送到很多用户的手机中，用户阅读消息并点击访问提问。会进入如下流程：\n\n![](./cache_practice/1-3.png?=3)\n\n如图所示，所有的用户请求都进入了红色框线路。即使在同步缓存时使用互斥锁去减少数据库压力。在第一个上锁成功的用户没查到数据并解锁后还会有新的用户上锁>查询数据库->响应无数据。这就导致了**缓存穿透**\n\n> 数据不存在原因可能是正常删除，也可能是意外删除，也可能是恶意攻击。\n\n为了解决缓存穿透，需要在查询到不存在的数据时在缓存中标记数据不存在，以避免缓存穿透。\n\n![](./cache_practice/1-4.png)\n\n![](./cache_practice/1-5.png)\n\n```js\nfunction QuestionByID(id string, retry int) {\n  // （可暂时跳过这一段 if 代码）为防止意外多次重试出现死循环，增加中断条件\n  if (retry > 2) {\n    return {\n      type: \"fail\",\n      message: \"数据获取失败，请重试。\"\n    }\n  }\n  cacheKey = \"question:\" + id cache = Redis(\"HGETALL\", cacheKey, )\n\n  if (cache == nil) {\n    // 在缓存中查询是否是无效数据\n    invalid = RedisCommand(\"HGET\", \"question_invalid\", id)\n    if (invalid) {\n      return {\n        type: \"fail\",\n        msg : \"数据不存在\"，\n      }\n    }\n    lockKey = \"question_sync_cache:\" + id lockSuccess,\n    Unlock = Lock(lockKey, {\n      ExpireSeconds: 3\n    }) if (lockSuccess == false) {\n      SleepSeconds(1)\n      return QuestionByID(id, retry + 1)\n    }\n\n    row = SQLQuery(\"SELECT title, describe FROM question WHERE id = ? LIMIT 1\")\n    if row == null {\n      // 标记无效数据\n      invalid = RedisCommand(\"HSET\", \"question_invalid\", id, time.Now().Add(time.Secound*120).Unix())\n      // 值设为无效标记超时时间，便于 HSCAN 清除数据\n      return {\n        type: \"fail\",\n        msg : \"数据不存在\"，\n      }\n    }\n    Redis(\"HSET\", cacheKey, \"title\", row.title, \"describe\", row.describe, \"cache_expire_uinx_seconds\", time.Now().Add(time.Secound*120).Unix())\n    unlockSuccess = Unlock()\n    if (unlockSuccess == false) {\n      return QuestionByID(id, retry + 1)\n    }\n    return {\n      title: cache.title,\n      describe: cache.describe,\n    }\n  }\n  return {\n    title: cache.title,\n    describe: cache.describe,\n  }\n}\n```\n\n当数据量非常大时 hash 存储无效id会导致缓存数据过大，可以使用[布隆过滤器](https://www.dogedoge.com/results?q=%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8) 降低缓存大小。可以根据实际情况选择合适的方式。\n\n### 删除旧数据的缓存\n\n**带着以下思路去思考数据一致性和并发问题**\n\n1. **行间延迟**：每个操作之间都能出现非常大的延迟（需假设每行代码之间都有 sleep 操作）\n2. **原子性**：确认哪些操作不是原子性，考虑不是原子性会导致什么问题。\n3. **并发**：考虑会有其他线程/协程/机器同一时间对数据进行修改\n\n![](./cache_practice/1-6.png)\n\n---\n\n![](./cache_practice/1-7.png)\n\n---\n\n![](./cache_practice/1-8.png)\n\n---\n\n![](./cache_practice/1-9.png)\n\n---\n\n因为缓存存储系统和持久化数据存储系统都是不同的服务提供的（mysql redis）所以无法保证原子性，无法保证原子性就无法保证数据一致。只能通过各种补偿机制保证数据最终一致性，在极端情况下依然无法保证数据一致性。但好在很多场景并不需要实现绝对的数据一致性，允许极端情况下出现短暂的数据不一致。\n","source":"_posts/cache_practice.md","raw":"----\ntitle: 缓存实践\ndate: 2021-02-27\n----\n\n# 缓存实践\n\n[![nimoc.io](http://nimoc.io/notice/index.svg)](https://nimoc.io/notice/index.html)\n\n本文将完整介绍以下知识点：\n\n1. 读多写少\n2. 读多写多\n3. 缓存与数据库的一致性\n\n\n## 读多写少\n\n\n### 不使用缓存\n\n例如我们在开发提问系统，提问访问量非常大，每秒一万次访问。\n\n最开始的伪代码如下：\n\n```javascript\nfunction QuestionByID(id) {\n  row = SQLQuery(\"SELECT title, describe FROM question WHERE id = ? LIMIT 1\")\n  if row == null {\n    return {\n      type: \"fail\",\n      msg : \"数据不存在\"，\n    }\n  }\n  return {\n    title: row.title,\n    describe: row.describe,\n  }\n}\n```\n\n上线后发现数据库压力过大，服务延迟非常高，\n\n## 使用缓存\n\n为了解决次问题，使用缓存减少频繁的 sql 操作。\n\n缓存设计方式如下：\n\n```\n第一个请求：查询缓存 > 缓存不存在 > 查询数据库 > 将数据写入缓存 > 响应数据\n第二个请求：查询缓存 > 缓存存在 > 响应数据\n```\n\n![](./cache_practice/1-1.png)\n\n\n\n修改后的伪代码如下：\n\n```javascript\nfunction QuestionByID(id) {\n  cacheKey = \"question:\" + id\n  cache = Redis(\"HGETALL\", cacheKey, )\n  // 判断缓存是否存在\n  if (cache == nil) {\n    // 查询数据库\n    row = SQLQuery(\"SELECT title, describe FROM question WHERE id = ? LIMIT 1\")\n    if row == null {\n      return {\n        type: \"fail\",\n        msg : \"数据不存在\"，\n      }\n    }\n    // 将数据库的数据同步到缓存\n    Redis(\"HSET\", cacheKey, \"title\", row.title, \"describe\", row.describe, \"cache_expire_uinx_seconds\", time.Now().Add(time.Secound*120).Unix()) row.describe)\n    // 响应数据\n    return {\n      title: cache.title,\n      describe: cache.describe,\n    }\n  }\n  // 响应缓存数据\n  return {\n    title: cache.title,\n    describe: cache.describe,\n  }\n}\n```\n\n\n> redis hash 的 feild 无法设置过期时间，可以通过定时任务使用 hscan 去检测 cache_expire_uinx_seconds 来实现 field 过期时间\n\n### 缓存击穿\n\n重新发布后，数据库压力大幅度减少。但部分新问题发布后还是会出现几秒短暂的sql连接数暴增。\n\n原因是一些粉丝量很大的用户发布提问后大量用户涌入，在缓存还没来得及同步时出现大量sql查询。这种情况叫**缓存击穿**\n\n为了解决这种情况，需要使用分布式互斥锁避免出现一个提问出现大量同步缓存操作。\n\n> 分布式互斥锁需要保证上锁和解锁都是原子性，在解锁时不要意外的解锁了其他线程/协程/机器上的锁和处理解锁时锁过期。本文不深入互斥锁。[互斥锁文章](https://github.com/search?q=user%3Animoc+%E4%BA%92%E6%96%A5%E9%94%81)\n\n\n```\n第一个请求：查询缓存 > 缓存不存在 > 尝试上锁 > 上锁成功 > 查询数据库 > 将数据写入缓存 > 响应数据\n第一个请求：查询缓存 > 缓存不存在 > 尝试上锁 > 上锁失败 > 延迟1秒后重试查询\n第二个请求：查询缓存 > 缓存存在 > 响应数据\n```\n\n\n![](./cache_practice/1-2.png)\n\n\n修改后的伪代码如下：\n\n```javascript\nfunction QuestionByID(id string, retry int) {\n  // （可暂时跳过这一段 if 代码）为防止意外多次重试出现死循环，增加中断条件\n  if (retry > 2) {\n    return {\n      type: \"fail\",\n      message: \"提问获取失败，请重试。\"\n    }\n  }\n  cacheKey = \"question:\" + id cache = Redis(\"HGETALL\", cacheKey, )\n\n  if (cache == nil) {\n    // 互斥锁\n    lockKey = \"question_sync_cache:\" + id lockSuccess,\n    Unlock = Lock(lockKey, {\n      ExpireSeconds: 3\n    }) if (lockSuccess == false) {\n      // 锁被占用时等待1秒\n      SleepSeconds(1)\n      // 再次调用 QuestionByID 重试查询，因为根据测试结果1秒的时间足够同步缓存完成。\n      return QuestionByID(id, retry + 1)\n    }\n\n    row = SQLQuery(\"SELECT title, describe FROM question WHERE id = ? LIMIT 1\")\n    if row == null {\n      return {\n        type: \"fail\",\n        msg : \"数据不存在\"，\n      }\n    }\n    Redis(\"HSET\", cacheKey, \"title\", row.title, \"describe\", row.describe, \"cache_expire_uinx_seconds\", time.Now().Add(time.Secound*120).Unix())\n    unlockSuccess = Unlock()\n    // 解锁失败\n    if (unlockSuccess == false) {\n      // 再次调用 QuestionByID 重试查询\n      return QuestionByID(id, retry + 1)\n    }\n    return {\n      title: cache.title,\n      describe: cache.describe,\n    }\n  }\n  return {\n    title: cache.title,\n    describe: cache.describe,\n  }\n}\n```\n\n\n当有新提问被大量并发访问时，只有一个请求会进入查询 SQL的逻辑，其他请求会等待一秒后重试。如果第一个请求因为各种原因导致没有能成功更新缓存，还会有其他请求重新加锁并更新缓存。\n\n在一种极端情况下：有出现大量的请求，成功上锁的那一个请求在上锁后因为各种原因线程中断了，导致没有解锁。此时会出现3秒内所有 QuestionByID 都不能响应数据。但这种情况出现的几率非常小，可根据业务场景来判断是否可以忽略。\n\n### 缓存穿透\n\n发布运行一段时间后一切正常，偶尔有一天发现当粉丝量很大的用户发布提问后又理解删除提问。发布提问时候推送消息已经推送到很多用户的手机中，用户阅读消息并点击访问提问。会进入如下流程：\n\n![](./cache_practice/1-3.png?=3)\n\n如图所示，所有的用户请求都进入了红色框线路。即使在同步缓存时使用互斥锁去减少数据库压力。在第一个上锁成功的用户没查到数据并解锁后还会有新的用户上锁>查询数据库->响应无数据。这就导致了**缓存穿透**\n\n> 数据不存在原因可能是正常删除，也可能是意外删除，也可能是恶意攻击。\n\n为了解决缓存穿透，需要在查询到不存在的数据时在缓存中标记数据不存在，以避免缓存穿透。\n\n![](./cache_practice/1-4.png)\n\n![](./cache_practice/1-5.png)\n\n```js\nfunction QuestionByID(id string, retry int) {\n  // （可暂时跳过这一段 if 代码）为防止意外多次重试出现死循环，增加中断条件\n  if (retry > 2) {\n    return {\n      type: \"fail\",\n      message: \"数据获取失败，请重试。\"\n    }\n  }\n  cacheKey = \"question:\" + id cache = Redis(\"HGETALL\", cacheKey, )\n\n  if (cache == nil) {\n    // 在缓存中查询是否是无效数据\n    invalid = RedisCommand(\"HGET\", \"question_invalid\", id)\n    if (invalid) {\n      return {\n        type: \"fail\",\n        msg : \"数据不存在\"，\n      }\n    }\n    lockKey = \"question_sync_cache:\" + id lockSuccess,\n    Unlock = Lock(lockKey, {\n      ExpireSeconds: 3\n    }) if (lockSuccess == false) {\n      SleepSeconds(1)\n      return QuestionByID(id, retry + 1)\n    }\n\n    row = SQLQuery(\"SELECT title, describe FROM question WHERE id = ? LIMIT 1\")\n    if row == null {\n      // 标记无效数据\n      invalid = RedisCommand(\"HSET\", \"question_invalid\", id, time.Now().Add(time.Secound*120).Unix())\n      // 值设为无效标记超时时间，便于 HSCAN 清除数据\n      return {\n        type: \"fail\",\n        msg : \"数据不存在\"，\n      }\n    }\n    Redis(\"HSET\", cacheKey, \"title\", row.title, \"describe\", row.describe, \"cache_expire_uinx_seconds\", time.Now().Add(time.Secound*120).Unix())\n    unlockSuccess = Unlock()\n    if (unlockSuccess == false) {\n      return QuestionByID(id, retry + 1)\n    }\n    return {\n      title: cache.title,\n      describe: cache.describe,\n    }\n  }\n  return {\n    title: cache.title,\n    describe: cache.describe,\n  }\n}\n```\n\n当数据量非常大时 hash 存储无效id会导致缓存数据过大，可以使用[布隆过滤器](https://www.dogedoge.com/results?q=%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8) 降低缓存大小。可以根据实际情况选择合适的方式。\n\n### 删除旧数据的缓存\n\n**带着以下思路去思考数据一致性和并发问题**\n\n1. **行间延迟**：每个操作之间都能出现非常大的延迟（需假设每行代码之间都有 sleep 操作）\n2. **原子性**：确认哪些操作不是原子性，考虑不是原子性会导致什么问题。\n3. **并发**：考虑会有其他线程/协程/机器同一时间对数据进行修改\n\n![](./cache_practice/1-6.png)\n\n---\n\n![](./cache_practice/1-7.png)\n\n---\n\n![](./cache_practice/1-8.png)\n\n---\n\n![](./cache_practice/1-9.png)\n\n---\n\n因为缓存存储系统和持久化数据存储系统都是不同的服务提供的（mysql redis）所以无法保证原子性，无法保证原子性就无法保证数据一致。只能通过各种补偿机制保证数据最终一致性，在极端情况下依然无法保证数据一致性。但好在很多场景并不需要实现绝对的数据一致性，允许极端情况下出现短暂的数据不一致。\n","slug":"cache_practice","published":1,"updated":"2021-02-27T07:06:33.829Z","_id":"cklndfldh0009pvu88xdm8ftw","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"缓存实践\"><a href=\"#缓存实践\" class=\"headerlink\" title=\"缓存实践\"></a>缓存实践</h1><p><a href=\"https://nimoc.io/notice/index.html\"><img src=\"http://nimoc.io/notice/index.svg\" alt=\"nimoc.io\"></a></p>\n<p>本文将完整介绍以下知识点：</p>\n<ol>\n<li>读多写少</li>\n<li>读多写多</li>\n<li>缓存与数据库的一致性</li>\n</ol>\n<h2 id=\"读多写少\"><a href=\"#读多写少\" class=\"headerlink\" title=\"读多写少\"></a>读多写少</h2><h3 id=\"不使用缓存\"><a href=\"#不使用缓存\" class=\"headerlink\" title=\"不使用缓存\"></a>不使用缓存</h3><p>例如我们在开发提问系统，提问访问量非常大，每秒一万次访问。</p>\n<p>最开始的伪代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">QuestionByID</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  row = SQLQuery(<span class=\"string\">&quot;SELECT title, describe FROM question WHERE id = ? LIMIT 1&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> row == <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      type: <span class=\"string\">&quot;fail&quot;</span>,</span><br><span class=\"line\">      msg : <span class=\"string\">&quot;数据不存在&quot;</span>，</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    title: row.title,</span><br><span class=\"line\">    describe: row.describe,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上线后发现数据库压力过大，服务延迟非常高，</p>\n<h2 id=\"使用缓存\"><a href=\"#使用缓存\" class=\"headerlink\" title=\"使用缓存\"></a>使用缓存</h2><p>为了解决次问题，使用缓存减少频繁的 sql 操作。</p>\n<p>缓存设计方式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一个请求：查询缓存 &gt; 缓存不存在 &gt; 查询数据库 &gt; 将数据写入缓存 &gt; 响应数据</span><br><span class=\"line\">第二个请求：查询缓存 &gt; 缓存存在 &gt; 响应数据</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/.io//1-1.png\"></p>\n<p>修改后的伪代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">QuestionByID</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  cacheKey = <span class=\"string\">&quot;question:&quot;</span> + id</span><br><span class=\"line\">  cache = Redis(<span class=\"string\">&quot;HGETALL&quot;</span>, cacheKey, )</span><br><span class=\"line\">  <span class=\"comment\">// 判断缓存是否存在</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cache == nil) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查询数据库</span></span><br><span class=\"line\">    row = SQLQuery(<span class=\"string\">&quot;SELECT title, describe FROM question WHERE id = ? LIMIT 1&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> row == <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        type: <span class=\"string\">&quot;fail&quot;</span>,</span><br><span class=\"line\">        msg : <span class=\"string\">&quot;数据不存在&quot;</span>，</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将数据库的数据同步到缓存</span></span><br><span class=\"line\">    Redis(<span class=\"string\">&quot;HSET&quot;</span>, cacheKey, <span class=\"string\">&quot;title&quot;</span>, row.title, <span class=\"string\">&quot;describe&quot;</span>, row.describe, <span class=\"string\">&quot;cache_expire_uinx_seconds&quot;</span>, time.Now().Add(time.Secound*<span class=\"number\">120</span>).Unix()) row.describe)</span><br><span class=\"line\">    <span class=\"comment\">// 响应数据</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      title: cache.title,</span><br><span class=\"line\">      describe: cache.describe,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 响应缓存数据</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    title: cache.title,</span><br><span class=\"line\">    describe: cache.describe,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>redis hash 的 feild 无法设置过期时间，可以通过定时任务使用 hscan 去检测 cache_expire_uinx_seconds 来实现 field 过期时间</p>\n</blockquote>\n<h3 id=\"缓存击穿\"><a href=\"#缓存击穿\" class=\"headerlink\" title=\"缓存击穿\"></a>缓存击穿</h3><p>重新发布后，数据库压力大幅度减少。但部分新问题发布后还是会出现几秒短暂的sql连接数暴增。</p>\n<p>原因是一些粉丝量很大的用户发布提问后大量用户涌入，在缓存还没来得及同步时出现大量sql查询。这种情况叫<strong>缓存击穿</strong></p>\n<p>为了解决这种情况，需要使用分布式互斥锁避免出现一个提问出现大量同步缓存操作。</p>\n<blockquote>\n<p>分布式互斥锁需要保证上锁和解锁都是原子性，在解锁时不要意外的解锁了其他线程/协程/机器上的锁和处理解锁时锁过期。本文不深入互斥锁。<a href=\"https://github.com/search?q=user:nimoc+%E4%BA%92%E6%96%A5%E9%94%81\">互斥锁文章</a></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一个请求：查询缓存 &gt; 缓存不存在 &gt; 尝试上锁 &gt; 上锁成功 &gt; 查询数据库 &gt; 将数据写入缓存 &gt; 响应数据</span><br><span class=\"line\">第一个请求：查询缓存 &gt; 缓存不存在 &gt; 尝试上锁 &gt; 上锁失败 &gt; 延迟1秒后重试查询</span><br><span class=\"line\">第二个请求：查询缓存 &gt; 缓存存在 &gt; 响应数据</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/.io//1-2.png\"></p>\n<p>修改后的伪代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">QuestionByID</span>(<span class=\"params\">id string, retry int</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// （可暂时跳过这一段 if 代码）为防止意外多次重试出现死循环，增加中断条件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (retry &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      type: <span class=\"string\">&quot;fail&quot;</span>,</span><br><span class=\"line\">      message: <span class=\"string\">&quot;提问获取失败，请重试。&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  cacheKey = <span class=\"string\">&quot;question:&quot;</span> + id cache = Redis(<span class=\"string\">&quot;HGETALL&quot;</span>, cacheKey, )</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cache == nil) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 互斥锁</span></span><br><span class=\"line\">    lockKey = <span class=\"string\">&quot;question_sync_cache:&quot;</span> + id lockSuccess,</span><br><span class=\"line\">    Unlock = Lock(lockKey, &#123;</span><br><span class=\"line\">      ExpireSeconds: <span class=\"number\">3</span></span><br><span class=\"line\">    &#125;) <span class=\"keyword\">if</span> (lockSuccess == <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 锁被占用时等待1秒</span></span><br><span class=\"line\">      SleepSeconds(<span class=\"number\">1</span>)</span><br><span class=\"line\">      <span class=\"comment\">// 再次调用 QuestionByID 重试查询，因为根据测试结果1秒的时间足够同步缓存完成。</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> QuestionByID(id, retry + <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    row = SQLQuery(<span class=\"string\">&quot;SELECT title, describe FROM question WHERE id = ? LIMIT 1&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> row == <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        type: <span class=\"string\">&quot;fail&quot;</span>,</span><br><span class=\"line\">        msg : <span class=\"string\">&quot;数据不存在&quot;</span>，</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Redis(<span class=\"string\">&quot;HSET&quot;</span>, cacheKey, <span class=\"string\">&quot;title&quot;</span>, row.title, <span class=\"string\">&quot;describe&quot;</span>, row.describe, <span class=\"string\">&quot;cache_expire_uinx_seconds&quot;</span>, time.Now().Add(time.Secound*<span class=\"number\">120</span>).Unix())</span><br><span class=\"line\">    unlockSuccess = Unlock()</span><br><span class=\"line\">    <span class=\"comment\">// 解锁失败</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (unlockSuccess == <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 再次调用 QuestionByID 重试查询</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> QuestionByID(id, retry + <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      title: cache.title,</span><br><span class=\"line\">      describe: cache.describe,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    title: cache.title,</span><br><span class=\"line\">    describe: cache.describe,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>当有新提问被大量并发访问时，只有一个请求会进入查询 SQL的逻辑，其他请求会等待一秒后重试。如果第一个请求因为各种原因导致没有能成功更新缓存，还会有其他请求重新加锁并更新缓存。</p>\n<p>在一种极端情况下：有出现大量的请求，成功上锁的那一个请求在上锁后因为各种原因线程中断了，导致没有解锁。此时会出现3秒内所有 QuestionByID 都不能响应数据。但这种情况出现的几率非常小，可根据业务场景来判断是否可以忽略。</p>\n<h3 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h3><p>发布运行一段时间后一切正常，偶尔有一天发现当粉丝量很大的用户发布提问后又理解删除提问。发布提问时候推送消息已经推送到很多用户的手机中，用户阅读消息并点击访问提问。会进入如下流程：</p>\n<p><img src=\"/.io//1-3.png?=3\"></p>\n<p>如图所示，所有的用户请求都进入了红色框线路。即使在同步缓存时使用互斥锁去减少数据库压力。在第一个上锁成功的用户没查到数据并解锁后还会有新的用户上锁&gt;查询数据库-&gt;响应无数据。这就导致了<strong>缓存穿透</strong></p>\n<blockquote>\n<p>数据不存在原因可能是正常删除，也可能是意外删除，也可能是恶意攻击。</p>\n</blockquote>\n<p>为了解决缓存穿透，需要在查询到不存在的数据时在缓存中标记数据不存在，以避免缓存穿透。</p>\n<p><img src=\"/.io//1-4.png\"></p>\n<p><img src=\"/.io//1-5.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">QuestionByID</span>(<span class=\"params\">id string, retry int</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// （可暂时跳过这一段 if 代码）为防止意外多次重试出现死循环，增加中断条件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (retry &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      type: <span class=\"string\">&quot;fail&quot;</span>,</span><br><span class=\"line\">      message: <span class=\"string\">&quot;数据获取失败，请重试。&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  cacheKey = <span class=\"string\">&quot;question:&quot;</span> + id cache = Redis(<span class=\"string\">&quot;HGETALL&quot;</span>, cacheKey, )</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cache == nil) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在缓存中查询是否是无效数据</span></span><br><span class=\"line\">    invalid = RedisCommand(<span class=\"string\">&quot;HGET&quot;</span>, <span class=\"string\">&quot;question_invalid&quot;</span>, id)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (invalid) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        type: <span class=\"string\">&quot;fail&quot;</span>,</span><br><span class=\"line\">        msg : <span class=\"string\">&quot;数据不存在&quot;</span>，</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lockKey = <span class=\"string\">&quot;question_sync_cache:&quot;</span> + id lockSuccess,</span><br><span class=\"line\">    Unlock = Lock(lockKey, &#123;</span><br><span class=\"line\">      ExpireSeconds: <span class=\"number\">3</span></span><br><span class=\"line\">    &#125;) <span class=\"keyword\">if</span> (lockSuccess == <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">      SleepSeconds(<span class=\"number\">1</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> QuestionByID(id, retry + <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    row = SQLQuery(<span class=\"string\">&quot;SELECT title, describe FROM question WHERE id = ? LIMIT 1&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> row == <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 标记无效数据</span></span><br><span class=\"line\">      invalid = RedisCommand(<span class=\"string\">&quot;HSET&quot;</span>, <span class=\"string\">&quot;question_invalid&quot;</span>, id, time.Now().Add(time.Secound*<span class=\"number\">120</span>).Unix())</span><br><span class=\"line\">      <span class=\"comment\">// 值设为无效标记超时时间，便于 HSCAN 清除数据</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        type: <span class=\"string\">&quot;fail&quot;</span>,</span><br><span class=\"line\">        msg : <span class=\"string\">&quot;数据不存在&quot;</span>，</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Redis(<span class=\"string\">&quot;HSET&quot;</span>, cacheKey, <span class=\"string\">&quot;title&quot;</span>, row.title, <span class=\"string\">&quot;describe&quot;</span>, row.describe, <span class=\"string\">&quot;cache_expire_uinx_seconds&quot;</span>, time.Now().Add(time.Secound*<span class=\"number\">120</span>).Unix())</span><br><span class=\"line\">    unlockSuccess = Unlock()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (unlockSuccess == <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> QuestionByID(id, retry + <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      title: cache.title,</span><br><span class=\"line\">      describe: cache.describe,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    title: cache.title,</span><br><span class=\"line\">    describe: cache.describe,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当数据量非常大时 hash 存储无效id会导致缓存数据过大，可以使用<a href=\"https://www.dogedoge.com/results?q=%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8\">布隆过滤器</a> 降低缓存大小。可以根据实际情况选择合适的方式。</p>\n<h3 id=\"删除旧数据的缓存\"><a href=\"#删除旧数据的缓存\" class=\"headerlink\" title=\"删除旧数据的缓存\"></a>删除旧数据的缓存</h3><p><strong>带着以下思路去思考数据一致性和并发问题</strong></p>\n<ol>\n<li><strong>行间延迟</strong>：每个操作之间都能出现非常大的延迟（需假设每行代码之间都有 sleep 操作）</li>\n<li><strong>原子性</strong>：确认哪些操作不是原子性，考虑不是原子性会导致什么问题。</li>\n<li><strong>并发</strong>：考虑会有其他线程/协程/机器同一时间对数据进行修改</li>\n</ol>\n<p><img src=\"/.io//1-6.png\"></p>\n<hr>\n<p><img src=\"/.io//1-7.png\"></p>\n<hr>\n<p><img src=\"/.io//1-8.png\"></p>\n<hr>\n<p><img src=\"/.io//1-9.png\"></p>\n<hr>\n<p>因为缓存存储系统和持久化数据存储系统都是不同的服务提供的（mysql redis）所以无法保证原子性，无法保证原子性就无法保证数据一致。只能通过各种补偿机制保证数据最终一致性，在极端情况下依然无法保证数据一致性。但好在很多场景并不需要实现绝对的数据一致性，允许极端情况下出现短暂的数据不一致。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"缓存实践\"><a href=\"#缓存实践\" class=\"headerlink\" title=\"缓存实践\"></a>缓存实践</h1><p><a href=\"https://nimoc.io/notice/index.html\"><img src=\"http://nimoc.io/notice/index.svg\" alt=\"nimoc.io\"></a></p>\n<p>本文将完整介绍以下知识点：</p>\n<ol>\n<li>读多写少</li>\n<li>读多写多</li>\n<li>缓存与数据库的一致性</li>\n</ol>\n<h2 id=\"读多写少\"><a href=\"#读多写少\" class=\"headerlink\" title=\"读多写少\"></a>读多写少</h2><h3 id=\"不使用缓存\"><a href=\"#不使用缓存\" class=\"headerlink\" title=\"不使用缓存\"></a>不使用缓存</h3><p>例如我们在开发提问系统，提问访问量非常大，每秒一万次访问。</p>\n<p>最开始的伪代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">QuestionByID</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  row = SQLQuery(<span class=\"string\">&quot;SELECT title, describe FROM question WHERE id = ? LIMIT 1&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> row == <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      type: <span class=\"string\">&quot;fail&quot;</span>,</span><br><span class=\"line\">      msg : <span class=\"string\">&quot;数据不存在&quot;</span>，</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    title: row.title,</span><br><span class=\"line\">    describe: row.describe,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上线后发现数据库压力过大，服务延迟非常高，</p>\n<h2 id=\"使用缓存\"><a href=\"#使用缓存\" class=\"headerlink\" title=\"使用缓存\"></a>使用缓存</h2><p>为了解决次问题，使用缓存减少频繁的 sql 操作。</p>\n<p>缓存设计方式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一个请求：查询缓存 &gt; 缓存不存在 &gt; 查询数据库 &gt; 将数据写入缓存 &gt; 响应数据</span><br><span class=\"line\">第二个请求：查询缓存 &gt; 缓存存在 &gt; 响应数据</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/.io//1-1.png\"></p>\n<p>修改后的伪代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">QuestionByID</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  cacheKey = <span class=\"string\">&quot;question:&quot;</span> + id</span><br><span class=\"line\">  cache = Redis(<span class=\"string\">&quot;HGETALL&quot;</span>, cacheKey, )</span><br><span class=\"line\">  <span class=\"comment\">// 判断缓存是否存在</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cache == nil) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查询数据库</span></span><br><span class=\"line\">    row = SQLQuery(<span class=\"string\">&quot;SELECT title, describe FROM question WHERE id = ? LIMIT 1&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> row == <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        type: <span class=\"string\">&quot;fail&quot;</span>,</span><br><span class=\"line\">        msg : <span class=\"string\">&quot;数据不存在&quot;</span>，</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将数据库的数据同步到缓存</span></span><br><span class=\"line\">    Redis(<span class=\"string\">&quot;HSET&quot;</span>, cacheKey, <span class=\"string\">&quot;title&quot;</span>, row.title, <span class=\"string\">&quot;describe&quot;</span>, row.describe, <span class=\"string\">&quot;cache_expire_uinx_seconds&quot;</span>, time.Now().Add(time.Secound*<span class=\"number\">120</span>).Unix()) row.describe)</span><br><span class=\"line\">    <span class=\"comment\">// 响应数据</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      title: cache.title,</span><br><span class=\"line\">      describe: cache.describe,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 响应缓存数据</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    title: cache.title,</span><br><span class=\"line\">    describe: cache.describe,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>redis hash 的 feild 无法设置过期时间，可以通过定时任务使用 hscan 去检测 cache_expire_uinx_seconds 来实现 field 过期时间</p>\n</blockquote>\n<h3 id=\"缓存击穿\"><a href=\"#缓存击穿\" class=\"headerlink\" title=\"缓存击穿\"></a>缓存击穿</h3><p>重新发布后，数据库压力大幅度减少。但部分新问题发布后还是会出现几秒短暂的sql连接数暴增。</p>\n<p>原因是一些粉丝量很大的用户发布提问后大量用户涌入，在缓存还没来得及同步时出现大量sql查询。这种情况叫<strong>缓存击穿</strong></p>\n<p>为了解决这种情况，需要使用分布式互斥锁避免出现一个提问出现大量同步缓存操作。</p>\n<blockquote>\n<p>分布式互斥锁需要保证上锁和解锁都是原子性，在解锁时不要意外的解锁了其他线程/协程/机器上的锁和处理解锁时锁过期。本文不深入互斥锁。<a href=\"https://github.com/search?q=user:nimoc+%E4%BA%92%E6%96%A5%E9%94%81\">互斥锁文章</a></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一个请求：查询缓存 &gt; 缓存不存在 &gt; 尝试上锁 &gt; 上锁成功 &gt; 查询数据库 &gt; 将数据写入缓存 &gt; 响应数据</span><br><span class=\"line\">第一个请求：查询缓存 &gt; 缓存不存在 &gt; 尝试上锁 &gt; 上锁失败 &gt; 延迟1秒后重试查询</span><br><span class=\"line\">第二个请求：查询缓存 &gt; 缓存存在 &gt; 响应数据</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/.io//1-2.png\"></p>\n<p>修改后的伪代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">QuestionByID</span>(<span class=\"params\">id string, retry int</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// （可暂时跳过这一段 if 代码）为防止意外多次重试出现死循环，增加中断条件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (retry &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      type: <span class=\"string\">&quot;fail&quot;</span>,</span><br><span class=\"line\">      message: <span class=\"string\">&quot;提问获取失败，请重试。&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  cacheKey = <span class=\"string\">&quot;question:&quot;</span> + id cache = Redis(<span class=\"string\">&quot;HGETALL&quot;</span>, cacheKey, )</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cache == nil) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 互斥锁</span></span><br><span class=\"line\">    lockKey = <span class=\"string\">&quot;question_sync_cache:&quot;</span> + id lockSuccess,</span><br><span class=\"line\">    Unlock = Lock(lockKey, &#123;</span><br><span class=\"line\">      ExpireSeconds: <span class=\"number\">3</span></span><br><span class=\"line\">    &#125;) <span class=\"keyword\">if</span> (lockSuccess == <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 锁被占用时等待1秒</span></span><br><span class=\"line\">      SleepSeconds(<span class=\"number\">1</span>)</span><br><span class=\"line\">      <span class=\"comment\">// 再次调用 QuestionByID 重试查询，因为根据测试结果1秒的时间足够同步缓存完成。</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> QuestionByID(id, retry + <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    row = SQLQuery(<span class=\"string\">&quot;SELECT title, describe FROM question WHERE id = ? LIMIT 1&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> row == <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        type: <span class=\"string\">&quot;fail&quot;</span>,</span><br><span class=\"line\">        msg : <span class=\"string\">&quot;数据不存在&quot;</span>，</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Redis(<span class=\"string\">&quot;HSET&quot;</span>, cacheKey, <span class=\"string\">&quot;title&quot;</span>, row.title, <span class=\"string\">&quot;describe&quot;</span>, row.describe, <span class=\"string\">&quot;cache_expire_uinx_seconds&quot;</span>, time.Now().Add(time.Secound*<span class=\"number\">120</span>).Unix())</span><br><span class=\"line\">    unlockSuccess = Unlock()</span><br><span class=\"line\">    <span class=\"comment\">// 解锁失败</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (unlockSuccess == <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 再次调用 QuestionByID 重试查询</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> QuestionByID(id, retry + <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      title: cache.title,</span><br><span class=\"line\">      describe: cache.describe,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    title: cache.title,</span><br><span class=\"line\">    describe: cache.describe,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>当有新提问被大量并发访问时，只有一个请求会进入查询 SQL的逻辑，其他请求会等待一秒后重试。如果第一个请求因为各种原因导致没有能成功更新缓存，还会有其他请求重新加锁并更新缓存。</p>\n<p>在一种极端情况下：有出现大量的请求，成功上锁的那一个请求在上锁后因为各种原因线程中断了，导致没有解锁。此时会出现3秒内所有 QuestionByID 都不能响应数据。但这种情况出现的几率非常小，可根据业务场景来判断是否可以忽略。</p>\n<h3 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h3><p>发布运行一段时间后一切正常，偶尔有一天发现当粉丝量很大的用户发布提问后又理解删除提问。发布提问时候推送消息已经推送到很多用户的手机中，用户阅读消息并点击访问提问。会进入如下流程：</p>\n<p><img src=\"/.io//1-3.png?=3\"></p>\n<p>如图所示，所有的用户请求都进入了红色框线路。即使在同步缓存时使用互斥锁去减少数据库压力。在第一个上锁成功的用户没查到数据并解锁后还会有新的用户上锁&gt;查询数据库-&gt;响应无数据。这就导致了<strong>缓存穿透</strong></p>\n<blockquote>\n<p>数据不存在原因可能是正常删除，也可能是意外删除，也可能是恶意攻击。</p>\n</blockquote>\n<p>为了解决缓存穿透，需要在查询到不存在的数据时在缓存中标记数据不存在，以避免缓存穿透。</p>\n<p><img src=\"/.io//1-4.png\"></p>\n<p><img src=\"/.io//1-5.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">QuestionByID</span>(<span class=\"params\">id string, retry int</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// （可暂时跳过这一段 if 代码）为防止意外多次重试出现死循环，增加中断条件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (retry &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      type: <span class=\"string\">&quot;fail&quot;</span>,</span><br><span class=\"line\">      message: <span class=\"string\">&quot;数据获取失败，请重试。&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  cacheKey = <span class=\"string\">&quot;question:&quot;</span> + id cache = Redis(<span class=\"string\">&quot;HGETALL&quot;</span>, cacheKey, )</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cache == nil) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在缓存中查询是否是无效数据</span></span><br><span class=\"line\">    invalid = RedisCommand(<span class=\"string\">&quot;HGET&quot;</span>, <span class=\"string\">&quot;question_invalid&quot;</span>, id)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (invalid) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        type: <span class=\"string\">&quot;fail&quot;</span>,</span><br><span class=\"line\">        msg : <span class=\"string\">&quot;数据不存在&quot;</span>，</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lockKey = <span class=\"string\">&quot;question_sync_cache:&quot;</span> + id lockSuccess,</span><br><span class=\"line\">    Unlock = Lock(lockKey, &#123;</span><br><span class=\"line\">      ExpireSeconds: <span class=\"number\">3</span></span><br><span class=\"line\">    &#125;) <span class=\"keyword\">if</span> (lockSuccess == <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">      SleepSeconds(<span class=\"number\">1</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> QuestionByID(id, retry + <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    row = SQLQuery(<span class=\"string\">&quot;SELECT title, describe FROM question WHERE id = ? LIMIT 1&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> row == <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 标记无效数据</span></span><br><span class=\"line\">      invalid = RedisCommand(<span class=\"string\">&quot;HSET&quot;</span>, <span class=\"string\">&quot;question_invalid&quot;</span>, id, time.Now().Add(time.Secound*<span class=\"number\">120</span>).Unix())</span><br><span class=\"line\">      <span class=\"comment\">// 值设为无效标记超时时间，便于 HSCAN 清除数据</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        type: <span class=\"string\">&quot;fail&quot;</span>,</span><br><span class=\"line\">        msg : <span class=\"string\">&quot;数据不存在&quot;</span>，</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Redis(<span class=\"string\">&quot;HSET&quot;</span>, cacheKey, <span class=\"string\">&quot;title&quot;</span>, row.title, <span class=\"string\">&quot;describe&quot;</span>, row.describe, <span class=\"string\">&quot;cache_expire_uinx_seconds&quot;</span>, time.Now().Add(time.Secound*<span class=\"number\">120</span>).Unix())</span><br><span class=\"line\">    unlockSuccess = Unlock()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (unlockSuccess == <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> QuestionByID(id, retry + <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      title: cache.title,</span><br><span class=\"line\">      describe: cache.describe,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    title: cache.title,</span><br><span class=\"line\">    describe: cache.describe,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当数据量非常大时 hash 存储无效id会导致缓存数据过大，可以使用<a href=\"https://www.dogedoge.com/results?q=%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8\">布隆过滤器</a> 降低缓存大小。可以根据实际情况选择合适的方式。</p>\n<h3 id=\"删除旧数据的缓存\"><a href=\"#删除旧数据的缓存\" class=\"headerlink\" title=\"删除旧数据的缓存\"></a>删除旧数据的缓存</h3><p><strong>带着以下思路去思考数据一致性和并发问题</strong></p>\n<ol>\n<li><strong>行间延迟</strong>：每个操作之间都能出现非常大的延迟（需假设每行代码之间都有 sleep 操作）</li>\n<li><strong>原子性</strong>：确认哪些操作不是原子性，考虑不是原子性会导致什么问题。</li>\n<li><strong>并发</strong>：考虑会有其他线程/协程/机器同一时间对数据进行修改</li>\n</ol>\n<p><img src=\"/.io//1-6.png\"></p>\n<hr>\n<p><img src=\"/.io//1-7.png\"></p>\n<hr>\n<p><img src=\"/.io//1-8.png\"></p>\n<hr>\n<p><img src=\"/.io//1-9.png\"></p>\n<hr>\n<p>因为缓存存储系统和持久化数据存储系统都是不同的服务提供的（mysql redis）所以无法保证原子性，无法保证原子性就无法保证数据一致。只能通过各种补偿机制保证数据最终一致性，在极端情况下依然无法保证数据一致性。但好在很多场景并不需要实现绝对的数据一致性，允许极端情况下出现短暂的数据不一致。</p>\n"}],"PostAsset":[{"_id":"src/_posts/cache_practice/1-1.png","slug":"1-1.png","post":"cklndfldh0009pvu88xdm8ftw","modified":0,"renderable":0},{"_id":"src/_posts/cache_practice/1-1.txt","slug":"1-1.txt","post":"cklndfldh0009pvu88xdm8ftw","modified":0,"renderable":0},{"_id":"src/_posts/cache_practice/1-2.png","slug":"1-2.png","post":"cklndfldh0009pvu88xdm8ftw","modified":0,"renderable":0},{"_id":"src/_posts/cache_practice/1-2.txt","slug":"1-2.txt","post":"cklndfldh0009pvu88xdm8ftw","modified":0,"renderable":0},{"_id":"src/_posts/cache_practice/1-3.png","slug":"1-3.png","post":"cklndfldh0009pvu88xdm8ftw","modified":0,"renderable":0},{"_id":"src/_posts/cache_practice/1-3.txt","slug":"1-3.txt","post":"cklndfldh0009pvu88xdm8ftw","modified":0,"renderable":0},{"_id":"src/_posts/cache_practice/1-4.png","slug":"1-4.png","post":"cklndfldh0009pvu88xdm8ftw","modified":0,"renderable":0},{"_id":"src/_posts/cache_practice/1-4.txt","slug":"1-4.txt","post":"cklndfldh0009pvu88xdm8ftw","modified":0,"renderable":0},{"_id":"src/_posts/cache_practice/1-5.png","slug":"1-5.png","post":"cklndfldh0009pvu88xdm8ftw","modified":0,"renderable":0},{"_id":"src/_posts/cache_practice/1-5.txt","slug":"1-5.txt","post":"cklndfldh0009pvu88xdm8ftw","modified":0,"renderable":0},{"_id":"src/_posts/cache_practice/1-6-2.png","slug":"1-6-2.png","post":"cklndfldh0009pvu88xdm8ftw","modified":0,"renderable":0},{"_id":"src/_posts/cache_practice/1-6-2.txt","slug":"1-6-2.txt","post":"cklndfldh0009pvu88xdm8ftw","modified":0,"renderable":0},{"_id":"src/_posts/cache_practice/1-6.png","slug":"1-6.png","post":"cklndfldh0009pvu88xdm8ftw","modified":0,"renderable":0},{"_id":"src/_posts/cache_practice/1-6.txt","slug":"1-6.txt","post":"cklndfldh0009pvu88xdm8ftw","modified":0,"renderable":0},{"_id":"src/_posts/cache_practice/1-7.png","slug":"1-7.png","post":"cklndfldh0009pvu88xdm8ftw","modified":0,"renderable":0},{"_id":"src/_posts/cache_practice/1-7.txt","slug":"1-7.txt","post":"cklndfldh0009pvu88xdm8ftw","modified":0,"renderable":0},{"_id":"src/_posts/cache_practice/1-8.png","slug":"1-8.png","post":"cklndfldh0009pvu88xdm8ftw","modified":0,"renderable":0},{"_id":"src/_posts/cache_practice/1-8.txt","slug":"1-8.txt","post":"cklndfldh0009pvu88xdm8ftw","modified":0,"renderable":0},{"_id":"src/_posts/cache_practice/1-9.png","slug":"1-9.png","post":"cklndfldh0009pvu88xdm8ftw","modified":0,"renderable":0},{"_id":"src/_posts/cache_practice/1-9.txt","slug":"1-9.txt","post":"cklndfldh0009pvu88xdm8ftw","modified":0,"renderable":0},{"_id":"src/_posts/concurrency_methodology/1-1.png","slug":"1-1.png","post":"cklndcyny0007pvu8b6v9hyvl","modified":0,"renderable":0},{"_id":"src/_posts/concurrency_methodology/1-1.txt","slug":"1-1.txt","post":"cklndcyny0007pvu8b6v9hyvl","modified":0,"renderable":0},{"_id":"src/_posts/concurrency_methodology/1-2.png","slug":"1-2.png","post":"cklndcyny0007pvu8b6v9hyvl","modified":0,"renderable":0},{"_id":"src/_posts/concurrency_methodology/1-2.txt","slug":"1-2.txt","post":"cklndcyny0007pvu8b6v9hyvl","modified":0,"renderable":0},{"_id":"src/_posts/concurrency_methodology/1-3.png","slug":"1-3.png","post":"cklndcyny0007pvu8b6v9hyvl","modified":0,"renderable":0},{"_id":"src/_posts/concurrency_methodology/1-3.txt","slug":"1-3.txt","post":"cklndcyny0007pvu8b6v9hyvl","modified":0,"renderable":0},{"_id":"src/_posts/concurrency_methodology/1-4.png","slug":"1-4.png","post":"cklndcyny0007pvu8b6v9hyvl","modified":0,"renderable":0},{"_id":"src/_posts/concurrency_methodology/1-5.png","slug":"1-5.png","post":"cklndcyny0007pvu8b6v9hyvl","modified":0,"renderable":0},{"_id":"src/_posts/concurrency_methodology/1-4.txt","slug":"1-4.txt","post":"cklndcyny0007pvu8b6v9hyvl","modified":0,"renderable":0},{"_id":"src/_posts/concurrency_methodology/1-5.txt","slug":"1-5.txt","post":"cklndcyny0007pvu8b6v9hyvl","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[],"Tag":[]}}