{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/vexo/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/vexo/source/fonts/SourceSansPro.ttf","path":"fonts/SourceSansPro.ttf","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/gitment.js","path":"js/gitment.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/qrious.js","path":"js/qrious.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/plugins/gitment.css","path":"css/plugins/gitment.css","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/alipay.jpg","path":"css/images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/catalog.png","path":"css/images/catalog.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/escheres.png","path":"css/images/escheres.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/menu.png","path":"css/images/menu.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/top.png","path":"css/images/top.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/wechat.jpg","path":"css/images/wechat.jpg","modified":0,"renderable":1},{"_id":"src/cache_practice/1-1.png","path":"cache_practice/1-1.png","modified":1,"renderable":0},{"_id":"src/cache_practice/1-1.txt","path":"cache_practice/1-1.txt","modified":1,"renderable":0},{"_id":"src/cache_practice/1-2.png","path":"cache_practice/1-2.png","modified":1,"renderable":0},{"_id":"src/cache_practice/1-2.txt","path":"cache_practice/1-2.txt","modified":1,"renderable":0},{"_id":"src/cache_practice/1-3.png","path":"cache_practice/1-3.png","modified":1,"renderable":0},{"_id":"src/cache_practice/1-3.txt","path":"cache_practice/1-3.txt","modified":1,"renderable":0},{"_id":"src/cache_practice/1-4.png","path":"cache_practice/1-4.png","modified":1,"renderable":0},{"_id":"src/cache_practice/1-4.txt","path":"cache_practice/1-4.txt","modified":1,"renderable":0},{"_id":"src/cache_practice/1-5.png","path":"cache_practice/1-5.png","modified":1,"renderable":0},{"_id":"src/cache_practice/1-5.txt","path":"cache_practice/1-5.txt","modified":1,"renderable":0},{"_id":"src/cache_practice/1-6-2.png","path":"cache_practice/1-6-2.png","modified":1,"renderable":0},{"_id":"src/cache_practice/1-6-2.txt","path":"cache_practice/1-6-2.txt","modified":1,"renderable":0},{"_id":"src/cache_practice/1-6.png","path":"cache_practice/1-6.png","modified":1,"renderable":0},{"_id":"src/cache_practice/1-6.txt","path":"cache_practice/1-6.txt","modified":1,"renderable":0},{"_id":"src/cache_practice/1-7.png","path":"cache_practice/1-7.png","modified":1,"renderable":0},{"_id":"src/cache_practice/1-7.txt","path":"cache_practice/1-7.txt","modified":1,"renderable":0},{"_id":"src/cache_practice/1-8.png","path":"cache_practice/1-8.png","modified":1,"renderable":0},{"_id":"src/cache_practice/1-8.txt","path":"cache_practice/1-8.txt","modified":1,"renderable":0},{"_id":"src/cache_practice/1-9.png","path":"cache_practice/1-9.png","modified":1,"renderable":0},{"_id":"src/cache_practice/1-9.txt","path":"cache_practice/1-9.txt","modified":1,"renderable":0},{"_id":"src/concurrency_methodology/1-1.png","path":"concurrency_methodology/1-1.png","modified":1,"renderable":0},{"_id":"src/concurrency_methodology/1-1.txt","path":"concurrency_methodology/1-1.txt","modified":1,"renderable":0},{"_id":"src/concurrency_methodology/1-2.png","path":"concurrency_methodology/1-2.png","modified":1,"renderable":0},{"_id":"src/concurrency_methodology/1-2.txt","path":"concurrency_methodology/1-2.txt","modified":1,"renderable":0},{"_id":"src/concurrency_methodology/1-3.png","path":"concurrency_methodology/1-3.png","modified":1,"renderable":0},{"_id":"src/concurrency_methodology/1-3.txt","path":"concurrency_methodology/1-3.txt","modified":1,"renderable":0},{"_id":"src/concurrency_methodology/1-4.png","path":"concurrency_methodology/1-4.png","modified":1,"renderable":0},{"_id":"src/concurrency_methodology/1-4.txt","path":"concurrency_methodology/1-4.txt","modified":1,"renderable":0},{"_id":"src/concurrency_methodology/1-5.png","path":"concurrency_methodology/1-5.png","modified":1,"renderable":0},{"_id":"src/concurrency_methodology/1-5.txt","path":"concurrency_methodology/1-5.txt","modified":1,"renderable":0},{"_id":"src/go_channel/channel_test.go","path":"go_channel/channel_test.go","modified":1,"renderable":0},{"_id":"src/go_interface_basic/interface_test.go","path":"go_interface_basic/interface_test.go","modified":1,"renderable":0},{"_id":"src/go_trap/trap_test.go","path":"go_trap/trap_test.go","modified":1,"renderable":0},{"_id":"src/plantuml.jar","path":"plantuml.jar","modified":1,"renderable":0},{"_id":"src/ts_go_generics.doc.ts","path":"ts_go_generics.doc.ts","modified":1,"renderable":0},{"_id":"src/zero_value_typescript.doc.ts","path":"zero_value_typescript.doc.ts","modified":1,"renderable":0}],"Cache":[{"_id":"src/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1614401115494},{"_id":"src/_posts/x.md","hash":"c78062d6368dbe69493ceb3455f21065fbb8f372","modified":1614401687741},{"_id":"src/404/index.md","hash":"62e7f3fe322fbebe6fdeab78b15d778ddb094a12","modified":1614401766239},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1614403054114},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1614403054114},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1614403054108},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1614403054109},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1614403054114},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1614403054115},{"_id":"themes/next/_config.yml","hash":"ccd41ed5fc3027f81834c30fe4b67c0dac742dea","modified":1614403054116},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1614403054115},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1614403054117},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1614403054123},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1614403054166},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1614403054109},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1614403054110},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1614403054110},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1614403054109},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1614403054110},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1614403054111},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1614403054111},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1614403054113},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1614403054111},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1614403054113},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1614403054117},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1614403054111},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1614403054118},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1614403054118},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1614403054118},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1614403054118},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1614403054119},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1614403054119},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1614403054119},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1614403054119},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1614403054124},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1614403054124},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1614403054124},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1614403054124},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1614403054124},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1614403054124},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1614403054125},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1614403054125},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1614403054125},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1614403054125},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1614403054126},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1614403054126},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1614403054126},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1614403054126},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1614403054127},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1614403054127},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1614403054127},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1614403054128},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1614403054127},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1614403054128},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1614403054130},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1614403054129},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1614403054164},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1614403054165},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1614403054164},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1614403054165},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1614403054165},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1614403054166},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1614403054109},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1614403054183},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1614403054125},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1614403054109},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1614403054120},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1614403054110},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1614403054110},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1614403054120},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1614403054120},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1614403054120},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1614403054121},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1614403054121},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1614403054121},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1614403054121},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1614403054122},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1614403054122},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1614403054123},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1614403054130},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1614403054123},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1614403054122},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1614403054133},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1614403054132},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1614403054132},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1614403054133},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1614403054136},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1614403054140},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1614403054142},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1614403054135},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1614403054141},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1614403054144},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1614403054142},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1614403054144},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1614403054148},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1614403054153},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1614403054167},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1614403054170},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1614403054172},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1614403054172},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1614403054173},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1614403054176},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1614403054176},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1614403054177},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1614403054177},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1614403054155},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1614403054156},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1614403054179},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1614403054184},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1614403054185},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1614403054185},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1614403054185},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1614403054185},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1614403054186},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1614403054186},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1614403054187},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1614403054187},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1614403054187},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1614403054189},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1614403054232},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1614403054249},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1614403054250},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1614403054250},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1614403054250},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1614403054251},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1614403054251},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1614403054252},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1614403054252},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1614403054252},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1614403054253},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1614403054253},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1614403054254},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1614403054254},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1614403054255},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1614403054254},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1614403054255},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1614403054255},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1614403054256},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1614403054256},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1614403054259},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1614403054259},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1614403054134},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1614403054134},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1614403054134},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1614403054134},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1614403054135},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1614403054135},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1614403054135},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1614403054136},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1614403054137},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1614403054137},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1614403054136},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1614403054138},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1614403054138},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1614403054138},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1614403054139},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1614403054139},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1614403054138},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1614403054140},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1614403054143},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1614403054142},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1614403054143},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1614403054143},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1614403054143},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1614403054144},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1614403054145},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1614403054146},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1614403054148},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1614403054149},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1614403054150},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1614403054150},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1614403054151},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1614403054151},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1614403054152},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1614403054153},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1614403054153},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1614403054153},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1614403054154},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1614403054155},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1614403054157},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1614403054157},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1614403054158},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1614403054159},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1614403054159},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1614403054159},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1614403054160},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1614403054160},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1614403054167},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1614403054162},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1614403054168},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1614403054168},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1614403054167},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1614403054168},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1614403054160},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1614403054169},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1614403054169},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1614403054169},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1614403054170},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1614403054169},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1614403054170},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1614403054247},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1614403054248},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1614403054247},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1614403054256},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1614403054249},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1614403054248},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1614403054257},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1614403054265},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1614403054190},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1614403054190},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1614403054208},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1614403054214},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1614403054192},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1614403054108},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1614403054214},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1614403054221},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1614403054222},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1614403054222},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1614403054226},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1614403054226},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1614403054226},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1614403054232},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1614403054233},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1614403054234},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1614403054234},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1614403054234},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1614403054235},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1614403054237},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1614403054236},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1614403054238},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1614403054238},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1614403054238},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1614403054238},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1614403054239},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1614403054266},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1614403054242},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1614403054243},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1614403054243},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1614403054247},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1614403054243},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1614403054242},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1614403054261},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1614403054193},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1614403054262},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1614403054193},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1614403054193},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1614403054195},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1614403054196},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1614403054200},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1614403054196},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1614403054201},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1614403054203},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1614403054203},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1614403054202},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1614403054204},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1614403054204},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1614403054203},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1614403054204},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1614403054206},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1614403054204},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1614403054208},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1614403054207},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1614403054209},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1614403054209},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1614403054208},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1614403054209},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1614403054210},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1614403054211},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1614403054211},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1614403054213},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1614403054212},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1614403054213},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1614403054213},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1614403054213},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1614403054214},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1614403054215},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1614403054217},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1614403054217},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1614403054218},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1614403054219},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1614403054218},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1614403054219},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1614403054220},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1614403054221},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1614403054223},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1614403054222},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1614403054225},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1614403054225},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1614403054227},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1614403054227},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1614403054228},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1614403054228},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1614403054228},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1614403054230},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1614403054231},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1614403054261},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1614403054262},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1614403054225},{"_id":"src/about/index.md","hash":"68c8af0453deca5f6b03eb18ee6f89fb0c1f1f75","modified":1614403750927},{"_id":"src/project/index.md","hash":"b8f5482c157514bd2df4ce8a4e4d01a957497924","modified":1614403750929},{"_id":"src/tags/index.md","hash":"80a15f1b5daff22b04849109e976bc91a410b83e","modified":1614403750930},{"_id":"themes/vexo/.gitignore","hash":"37fb9fd49e7f944716efd3284a6bf55adb6dd0c2","modified":1614403743288},{"_id":"themes/vexo/.travis.yml","hash":"cc482f06f4ea6962058f2548dcb814b954876e76","modified":1614403743289},{"_id":"themes/vexo/LICENSE","hash":"3e135cd69c0e02c0a49dd43d571f600223cc61d1","modified":1614403743289},{"_id":"themes/vexo/README.md","hash":"036ddc66e868b93411a15ed3fd5ed5e9101045a5","modified":1614403743289},{"_id":"themes/vexo/_config.yml","hash":"0640e114688ae109d62b8648fd77aff390e659df","modified":1614405606394},{"_id":"themes/vexo/lint.sh","hash":"f580302e4aa9ccfb95a253851da6501d145613fe","modified":1614403743298},{"_id":"themes/vexo/package.json","hash":"44e46ed458ca4351db2a773bb4c09ac814b7b1e0","modified":1614403743299},{"_id":"themes/vexo/layout/about.ejs","hash":"76ba7418788eb2bb9ba46844f4d750734847d0b4","modified":1614403743296},{"_id":"themes/vexo/layout/archive.ejs","hash":"cb12abb19cb70e90d410a6233933eedb3f2c033a","modified":1614403743296},{"_id":"themes/vexo/layout/layout.ejs","hash":"a7b8f1debdca12d667ecd1bcc3d4bc6e13a23d7b","modified":1614403743297},{"_id":"themes/vexo/layout/index.ejs","hash":"933df25f1242fb33e709831a069b293858faa17e","modified":1614405511691},{"_id":"themes/vexo/layout/page.ejs","hash":"1e0d243b6d85fe4c6c8ee3abea5834f0d49d4451","modified":1614406218834},{"_id":"themes/vexo/layout/tags.ejs","hash":"5b326e2bd3292b3015d0666b796544d7126acfda","modified":1614403743298},{"_id":"themes/vexo/_source/about/index.md","hash":"68c8af0453deca5f6b03eb18ee6f89fb0c1f1f75","modified":1614403743290},{"_id":"themes/vexo/_source/project/index.md","hash":"b8f5482c157514bd2df4ce8a4e4d01a957497924","modified":1614403743290},{"_id":"themes/vexo/layout/project.ejs","hash":"3c9a517e273e029b57defb566c1b03de34e91144","modified":1614404877592},{"_id":"themes/vexo/_source/tags/index.md","hash":"80a15f1b5daff22b04849109e976bc91a410b83e","modified":1614403743291},{"_id":"themes/vexo/layout/_partial/archive.ejs","hash":"9abbf14034d581569c0b6c992fe22035cb5306b3","modified":1614403743292},{"_id":"themes/vexo/layout/_partial/catalog.ejs","hash":"0352ce39c28074dcfc3bd6416680195eeb384fd1","modified":1614403743292},{"_id":"themes/vexo/layout/_partial/head.ejs","hash":"8ab801a03acb9d121ae4a302361bbdea878412bb","modified":1614405964441},{"_id":"themes/vexo/layout/_partial/footer.ejs","hash":"e437b4ca5507b5224c12c972804f8307108e3c38","modified":1614404261464},{"_id":"themes/vexo/layout/_partial/header.ejs","hash":"e544f516b23bc609cc6367190f380c879b935c21","modified":1614403743293},{"_id":"themes/vexo/layout/_partial/nav.ejs","hash":"3d8ddc1f6e135a240d40edd157cf37f5d0a12df6","modified":1614403743293},{"_id":"themes/vexo/layout/_partial/pager.ejs","hash":"3a1b9680fbfa3baa76933c7c17216996381ad241","modified":1614403743294},{"_id":"themes/vexo/layout/_partial/tag.ejs","hash":"5d2a2c3f8ca7000945ab426a0c6939421974b224","modified":1614403743294},{"_id":"themes/vexo/layout/_partial/top.ejs","hash":"f09dea486246a580213005b21d4b38810dd16fb3","modified":1614403743295},{"_id":"themes/vexo/layout/_third-party/google_analytics.ejs","hash":"d09107a4ee5753a2fbbdb16ddf79d23ff0618c19","modified":1614403743295},{"_id":"themes/vexo/layout/_third-party/mathjax.ejs","hash":"aa58f0cfe22e7151c1a0521bbfa5cbd76f6dcd9d","modified":1614403743296},{"_id":"themes/vexo/source/css/_config.styl","hash":"0c9c0e77d6b8813cb76494e8d757843aab9e117b","modified":1614403743300},{"_id":"themes/vexo/source/css/style.styl","hash":"10f307aade07e504906303f1a43ebb502d2064ac","modified":1614405447712},{"_id":"themes/vexo/source/js/script.js","hash":"19c6ac9c1d8220fa9ab2ec461c17eaae3bc962d7","modified":1614403743318},{"_id":"themes/vexo/source/js/qrious.js","hash":"a9271e81e2ac6a692b1c133811afa33f0f3d7dc5","modified":1614403743317},{"_id":"themes/vexo/source/css/_partial/archive.styl","hash":"e80ddf26f2af3523632afeabd57f81592537985a","modified":1614403743301},{"_id":"themes/vexo/source/css/_partial/about.styl","hash":"da7b093e3973ccd70723cbe93370f772946ba433","modified":1614405517973},{"_id":"themes/vexo/source/css/_partial/catalog.styl","hash":"cbf3f59d3c3162700eb9cbd4cf72c8470c170f81","modified":1614403743301},{"_id":"themes/vexo/source/css/_partial/footer.styl","hash":"970b6fd3d05834926c69724934b798dd5a1472e6","modified":1614403743302},{"_id":"themes/vexo/source/css/_partial/header.styl","hash":"def3a6938d925c585a7da6256a6f2e90f3b7d61e","modified":1614403743302},{"_id":"themes/vexo/source/css/_partial/markdown.styl","hash":"5cfd022169adda3e2a266034e7818c8ccd349212","modified":1614403743302},{"_id":"themes/vexo/source/css/_partial/nav.styl","hash":"e92c010c5cd460e75c67083df8cdd0bf4d25cde4","modified":1614403743302},{"_id":"themes/vexo/source/css/_partial/pager.styl","hash":"888384c67429c7568aa38b5ebe5acae3cc4de367","modified":1614403743303},{"_id":"themes/vexo/source/css/_partial/project.styl","hash":"e9b6faadf4852bce3a4141cba0a102a7afb81e9f","modified":1614403743303},{"_id":"themes/vexo/source/css/_partial/tags.styl","hash":"5198a7f7c221341138ae5c65185e86b6e13e8e26","modified":1614403743303},{"_id":"themes/vexo/source/css/plugins/gitment.css","hash":"541ff18d7f3542b5663dc6aad06d43e135332b71","modified":1614403743308},{"_id":"themes/vexo/source/css/images/alipay.jpg","hash":"c49822ea6f06f868c2404fb00a93f913c8fff7b5","modified":1614403743304},{"_id":"themes/vexo/source/css/images/catalog.png","hash":"541d20dd600fc2c9230329ceb6885d86e6c151dd","modified":1614403743305},{"_id":"themes/vexo/source/css/images/escheres.png","hash":"55deece3236dcc2fb44c28dec3e8bacbb7b46542","modified":1614403743305},{"_id":"themes/vexo/source/css/images/logo.png","hash":"718c6e48956249121cf3cca1a22a99f8372a3f0d","modified":1614403743305},{"_id":"themes/vexo/source/css/images/menu.png","hash":"bdaa35eb1ed119caeb934e15a05b9f4a5396d957","modified":1614403743305},{"_id":"themes/vexo/source/css/images/top.png","hash":"611a257907474ca02828319f81b006c1d818bb84","modified":1614403743306},{"_id":"themes/vexo/source/css/images/wechat.jpg","hash":"5bed6d3eb9f71b227b0ea0187c1a7ba8caf5ee64","modified":1614403743306},{"_id":"themes/vexo/source/fonts/SourceSansPro.ttf","hash":"1e9f0372c269da205fdbac8cf27cb9cf59f6ad45","modified":1614403743313},{"_id":"themes/vexo/source/js/gitment.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1614403743316},{"_id":"src/_posts/.DS_Store","hash":"d6bf4fd113212175d4081f69868cc5c7e508d9b0","modified":1614407386945},{"_id":"src/_posts/beginner_job_advice.md","hash":"670364e0bb2f02cc0c5c2e5c3e39a4d683dfb46f","modified":1614407180824},{"_id":"src/_posts/concurrency_methodology.md","hash":"79f181adac0179c74948eb3fefdc798c404d7582","modified":1614407295786},{"_id":"src/_posts/cache_practice.md","hash":"39ab200ced4b7da2a988994073d2e9fccd4d7b49","modified":1614406554649},{"_id":"src/_posts/f2e_up.md","hash":"15e368178937c34300d29ad7966ad56917e5a625","modified":1614406473209},{"_id":"src/_posts/gulp_book.md","hash":"6165a47698d128ec57ae6e9fe1520094eae1881b","modified":1614406545520},{"_id":"src/_posts/js_prototype_trap.md","hash":"8fa169079eaf09d53c3457556bd2821e7733afbf","modified":1614406656346},{"_id":"src/_posts/js_replace.md","hash":"1be87f6d03fb33bdd14657f6d550b8833092dd7a","modified":1614406761191},{"_id":"src/_posts/learn_js.md","hash":"e98c486426e5cd619b3b4882da87eb5ff4f2138b","modified":1614406823732},{"_id":"src/_posts/ignore_browser_compatibility.md","hash":"8c17fd2f295e59d0a35cd3a2709416e8cf2fb078","modified":1614406689406},{"_id":"src/_posts/ts_go_generics.doc.ts","hash":"de2c2072f7167eca6bd5a61f79e34d667433112e","modified":1614406908246},{"_id":"src/_posts/watch.md","hash":"9fdfbf4b52c94671d6d8c146c3516dd86019a22a","modified":1614406958223},{"_id":"src/_posts/ts_go_generics.md","hash":"2b0d275f9bb856552a44f2c869006e93b41c6bcf","modified":1614401063176},{"_id":"src/_posts/web_team_interface.md","hash":"d44237142a33072f78efed6a31d892e291629492","modified":1614407066240},{"_id":"src/_posts/web_design_notes.md","hash":"9e852e0e6f0abe2c5e20ec337bc6bc89cbf577a0","modified":1614407129628},{"_id":"src/_posts/zero_value_typescript.md","hash":"9ec57caabd890a51721f9e3bff773d0c886f9c1a","modified":1614401063175},{"_id":"src/_posts/zero_value_typescript.doc.ts","hash":"ca0d0cc68511669069691564c62b41a57efa5903","modified":1614407178598},{"_id":"src/_posts/cache_practice/1-1.png","hash":"60467ddc7b65b54ab5564e34b97094d0171e950f","modified":1614346760254},{"_id":"src/_posts/cache_practice/1-2.png","hash":"6bf7e67604b4f82209b06759930496cd81e2fa04","modified":1614346760258},{"_id":"src/_posts/cache_practice/1-3.png","hash":"b40f80532adc455029698d2b67e3b1c8fd72f024","modified":1614346760260},{"_id":"src/_posts/cache_practice/1-4.png","hash":"30baab1a848b70154cc50633dfa22ff6dcb00d89","modified":1614346760262},{"_id":"src/_posts/cache_practice/1-1.txt","hash":"b5dae4e0b2aa2b604e666d91b4b682a30aec38e5","modified":1614346760255},{"_id":"src/_posts/cache_practice/1-2.txt","hash":"490a6d5bccab215acc65a8dfffaaa03f480ed575","modified":1614346760258},{"_id":"src/_posts/cache_practice/1-4.txt","hash":"3157f9164bd6c2dded849ce1471f5e4cca5ea0f4","modified":1614346760263},{"_id":"src/_posts/cache_practice/1-3.txt","hash":"6d7dae21396797880da2c59529fc1fca403616e6","modified":1614346760260},{"_id":"src/_posts/cache_practice/1-5.txt","hash":"d5dc6445d990f6169eca6991e4d600123904c7a3","modified":1614346760266},{"_id":"src/_posts/cache_practice/1-6-2.txt","hash":"c46c5d92abe93d5bd9c25f917b0a62b85d22759d","modified":1614346760269},{"_id":"src/_posts/cache_practice/1-6-2.png","hash":"292fb5f6b5e7238af0dff78d73dce68b19eed149","modified":1614346760268},{"_id":"src/_posts/cache_practice/1-6.png","hash":"19b1ac095f4d14a3b2058e6e77090c8fd1709504","modified":1614346760271},{"_id":"src/_posts/cache_practice/1-6.txt","hash":"2fb42a90d29b36d1c76250a4132bdf40adde8c25","modified":1614346760271},{"_id":"src/_posts/cache_practice/1-8.txt","hash":"65979652590c20398fa8446011bdae3e5769633f","modified":1614346760276},{"_id":"src/_posts/cache_practice/1-9.txt","hash":"ef6379fe6ea8bc72dd280af18232de7490f1b904","modified":1614346760279},{"_id":"src/_posts/cache_practice/1-7.txt","hash":"6fdf42851dbf93266623f7e0ee873abcc5ff499f","modified":1614346760273},{"_id":"src/_posts/concurrency_methodology/1-1.txt","hash":"ba147f9a3fb82ab0bb2e67643abb41a1aa42c6b8","modified":1614350349060},{"_id":"src/_posts/concurrency_methodology/1-2.png","hash":"d4b9f0c3491ee42d680ac1201b9dec2a3cb711a9","modified":1614350387491},{"_id":"src/_posts/concurrency_methodology/1-1.png","hash":"aad4300760757028158693f3373bbb80cc7daa6d","modified":1614350349149},{"_id":"src/_posts/concurrency_methodology/1-4.png","hash":"61576385c0968f23a700fe6b72f055703a1376e3","modified":1614356013693},{"_id":"src/_posts/concurrency_methodology/1-2.txt","hash":"6e50f7e4f6bcb43e5a977a913c97b73372e52ccb","modified":1614350387224},{"_id":"src/_posts/concurrency_methodology/1-3.txt","hash":"eef3858f5b6bdabcf2d379b45481ef5fddacd242","modified":1614355072414},{"_id":"src/_posts/concurrency_methodology/1-4.txt","hash":"222534286a3e32611a5c3c8600ca4ec680f2cc26","modified":1614356013361},{"_id":"src/_posts/concurrency_methodology/1-5.txt","hash":"555ab4cbcc0767d338c4dbcb18f7c1a0a8de1ceb","modified":1614358422063},{"_id":"src/_posts/go_channel/1.txt","hash":"86f7e437faa5a7fce15d1ddcb9eaeaea377667b8","modified":1588690608585},{"_id":"src/_posts/go_channel/4.txt","hash":"3c363836cf4e16666669a25da280a1865c2d2874","modified":1588690608586},{"_id":"src/_posts/go_channel/3.txt","hash":"84a516841ba77a5b4648de2cd0dfcb30ea46dbb4","modified":1588690608585},{"_id":"src/_posts/go_channel/2.txt","hash":"e9d71f5ee7c92d6dc9e92ffdad17b8bd49418f98","modified":1588690608586},{"_id":"src/_posts/go_channel/6.txt","hash":"4a0a19218e082a343a1b17e5333409af9d98f0f5","modified":1588690608585},{"_id":"src/_posts/go_channel/5.txt","hash":"58e6b3a414a1e090dfc6029add0f3555ccba127f","modified":1588690608585},{"_id":"src/_posts/go_channel/channel_test.go","hash":"5331e128f761e936acc1ddff2989c3f3561d86b7","modified":1588690531241},{"_id":"src/_posts/go_interface_basic/file_go_interface_basic.txt","hash":"3a5b22ae3416ae0216444a6ff115f19a090189d9","modified":1587818551255},{"_id":"src/_posts/cache_practice/1-5.png","hash":"4824a42014891c6d9e255bf3adcf1032a3ccec71","modified":1614346760266},{"_id":"src/_posts/go_interface_basic/interface_test.go","hash":"585dc57f6840cd8d2e45d2989128a01b98a4d95e","modified":1587818623962},{"_id":"src/_posts/go_trap/trap_test.go","hash":"afaf563d96bac11bedf2d95054b58f7f6316d022","modified":1588682326880},{"_id":"src/_posts/cache_practice/1-8.png","hash":"81b2a74d297bc057c5cd3de825f616f60318c353","modified":1614346760275},{"_id":"src/_posts/cache_practice/1-9.png","hash":"356d0f73c5b92b09fac7dc0f34e8b66904b77d01","modified":1614346760278},{"_id":"src/_posts/concurrency_methodology/1-3.png","hash":"6f23ca983b1dc0000cc193561787a6000b84e195","modified":1614355072945},{"_id":"src/_posts/cache_practice/1-7.png","hash":"675204e9f2dce7dec8970d106a5533fb0eadf07b","modified":1614346760273},{"_id":"src/_posts/concurrency_methodology/1-5.png","hash":"c4350ab72d168647b113feedd381987e3ed172db","modified":1614358422315},{"_id":"src/_posts/plantuml.jar","hash":"956fbb3615e2ed993c81be15c85c6c3d25206a8f","modified":1614346760453},{"_id":"src/cache_practice/1-1.txt","hash":"b5dae4e0b2aa2b604e666d91b4b682a30aec38e5","modified":1614407740924},{"_id":"src/cache_practice/1-2.png","hash":"6bf7e67604b4f82209b06759930496cd81e2fa04","modified":1614407740926},{"_id":"src/cache_practice/1-2.txt","hash":"490a6d5bccab215acc65a8dfffaaa03f480ed575","modified":1614407740931},{"_id":"src/cache_practice/1-3.png","hash":"b40f80532adc455029698d2b67e3b1c8fd72f024","modified":1614407740933},{"_id":"src/cache_practice/1-3.txt","hash":"6d7dae21396797880da2c59529fc1fca403616e6","modified":1614407740934},{"_id":"src/cache_practice/1-4.txt","hash":"3157f9164bd6c2dded849ce1471f5e4cca5ea0f4","modified":1614407740942},{"_id":"src/cache_practice/1-4.png","hash":"30baab1a848b70154cc50633dfa22ff6dcb00d89","modified":1614407740939},{"_id":"src/cache_practice/1-5.txt","hash":"d5dc6445d990f6169eca6991e4d600123904c7a3","modified":1614407740951},{"_id":"src/cache_practice/1-6-2.png","hash":"292fb5f6b5e7238af0dff78d73dce68b19eed149","modified":1614407740960},{"_id":"src/cache_practice/1-6-2.txt","hash":"c46c5d92abe93d5bd9c25f917b0a62b85d22759d","modified":1614407740962},{"_id":"src/cache_practice/1-6.png","hash":"19b1ac095f4d14a3b2058e6e77090c8fd1709504","modified":1614407740966},{"_id":"src/cache_practice/1-6.txt","hash":"2fb42a90d29b36d1c76250a4132bdf40adde8c25","modified":1614407740968},{"_id":"src/cache_practice/1-7.txt","hash":"6fdf42851dbf93266623f7e0ee873abcc5ff499f","modified":1614407740972},{"_id":"src/cache_practice/1-8.txt","hash":"65979652590c20398fa8446011bdae3e5769633f","modified":1614407740976},{"_id":"src/cache_practice/1-9.txt","hash":"ef6379fe6ea8bc72dd280af18232de7490f1b904","modified":1614407740980},{"_id":"src/concurrency_methodology/1-1.png","hash":"aad4300760757028158693f3373bbb80cc7daa6d","modified":1614407740982},{"_id":"src/concurrency_methodology/1-1.txt","hash":"ba147f9a3fb82ab0bb2e67643abb41a1aa42c6b8","modified":1614407740982},{"_id":"src/concurrency_methodology/1-2.png","hash":"d4b9f0c3491ee42d680ac1201b9dec2a3cb711a9","modified":1614407740995},{"_id":"src/concurrency_methodology/1-2.txt","hash":"6e50f7e4f6bcb43e5a977a913c97b73372e52ccb","modified":1614407740996},{"_id":"src/concurrency_methodology/1-3.txt","hash":"eef3858f5b6bdabcf2d379b45481ef5fddacd242","modified":1614407740999},{"_id":"src/concurrency_methodology/1-4.png","hash":"61576385c0968f23a700fe6b72f055703a1376e3","modified":1614407741001},{"_id":"src/concurrency_methodology/1-4.txt","hash":"222534286a3e32611a5c3c8600ca4ec680f2cc26","modified":1614407741002},{"_id":"src/concurrency_methodology/1-5.txt","hash":"555ab4cbcc0767d338c4dbcb18f7c1a0a8de1ceb","modified":1614407741009},{"_id":"src/cache_practice/1-1.png","hash":"60467ddc7b65b54ab5564e34b97094d0171e950f","modified":1614407740924},{"_id":"src/cache_practice/1-5.png","hash":"4824a42014891c6d9e255bf3adcf1032a3ccec71","modified":1614407740951},{"_id":"src/cache_practice/1-7.png","hash":"675204e9f2dce7dec8970d106a5533fb0eadf07b","modified":1614407740972},{"_id":"src/cache_practice/1-8.png","hash":"81b2a74d297bc057c5cd3de825f616f60318c353","modified":1614407740975},{"_id":"src/cache_practice/1-9.png","hash":"356d0f73c5b92b09fac7dc0f34e8b66904b77d01","modified":1614407740979},{"_id":"src/concurrency_methodology/1-3.png","hash":"6f23ca983b1dc0000cc193561787a6000b84e195","modified":1614407740998},{"_id":"src/concurrency_methodology/1-5.png","hash":"c4350ab72d168647b113feedd381987e3ed172db","modified":1614407741007},{"_id":"src/go_channel/channel_test.go","hash":"5331e128f761e936acc1ddff2989c3f3561d86b7","modified":1614407741012},{"_id":"src/go_interface_basic/interface_test.go","hash":"585dc57f6840cd8d2e45d2989128a01b98a4d95e","modified":1614407741013},{"_id":"src/go_trap/trap_test.go","hash":"afaf563d96bac11bedf2d95054b58f7f6316d022","modified":1614407741013}],"Category":[],"Data":[],"Page":[{"_content":"# 如何发现并发问题\n\n首先记住以下几点\n\n1. **原子性**：确认哪些操作不是原子性，考虑不是原子性会导致什么问题。并考虑所有操作都可能失败或进程/协程中断\n2. **操作延迟**：代码中每个操作的执行时间都是不确定的。每一行之间都可能出现非常大的延迟，需假设每行代码之间都有 sleep 操作。网络io中客户端收到消息的时间距离服务端发送消息已经过了很久，需假设:0s client 发起请求-> 2s server 接收请求 -> 4s server 响应数据 -> 6s client 接收响应\n3. **竞态**：考虑会有其他线程/协程/同一时间对数据进行修改\n4. 通过时序图分析问题 https://plantuml.com/zh/\n\n\n以 redis 互斥锁为案例实现上述方法论：\n\n先看一下不严谨的上锁操作会产生的问题\n\n![](./concurrency_methodology/1-1.png)\n\n可以通过 SET key value  EX seconds NX 保证原子性\n\n![](./concurrency_methodology/1-2.png)\n\n上锁操作已经解决了原子性问题，接下来看不严谨的解锁操作会产生的问题\n\n\n![](./concurrency_methodology/1-3.png)\n\n为了解决延迟导致的错误解锁，通过不严谨的超时判断解决问题\n\n> 请先不要看红色注释框,自己分析存在的问题。然后查看红色注释框确认答案\n\n![](./concurrency_methodology/1-4.png)\n\n在上锁时设置密码，在解锁时验证密码以避免删除了别人的锁\n\n![](./concurrency_methodology/1-5.png)\n\n\nTODO:解锁失败后锁回滚，心跳续命锁，etcd分布式锁\n","source":"concurrency_methodology.md","raw":"# 如何发现并发问题\n\n首先记住以下几点\n\n1. **原子性**：确认哪些操作不是原子性，考虑不是原子性会导致什么问题。并考虑所有操作都可能失败或进程/协程中断\n2. **操作延迟**：代码中每个操作的执行时间都是不确定的。每一行之间都可能出现非常大的延迟，需假设每行代码之间都有 sleep 操作。网络io中客户端收到消息的时间距离服务端发送消息已经过了很久，需假设:0s client 发起请求-> 2s server 接收请求 -> 4s server 响应数据 -> 6s client 接收响应\n3. **竞态**：考虑会有其他线程/协程/同一时间对数据进行修改\n4. 通过时序图分析问题 https://plantuml.com/zh/\n\n\n以 redis 互斥锁为案例实现上述方法论：\n\n先看一下不严谨的上锁操作会产生的问题\n\n![](./concurrency_methodology/1-1.png)\n\n可以通过 SET key value  EX seconds NX 保证原子性\n\n![](./concurrency_methodology/1-2.png)\n\n上锁操作已经解决了原子性问题，接下来看不严谨的解锁操作会产生的问题\n\n\n![](./concurrency_methodology/1-3.png)\n\n为了解决延迟导致的错误解锁，通过不严谨的超时判断解决问题\n\n> 请先不要看红色注释框,自己分析存在的问题。然后查看红色注释框确认答案\n\n![](./concurrency_methodology/1-4.png)\n\n在上锁时设置密码，在解锁时验证密码以避免删除了别人的锁\n\n![](./concurrency_methodology/1-5.png)\n\n\nTODO:解锁失败后锁回滚，心跳续命锁，etcd分布式锁\n","date":"2021-02-27T06:35:40.980Z","updated":"2021-02-27T06:35:40.980Z","path":"concurrency_methodology.html","title":"","comments":1,"layout":"page","_id":"cklncoptq000df3u8d8l3b4t2","content":"<h1 id=\"如何发现并发问题\"><a href=\"#如何发现并发问题\" class=\"headerlink\" title=\"如何发现并发问题\"></a>如何发现并发问题</h1><p>首先记住以下几点</p>\n<ol>\n<li><strong>原子性</strong>：确认哪些操作不是原子性，考虑不是原子性会导致什么问题。并考虑所有操作都可能失败或进程/协程中断</li>\n<li><strong>操作延迟</strong>：代码中每个操作的执行时间都是不确定的。每一行之间都可能出现非常大的延迟，需假设每行代码之间都有 sleep 操作。网络io中客户端收到消息的时间距离服务端发送消息已经过了很久，需假设:0s client 发起请求-&gt; 2s server 接收请求 -&gt; 4s server 响应数据 -&gt; 6s client 接收响应</li>\n<li><strong>竞态</strong>：考虑会有其他线程/协程/同一时间对数据进行修改</li>\n<li>通过时序图分析问题 <a href=\"https://plantuml.com/zh/\">https://plantuml.com/zh/</a></li>\n</ol>\n<p>以 redis 互斥锁为案例实现上述方法论：</p>\n<p>先看一下不严谨的上锁操作会产生的问题</p>\n<p><img src=\"./concurrency_methodology/1-1.png\"></p>\n<p>可以通过 SET key value  EX seconds NX 保证原子性</p>\n<p><img src=\"./concurrency_methodology/1-2.png\"></p>\n<p>上锁操作已经解决了原子性问题，接下来看不严谨的解锁操作会产生的问题</p>\n<p><img src=\"./concurrency_methodology/1-3.png\"></p>\n<p>为了解决延迟导致的错误解锁，通过不严谨的超时判断解决问题</p>\n<blockquote>\n<p>请先不要看红色注释框,自己分析存在的问题。然后查看红色注释框确认答案</p>\n</blockquote>\n<p><img src=\"./concurrency_methodology/1-4.png\"></p>\n<p>在上锁时设置密码，在解锁时验证密码以避免删除了别人的锁</p>\n<p><img src=\"./concurrency_methodology/1-5.png\"></p>\n<p>TODO:解锁失败后锁回滚，心跳续命锁，etcd分布式锁</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"如何发现并发问题\"><a href=\"#如何发现并发问题\" class=\"headerlink\" title=\"如何发现并发问题\"></a>如何发现并发问题</h1><p>首先记住以下几点</p>\n<ol>\n<li><strong>原子性</strong>：确认哪些操作不是原子性，考虑不是原子性会导致什么问题。并考虑所有操作都可能失败或进程/协程中断</li>\n<li><strong>操作延迟</strong>：代码中每个操作的执行时间都是不确定的。每一行之间都可能出现非常大的延迟，需假设每行代码之间都有 sleep 操作。网络io中客户端收到消息的时间距离服务端发送消息已经过了很久，需假设:0s client 发起请求-&gt; 2s server 接收请求 -&gt; 4s server 响应数据 -&gt; 6s client 接收响应</li>\n<li><strong>竞态</strong>：考虑会有其他线程/协程/同一时间对数据进行修改</li>\n<li>通过时序图分析问题 <a href=\"https://plantuml.com/zh/\">https://plantuml.com/zh/</a></li>\n</ol>\n<p>以 redis 互斥锁为案例实现上述方法论：</p>\n<p>先看一下不严谨的上锁操作会产生的问题</p>\n<p><img src=\"./concurrency_methodology/1-1.png\"></p>\n<p>可以通过 SET key value  EX seconds NX 保证原子性</p>\n<p><img src=\"./concurrency_methodology/1-2.png\"></p>\n<p>上锁操作已经解决了原子性问题，接下来看不严谨的解锁操作会产生的问题</p>\n<p><img src=\"./concurrency_methodology/1-3.png\"></p>\n<p>为了解决延迟导致的错误解锁，通过不严谨的超时判断解决问题</p>\n<blockquote>\n<p>请先不要看红色注释框,自己分析存在的问题。然后查看红色注释框确认答案</p>\n</blockquote>\n<p><img src=\"./concurrency_methodology/1-4.png\"></p>\n<p>在上锁时设置密码，在解锁时验证密码以避免删除了别人的锁</p>\n<p><img src=\"./concurrency_methodology/1-5.png\"></p>\n<p>TODO:解锁失败后锁回滚，心跳续命锁，etcd分布式锁</p>\n"},{"_content":"# JavaScript初学者建议：不要去管浏览器兼容\n\n[![blog.nimoc.io](http://blog.nimoc.io/notice/index.svg)](http://blog.nimoc.io/notice/index.html)\n\n\n如果可以回到过去的话，我会告诉自己这句话：**\"初学 JavaScript 的时候无视 DOM 和 BOM 的兼容性\"**\n## 我初学时的处境\n\n在我初学 JavaScript 的时候最头痛的就是浏览器兼容问题。在 Firefox 下面好好的代码到 IE 就不能显示了，又或者是在 IE 能正常显示的代码在 Firefox 又报错了。\n\n前端开发工程师的职责就包括跨浏览器开发。所以我就**在还不了解 JS 这门语言本身的时候去花时间学习浏览器兼容知识**，**这样会让JS学习难度增加**。**但是不能兼容主流浏览器的代码不能用在实际项目中。**\n\n**DOM 和 BOM 的兼容性问题一度让我的 JavaScript 学习停滞不前**。语言理解不够，代码又只能在特定浏览器运行。\n## 我的建议\n\n如果你正初学 JavaScript 并有着和我一样的处境的话我建议你：**初学 JavaScript 时无视 DOM 和 BOM 的兼容性，将更多的时间花在了解语言本身（ECMAScript）**。只在特定浏览器编写代码（Chrome/Firefox/Safari），实际工作中使用成熟的 JavaScript 框架（jQuery等）。放心，很少有公司会让 JS 新手用原生 JS 做前端开发。\n### 学习 JS 初期无视兼容问题有什么好处\n1. 降低学习难度\n2. 减少挫败感\n3. 花更多的时间学习 ECMAScript\n## 什么时候学习JS跨浏览器开发知识\n\n而浏览器兼容问题留到什么时候解决呢？  \n当你能熟练使用 JavaScript 框架编写可复用的代码时（jQuery插件或前端控件），或当你准备自己开发一个 JavaScript 框架时。\n## 其他一些 JavaScript 初学者建议\n1. 无编程经验千万不要拿JavaScript权威指南当入门书籍\n2. 应该用JavaScript高级程序设计最新版本（目前是第三版）作为入门书籍\n3. 传值和传址、作用域知识必须理解\n4. 调试工具必须懂并多用，学会自己捕捉错误。（chrome developer tool/Firebug）\n5. 耐心再耐心，对每一个知识点深挖能学的更轻松。\n\n以上就是我的一些分享希望若能帮助到初学 JavaScript 的你，如果觉得有误导的地方敬请立即指出。\n\n[点此订阅博客](https://github.com/nimoc/blog/issues/15)\n\n若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：[https://github.com/nimoc/blog/issues/1](https://github.com/nimoc/blog/issues/1)\n\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","source":"ignore_browser_compatibility.md","raw":"# JavaScript初学者建议：不要去管浏览器兼容\n\n[![blog.nimoc.io](http://blog.nimoc.io/notice/index.svg)](http://blog.nimoc.io/notice/index.html)\n\n\n如果可以回到过去的话，我会告诉自己这句话：**\"初学 JavaScript 的时候无视 DOM 和 BOM 的兼容性\"**\n## 我初学时的处境\n\n在我初学 JavaScript 的时候最头痛的就是浏览器兼容问题。在 Firefox 下面好好的代码到 IE 就不能显示了，又或者是在 IE 能正常显示的代码在 Firefox 又报错了。\n\n前端开发工程师的职责就包括跨浏览器开发。所以我就**在还不了解 JS 这门语言本身的时候去花时间学习浏览器兼容知识**，**这样会让JS学习难度增加**。**但是不能兼容主流浏览器的代码不能用在实际项目中。**\n\n**DOM 和 BOM 的兼容性问题一度让我的 JavaScript 学习停滞不前**。语言理解不够，代码又只能在特定浏览器运行。\n## 我的建议\n\n如果你正初学 JavaScript 并有着和我一样的处境的话我建议你：**初学 JavaScript 时无视 DOM 和 BOM 的兼容性，将更多的时间花在了解语言本身（ECMAScript）**。只在特定浏览器编写代码（Chrome/Firefox/Safari），实际工作中使用成熟的 JavaScript 框架（jQuery等）。放心，很少有公司会让 JS 新手用原生 JS 做前端开发。\n### 学习 JS 初期无视兼容问题有什么好处\n1. 降低学习难度\n2. 减少挫败感\n3. 花更多的时间学习 ECMAScript\n## 什么时候学习JS跨浏览器开发知识\n\n而浏览器兼容问题留到什么时候解决呢？  \n当你能熟练使用 JavaScript 框架编写可复用的代码时（jQuery插件或前端控件），或当你准备自己开发一个 JavaScript 框架时。\n## 其他一些 JavaScript 初学者建议\n1. 无编程经验千万不要拿JavaScript权威指南当入门书籍\n2. 应该用JavaScript高级程序设计最新版本（目前是第三版）作为入门书籍\n3. 传值和传址、作用域知识必须理解\n4. 调试工具必须懂并多用，学会自己捕捉错误。（chrome developer tool/Firebug）\n5. 耐心再耐心，对每一个知识点深挖能学的更轻松。\n\n以上就是我的一些分享希望若能帮助到初学 JavaScript 的你，如果觉得有误导的地方敬请立即指出。\n\n[点此订阅博客](https://github.com/nimoc/blog/issues/15)\n\n若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：[https://github.com/nimoc/blog/issues/1](https://github.com/nimoc/blog/issues/1)\n\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","date":"2021-02-27T06:35:41.014Z","updated":"2021-02-27T06:35:41.014Z","path":"ignore_browser_compatibility.html","title":"","comments":1,"layout":"page","_id":"cklncopyz000ef3u88m0v3fqe","content":"<h1 id=\"JavaScript初学者建议：不要去管浏览器兼容\"><a href=\"#JavaScript初学者建议：不要去管浏览器兼容\" class=\"headerlink\" title=\"JavaScript初学者建议：不要去管浏览器兼容\"></a>JavaScript初学者建议：不要去管浏览器兼容</h1><p><a href=\"http://blog.nimoc.io/notice/index.html\"><img src=\"http://blog.nimoc.io/notice/index.svg\" alt=\"blog.nimoc.io\"></a></p>\n<p>如果可以回到过去的话，我会告诉自己这句话：**”初学 JavaScript 的时候无视 DOM 和 BOM 的兼容性”**</p>\n<h2 id=\"我初学时的处境\"><a href=\"#我初学时的处境\" class=\"headerlink\" title=\"我初学时的处境\"></a>我初学时的处境</h2><p>在我初学 JavaScript 的时候最头痛的就是浏览器兼容问题。在 Firefox 下面好好的代码到 IE 就不能显示了，又或者是在 IE 能正常显示的代码在 Firefox 又报错了。</p>\n<p>前端开发工程师的职责就包括跨浏览器开发。所以我就<strong>在还不了解 JS 这门语言本身的时候去花时间学习浏览器兼容知识</strong>，<strong>这样会让JS学习难度增加</strong>。<strong>但是不能兼容主流浏览器的代码不能用在实际项目中。</strong></p>\n<p><strong>DOM 和 BOM 的兼容性问题一度让我的 JavaScript 学习停滞不前</strong>。语言理解不够，代码又只能在特定浏览器运行。</p>\n<h2 id=\"我的建议\"><a href=\"#我的建议\" class=\"headerlink\" title=\"我的建议\"></a>我的建议</h2><p>如果你正初学 JavaScript 并有着和我一样的处境的话我建议你：<strong>初学 JavaScript 时无视 DOM 和 BOM 的兼容性，将更多的时间花在了解语言本身（ECMAScript）</strong>。只在特定浏览器编写代码（Chrome/Firefox/Safari），实际工作中使用成熟的 JavaScript 框架（jQuery等）。放心，很少有公司会让 JS 新手用原生 JS 做前端开发。</p>\n<h3 id=\"学习-JS-初期无视兼容问题有什么好处\"><a href=\"#学习-JS-初期无视兼容问题有什么好处\" class=\"headerlink\" title=\"学习 JS 初期无视兼容问题有什么好处\"></a>学习 JS 初期无视兼容问题有什么好处</h3><ol>\n<li>降低学习难度</li>\n<li>减少挫败感</li>\n<li>花更多的时间学习 ECMAScript<h2 id=\"什么时候学习JS跨浏览器开发知识\"><a href=\"#什么时候学习JS跨浏览器开发知识\" class=\"headerlink\" title=\"什么时候学习JS跨浏览器开发知识\"></a>什么时候学习JS跨浏览器开发知识</h2></li>\n</ol>\n<p>而浏览器兼容问题留到什么时候解决呢？<br>当你能熟练使用 JavaScript 框架编写可复用的代码时（jQuery插件或前端控件），或当你准备自己开发一个 JavaScript 框架时。</p>\n<h2 id=\"其他一些-JavaScript-初学者建议\"><a href=\"#其他一些-JavaScript-初学者建议\" class=\"headerlink\" title=\"其他一些 JavaScript 初学者建议\"></a>其他一些 JavaScript 初学者建议</h2><ol>\n<li>无编程经验千万不要拿JavaScript权威指南当入门书籍</li>\n<li>应该用JavaScript高级程序设计最新版本（目前是第三版）作为入门书籍</li>\n<li>传值和传址、作用域知识必须理解</li>\n<li>调试工具必须懂并多用，学会自己捕捉错误。（chrome developer tool/Firebug）</li>\n<li>耐心再耐心，对每一个知识点深挖能学的更轻松。</li>\n</ol>\n<p>以上就是我的一些分享希望若能帮助到初学 JavaScript 的你，如果觉得有误导的地方敬请立即指出。</p>\n<p><a href=\"https://github.com/nimoc/blog/issues/15\">点此订阅博客</a></p>\n<p>若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：<a href=\"https://github.com/nimoc/blog/issues/1\">https://github.com/nimoc/blog/issues/1</a></p>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JavaScript初学者建议：不要去管浏览器兼容\"><a href=\"#JavaScript初学者建议：不要去管浏览器兼容\" class=\"headerlink\" title=\"JavaScript初学者建议：不要去管浏览器兼容\"></a>JavaScript初学者建议：不要去管浏览器兼容</h1><p><a href=\"http://blog.nimoc.io/notice/index.html\"><img src=\"http://blog.nimoc.io/notice/index.svg\" alt=\"blog.nimoc.io\"></a></p>\n<p>如果可以回到过去的话，我会告诉自己这句话：**”初学 JavaScript 的时候无视 DOM 和 BOM 的兼容性”**</p>\n<h2 id=\"我初学时的处境\"><a href=\"#我初学时的处境\" class=\"headerlink\" title=\"我初学时的处境\"></a>我初学时的处境</h2><p>在我初学 JavaScript 的时候最头痛的就是浏览器兼容问题。在 Firefox 下面好好的代码到 IE 就不能显示了，又或者是在 IE 能正常显示的代码在 Firefox 又报错了。</p>\n<p>前端开发工程师的职责就包括跨浏览器开发。所以我就<strong>在还不了解 JS 这门语言本身的时候去花时间学习浏览器兼容知识</strong>，<strong>这样会让JS学习难度增加</strong>。<strong>但是不能兼容主流浏览器的代码不能用在实际项目中。</strong></p>\n<p><strong>DOM 和 BOM 的兼容性问题一度让我的 JavaScript 学习停滞不前</strong>。语言理解不够，代码又只能在特定浏览器运行。</p>\n<h2 id=\"我的建议\"><a href=\"#我的建议\" class=\"headerlink\" title=\"我的建议\"></a>我的建议</h2><p>如果你正初学 JavaScript 并有着和我一样的处境的话我建议你：<strong>初学 JavaScript 时无视 DOM 和 BOM 的兼容性，将更多的时间花在了解语言本身（ECMAScript）</strong>。只在特定浏览器编写代码（Chrome/Firefox/Safari），实际工作中使用成熟的 JavaScript 框架（jQuery等）。放心，很少有公司会让 JS 新手用原生 JS 做前端开发。</p>\n<h3 id=\"学习-JS-初期无视兼容问题有什么好处\"><a href=\"#学习-JS-初期无视兼容问题有什么好处\" class=\"headerlink\" title=\"学习 JS 初期无视兼容问题有什么好处\"></a>学习 JS 初期无视兼容问题有什么好处</h3><ol>\n<li>降低学习难度</li>\n<li>减少挫败感</li>\n<li>花更多的时间学习 ECMAScript<h2 id=\"什么时候学习JS跨浏览器开发知识\"><a href=\"#什么时候学习JS跨浏览器开发知识\" class=\"headerlink\" title=\"什么时候学习JS跨浏览器开发知识\"></a>什么时候学习JS跨浏览器开发知识</h2></li>\n</ol>\n<p>而浏览器兼容问题留到什么时候解决呢？<br>当你能熟练使用 JavaScript 框架编写可复用的代码时（jQuery插件或前端控件），或当你准备自己开发一个 JavaScript 框架时。</p>\n<h2 id=\"其他一些-JavaScript-初学者建议\"><a href=\"#其他一些-JavaScript-初学者建议\" class=\"headerlink\" title=\"其他一些 JavaScript 初学者建议\"></a>其他一些 JavaScript 初学者建议</h2><ol>\n<li>无编程经验千万不要拿JavaScript权威指南当入门书籍</li>\n<li>应该用JavaScript高级程序设计最新版本（目前是第三版）作为入门书籍</li>\n<li>传值和传址、作用域知识必须理解</li>\n<li>调试工具必须懂并多用，学会自己捕捉错误。（chrome developer tool/Firebug）</li>\n<li>耐心再耐心，对每一个知识点深挖能学的更轻松。</li>\n</ol>\n<p>以上就是我的一些分享希望若能帮助到初学 JavaScript 的你，如果觉得有误导的地方敬请立即指出。</p>\n<p><a href=\"https://github.com/nimoc/blog/issues/15\">点此订阅博客</a></p>\n<p>若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：<a href=\"https://github.com/nimoc/blog/issues/1\">https://github.com/nimoc/blog/issues/1</a></p>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>"},{"_content":"# Web 前端的困局与突破\n\n[![blog.nimoc.io](http://blog.nimoc.io/notice/index.svg)](http://blog.nimoc.io/notice/index.html)\n\n> 每个Web前端都会不时思考自身对于团队的价值和在团队中的话语权,这类思考背后存在困局和突破\n\n## 困局\n\n困局必然是负能量,耐下心来了解困局后再看突破.\n\n### 价值\n\n在团队中前端的职责是实现原型和设计工作中的客户端部分,是**实现者**.很少参与功能/程序设计.极少数业务场景下是重前端的.需要前端实现可视化编辑组件(可视化创建页面/Web编辑器).这样的团队少之又少.大部分情况下前端的职责就只是实现产品设计.\n\n前端巧妙的程序设计,优秀的页面大部分情况下与商业逻辑是无关的.技术是依附于商业生存的.在客观的管理者视角看,前端是有价值的,但在技术团队中前端的价值不重要.只要把活干好了,别出错就可以了.也不需要维护管理公司命脉数据库.\n\n> 价值的意义:收入,市场竞争力都是基于价值的\n\n\n\n### 话语权\n\n从项目管理的角度看:\n\n| 岗位     | 职责                                 | 分工               |\n| -------- | ------------------------------------ | ------------------ |\n| 产品经理 | 基于市场需求表达产品界面和功能逻辑   | 需求与业务逻辑设计 |\n| UI设计   | 基于产品表达的界面进行界面设计       | 基于原型UI交互设计 |\n| 前端     | 基于产品原型与UI设计完成客户端的实现 | 实现客户端         |\n| 后端     | 数据结构与程序的设计和实现           | 程序设计与实现     |\n\n\n\n产品同事对项目有绝对的话语权,设计同事是产品同事的下游,是基于产品同事的要求完成界面设计工作.\n\n后端同事看似也是实现者,实则是**后端是程序设计者**\n\n当前端遇到上下游意见相左时,因为前端的分工是实现者,所以往往前端是没有话语权的.\n\n有些人常说的用户体验,实际上这个活是UI设计干的活,前端只需要做到快速的基于设计完成客户端开发.并保证客户端的加载性能.\n\n高流量多信息聚合的页面需要基于前端的专业意见去协作开发,不过这种情况太少了\n\n> 话语权的意义: 决定项目中与前端相关的问题能用你的专业想法解决,而不是由\"外行\"解决.\n\n\n\n### 恶劣的的工作环境\n\n1. 没有产品原型\n2. 没有设计稿\n3. 没有后端接口文档\n4. 联调阶段扯皮\n\n以上问题在很多小团队出现的特别频繁,严重影响了工作进度.\n\n前端是实现者,要基于设计去实现,基于实现去\"消费\"接口.\n\n3 4 问题是出现的最频繁的,扯皮无止境,不停的内耗.\n\n\n\n### 天花板\n\n随着三大剑客(react vue ng)的流行,基于成熟的组件库能极大的提高前端开发效率.大部分团队不需要再造适合公司业务场景的组件轮子.从业两三年就可以达到日常90%的页面开发工作是\"**机械化**\"的.大量的时间反而是解决上节说到的恶劣的工作环境\n\n前端工程管理,前端开发流程的制定,前端架构设计这些都是由前端话事人去设计和执行的.在技能水平+经验+对团队的了解程度+话语权上都应该由前端话事人去解决.大部分前端只需要遵循团队流程规范即可.\n\n\n\n### JavaScript与Node\n\n> JavaScript 是困局这一点是很多人没有意识到,也不认同的.\n\nJavaScript 过于灵活宽松让代码不易于维护.动态语言在大型项目会降低可维护性. TypeScript 的类型系统需要对JavaScript 妥协.始终让前端在语言层面无法使用类型系统方便的写出分层明确和易于维护的代码.\n\n这点不深入讨论,了解过其他强类型系统语言再来使用 TypeScript 写非常严谨容错率低的代码自然就能明白.\n\n\n\n很多团队希望使用 Node 去提升自己的话语权,殊不知必须 Node 与公司所遇到的场景和问题契合才能解决问题.\n\n不要把自己限死在 JavaScript ,前端掌握当前团队的后端语言不是啥坏事.不是每个项目都需要要SSR.都需要使用Node进行前后端分离.\n\n## 突破\n\n困局有:\n\n1. 价值\n2. 话语权\n3. 恶劣的工作环境\n4. 天花板\n5. JavaScript\n\n\n\n一句话就能说明白如何突破:\n\n**不要把自己限制在客户端的实现者,让自己参与产品程序设计,精前端,懂业务,懂后端.**\n\n### 恶劣的工作环境\n\n当**没有产品原型和设计**的情况下,正确更多的时间,去了解产品需求,使用前端界面作为\"原型\".完成部分产品没时间或者认为不重要的产品设计工作.没有设计的情况下基于成熟的UI组件,antd element 完成表单类的开发,一些交互设计自己做主设计交互细节并实现.没有设计的情况下大概率你能做主.\n\n当后端**给不到接口**时,在前端角度维护接口文档,通过接口更深入的理解程序设计.有理有据的要求后端同时配合你给到接口让你使用,因为客户端是接口消费方.如果后端给不到接口就自行模拟接口,再联调的时候再修改也无妨,这样单前端定义接口的过程就是在进行程序设计.基于客观接口进行联调,避免主观争论.\n\n善于**使用错误追踪系统**记录错误,例如 Sentry . 有理有据的去排查问题,定位问题,给出问题修复报告.防止莫名其妙背锅.\n\n> 愿你不遇到恶劣的工作环境,遇到相互配合的好同事\n\n\n\n### 天花板与JavaScript\n\n在前端角度不要局限于 Web 前端,在吃透当前工作环境时去了解其他客户端技术,比如各类小程序, IOS Android.\n\nSwift Kotlin Java 都是不错的语言,了解他们后再回头写 TypeScript 会对编程有新的认识和理解.\n\n不要局限于前端,在项目中了解目前团队的后端语言和后端知识.参与后端提供的接口中数据类型的定义,(类似 TypeScript 中的 interface).了解后端语言(PHP就算了),对项目后端的程序设计有足够了解.必要时尝试参与后端开发,先完成一些简单不重要的后端工作.\n\n大部分情况下足够努力的前端做个三五年很容易在小团队做到天花板.不考虑换工作的情况下,去向全栈发展是个很好的选择.只有掌握了程序设计才能掌握话语权.\n\n现在很多人错误的理解了全栈,认为会 node 写个编译工具就是全栈,不要局限于掌握的后端语言是 Node . 使用 Node 能免去学习一门新语言的好处没有那么重要,反而会将你局限在 JavaScript.\n\n**了解一门强类型语言,了解各种后端技术.了解其他前端领域.**\n\n\n\n### 价值与话语权\n\n吃透目前工作环境所需要使用的前端技术后,由**实现者变为程序设计者**不要将自己局限于\"页面仔\".去理解了解业务才能提升自身价值.\n\n## 总结\n\n始于前端,不局限于前端.**不要把自己限制在客户端的实现者,让自己参与产品程序设计,精前端,懂业务,懂后端.\n\n原文地址 https://github.com/nimoc/blog/issues/35 (原文保持持续更新和更多的评论) \n","source":"f2e_up.md","raw":"# Web 前端的困局与突破\n\n[![blog.nimoc.io](http://blog.nimoc.io/notice/index.svg)](http://blog.nimoc.io/notice/index.html)\n\n> 每个Web前端都会不时思考自身对于团队的价值和在团队中的话语权,这类思考背后存在困局和突破\n\n## 困局\n\n困局必然是负能量,耐下心来了解困局后再看突破.\n\n### 价值\n\n在团队中前端的职责是实现原型和设计工作中的客户端部分,是**实现者**.很少参与功能/程序设计.极少数业务场景下是重前端的.需要前端实现可视化编辑组件(可视化创建页面/Web编辑器).这样的团队少之又少.大部分情况下前端的职责就只是实现产品设计.\n\n前端巧妙的程序设计,优秀的页面大部分情况下与商业逻辑是无关的.技术是依附于商业生存的.在客观的管理者视角看,前端是有价值的,但在技术团队中前端的价值不重要.只要把活干好了,别出错就可以了.也不需要维护管理公司命脉数据库.\n\n> 价值的意义:收入,市场竞争力都是基于价值的\n\n\n\n### 话语权\n\n从项目管理的角度看:\n\n| 岗位     | 职责                                 | 分工               |\n| -------- | ------------------------------------ | ------------------ |\n| 产品经理 | 基于市场需求表达产品界面和功能逻辑   | 需求与业务逻辑设计 |\n| UI设计   | 基于产品表达的界面进行界面设计       | 基于原型UI交互设计 |\n| 前端     | 基于产品原型与UI设计完成客户端的实现 | 实现客户端         |\n| 后端     | 数据结构与程序的设计和实现           | 程序设计与实现     |\n\n\n\n产品同事对项目有绝对的话语权,设计同事是产品同事的下游,是基于产品同事的要求完成界面设计工作.\n\n后端同事看似也是实现者,实则是**后端是程序设计者**\n\n当前端遇到上下游意见相左时,因为前端的分工是实现者,所以往往前端是没有话语权的.\n\n有些人常说的用户体验,实际上这个活是UI设计干的活,前端只需要做到快速的基于设计完成客户端开发.并保证客户端的加载性能.\n\n高流量多信息聚合的页面需要基于前端的专业意见去协作开发,不过这种情况太少了\n\n> 话语权的意义: 决定项目中与前端相关的问题能用你的专业想法解决,而不是由\"外行\"解决.\n\n\n\n### 恶劣的的工作环境\n\n1. 没有产品原型\n2. 没有设计稿\n3. 没有后端接口文档\n4. 联调阶段扯皮\n\n以上问题在很多小团队出现的特别频繁,严重影响了工作进度.\n\n前端是实现者,要基于设计去实现,基于实现去\"消费\"接口.\n\n3 4 问题是出现的最频繁的,扯皮无止境,不停的内耗.\n\n\n\n### 天花板\n\n随着三大剑客(react vue ng)的流行,基于成熟的组件库能极大的提高前端开发效率.大部分团队不需要再造适合公司业务场景的组件轮子.从业两三年就可以达到日常90%的页面开发工作是\"**机械化**\"的.大量的时间反而是解决上节说到的恶劣的工作环境\n\n前端工程管理,前端开发流程的制定,前端架构设计这些都是由前端话事人去设计和执行的.在技能水平+经验+对团队的了解程度+话语权上都应该由前端话事人去解决.大部分前端只需要遵循团队流程规范即可.\n\n\n\n### JavaScript与Node\n\n> JavaScript 是困局这一点是很多人没有意识到,也不认同的.\n\nJavaScript 过于灵活宽松让代码不易于维护.动态语言在大型项目会降低可维护性. TypeScript 的类型系统需要对JavaScript 妥协.始终让前端在语言层面无法使用类型系统方便的写出分层明确和易于维护的代码.\n\n这点不深入讨论,了解过其他强类型系统语言再来使用 TypeScript 写非常严谨容错率低的代码自然就能明白.\n\n\n\n很多团队希望使用 Node 去提升自己的话语权,殊不知必须 Node 与公司所遇到的场景和问题契合才能解决问题.\n\n不要把自己限死在 JavaScript ,前端掌握当前团队的后端语言不是啥坏事.不是每个项目都需要要SSR.都需要使用Node进行前后端分离.\n\n## 突破\n\n困局有:\n\n1. 价值\n2. 话语权\n3. 恶劣的工作环境\n4. 天花板\n5. JavaScript\n\n\n\n一句话就能说明白如何突破:\n\n**不要把自己限制在客户端的实现者,让自己参与产品程序设计,精前端,懂业务,懂后端.**\n\n### 恶劣的工作环境\n\n当**没有产品原型和设计**的情况下,正确更多的时间,去了解产品需求,使用前端界面作为\"原型\".完成部分产品没时间或者认为不重要的产品设计工作.没有设计的情况下基于成熟的UI组件,antd element 完成表单类的开发,一些交互设计自己做主设计交互细节并实现.没有设计的情况下大概率你能做主.\n\n当后端**给不到接口**时,在前端角度维护接口文档,通过接口更深入的理解程序设计.有理有据的要求后端同时配合你给到接口让你使用,因为客户端是接口消费方.如果后端给不到接口就自行模拟接口,再联调的时候再修改也无妨,这样单前端定义接口的过程就是在进行程序设计.基于客观接口进行联调,避免主观争论.\n\n善于**使用错误追踪系统**记录错误,例如 Sentry . 有理有据的去排查问题,定位问题,给出问题修复报告.防止莫名其妙背锅.\n\n> 愿你不遇到恶劣的工作环境,遇到相互配合的好同事\n\n\n\n### 天花板与JavaScript\n\n在前端角度不要局限于 Web 前端,在吃透当前工作环境时去了解其他客户端技术,比如各类小程序, IOS Android.\n\nSwift Kotlin Java 都是不错的语言,了解他们后再回头写 TypeScript 会对编程有新的认识和理解.\n\n不要局限于前端,在项目中了解目前团队的后端语言和后端知识.参与后端提供的接口中数据类型的定义,(类似 TypeScript 中的 interface).了解后端语言(PHP就算了),对项目后端的程序设计有足够了解.必要时尝试参与后端开发,先完成一些简单不重要的后端工作.\n\n大部分情况下足够努力的前端做个三五年很容易在小团队做到天花板.不考虑换工作的情况下,去向全栈发展是个很好的选择.只有掌握了程序设计才能掌握话语权.\n\n现在很多人错误的理解了全栈,认为会 node 写个编译工具就是全栈,不要局限于掌握的后端语言是 Node . 使用 Node 能免去学习一门新语言的好处没有那么重要,反而会将你局限在 JavaScript.\n\n**了解一门强类型语言,了解各种后端技术.了解其他前端领域.**\n\n\n\n### 价值与话语权\n\n吃透目前工作环境所需要使用的前端技术后,由**实现者变为程序设计者**不要将自己局限于\"页面仔\".去理解了解业务才能提升自身价值.\n\n## 总结\n\n始于前端,不局限于前端.**不要把自己限制在客户端的实现者,让自己参与产品程序设计,精前端,懂业务,懂后端.\n\n原文地址 https://github.com/nimoc/blog/issues/35 (原文保持持续更新和更多的评论) \n","date":"2021-02-27T06:35:41.009Z","updated":"2021-02-27T06:35:41.009Z","path":"f2e_up.html","title":"","comments":1,"layout":"page","_id":"cklncopzc000ff3u82dif5fak","content":"<h1 id=\"Web-前端的困局与突破\"><a href=\"#Web-前端的困局与突破\" class=\"headerlink\" title=\"Web 前端的困局与突破\"></a>Web 前端的困局与突破</h1><p><a href=\"http://blog.nimoc.io/notice/index.html\"><img src=\"http://blog.nimoc.io/notice/index.svg\" alt=\"blog.nimoc.io\"></a></p>\n<blockquote>\n<p>每个Web前端都会不时思考自身对于团队的价值和在团队中的话语权,这类思考背后存在困局和突破</p>\n</blockquote>\n<h2 id=\"困局\"><a href=\"#困局\" class=\"headerlink\" title=\"困局\"></a>困局</h2><p>困局必然是负能量,耐下心来了解困局后再看突破.</p>\n<h3 id=\"价值\"><a href=\"#价值\" class=\"headerlink\" title=\"价值\"></a>价值</h3><p>在团队中前端的职责是实现原型和设计工作中的客户端部分,是<strong>实现者</strong>.很少参与功能/程序设计.极少数业务场景下是重前端的.需要前端实现可视化编辑组件(可视化创建页面/Web编辑器).这样的团队少之又少.大部分情况下前端的职责就只是实现产品设计.</p>\n<p>前端巧妙的程序设计,优秀的页面大部分情况下与商业逻辑是无关的.技术是依附于商业生存的.在客观的管理者视角看,前端是有价值的,但在技术团队中前端的价值不重要.只要把活干好了,别出错就可以了.也不需要维护管理公司命脉数据库.</p>\n<blockquote>\n<p>价值的意义:收入,市场竞争力都是基于价值的</p>\n</blockquote>\n<h3 id=\"话语权\"><a href=\"#话语权\" class=\"headerlink\" title=\"话语权\"></a>话语权</h3><p>从项目管理的角度看:</p>\n<table>\n<thead>\n<tr>\n<th>岗位</th>\n<th>职责</th>\n<th>分工</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>产品经理</td>\n<td>基于市场需求表达产品界面和功能逻辑</td>\n<td>需求与业务逻辑设计</td>\n</tr>\n<tr>\n<td>UI设计</td>\n<td>基于产品表达的界面进行界面设计</td>\n<td>基于原型UI交互设计</td>\n</tr>\n<tr>\n<td>前端</td>\n<td>基于产品原型与UI设计完成客户端的实现</td>\n<td>实现客户端</td>\n</tr>\n<tr>\n<td>后端</td>\n<td>数据结构与程序的设计和实现</td>\n<td>程序设计与实现</td>\n</tr>\n</tbody></table>\n<p>产品同事对项目有绝对的话语权,设计同事是产品同事的下游,是基于产品同事的要求完成界面设计工作.</p>\n<p>后端同事看似也是实现者,实则是<strong>后端是程序设计者</strong></p>\n<p>当前端遇到上下游意见相左时,因为前端的分工是实现者,所以往往前端是没有话语权的.</p>\n<p>有些人常说的用户体验,实际上这个活是UI设计干的活,前端只需要做到快速的基于设计完成客户端开发.并保证客户端的加载性能.</p>\n<p>高流量多信息聚合的页面需要基于前端的专业意见去协作开发,不过这种情况太少了</p>\n<blockquote>\n<p>话语权的意义: 决定项目中与前端相关的问题能用你的专业想法解决,而不是由”外行”解决.</p>\n</blockquote>\n<h3 id=\"恶劣的的工作环境\"><a href=\"#恶劣的的工作环境\" class=\"headerlink\" title=\"恶劣的的工作环境\"></a>恶劣的的工作环境</h3><ol>\n<li>没有产品原型</li>\n<li>没有设计稿</li>\n<li>没有后端接口文档</li>\n<li>联调阶段扯皮</li>\n</ol>\n<p>以上问题在很多小团队出现的特别频繁,严重影响了工作进度.</p>\n<p>前端是实现者,要基于设计去实现,基于实现去”消费”接口.</p>\n<p>3 4 问题是出现的最频繁的,扯皮无止境,不停的内耗.</p>\n<h3 id=\"天花板\"><a href=\"#天花板\" class=\"headerlink\" title=\"天花板\"></a>天花板</h3><p>随着三大剑客(react vue ng)的流行,基于成熟的组件库能极大的提高前端开发效率.大部分团队不需要再造适合公司业务场景的组件轮子.从业两三年就可以达到日常90%的页面开发工作是”<strong>机械化</strong>“的.大量的时间反而是解决上节说到的恶劣的工作环境</p>\n<p>前端工程管理,前端开发流程的制定,前端架构设计这些都是由前端话事人去设计和执行的.在技能水平+经验+对团队的了解程度+话语权上都应该由前端话事人去解决.大部分前端只需要遵循团队流程规范即可.</p>\n<h3 id=\"JavaScript与Node\"><a href=\"#JavaScript与Node\" class=\"headerlink\" title=\"JavaScript与Node\"></a>JavaScript与Node</h3><blockquote>\n<p>JavaScript 是困局这一点是很多人没有意识到,也不认同的.</p>\n</blockquote>\n<p>JavaScript 过于灵活宽松让代码不易于维护.动态语言在大型项目会降低可维护性. TypeScript 的类型系统需要对JavaScript 妥协.始终让前端在语言层面无法使用类型系统方便的写出分层明确和易于维护的代码.</p>\n<p>这点不深入讨论,了解过其他强类型系统语言再来使用 TypeScript 写非常严谨容错率低的代码自然就能明白.</p>\n<p>很多团队希望使用 Node 去提升自己的话语权,殊不知必须 Node 与公司所遇到的场景和问题契合才能解决问题.</p>\n<p>不要把自己限死在 JavaScript ,前端掌握当前团队的后端语言不是啥坏事.不是每个项目都需要要SSR.都需要使用Node进行前后端分离.</p>\n<h2 id=\"突破\"><a href=\"#突破\" class=\"headerlink\" title=\"突破\"></a>突破</h2><p>困局有:</p>\n<ol>\n<li>价值</li>\n<li>话语权</li>\n<li>恶劣的工作环境</li>\n<li>天花板</li>\n<li>JavaScript</li>\n</ol>\n<p>一句话就能说明白如何突破:</p>\n<p><strong>不要把自己限制在客户端的实现者,让自己参与产品程序设计,精前端,懂业务,懂后端.</strong></p>\n<h3 id=\"恶劣的工作环境\"><a href=\"#恶劣的工作环境\" class=\"headerlink\" title=\"恶劣的工作环境\"></a>恶劣的工作环境</h3><p>当<strong>没有产品原型和设计</strong>的情况下,正确更多的时间,去了解产品需求,使用前端界面作为”原型”.完成部分产品没时间或者认为不重要的产品设计工作.没有设计的情况下基于成熟的UI组件,antd element 完成表单类的开发,一些交互设计自己做主设计交互细节并实现.没有设计的情况下大概率你能做主.</p>\n<p>当后端<strong>给不到接口</strong>时,在前端角度维护接口文档,通过接口更深入的理解程序设计.有理有据的要求后端同时配合你给到接口让你使用,因为客户端是接口消费方.如果后端给不到接口就自行模拟接口,再联调的时候再修改也无妨,这样单前端定义接口的过程就是在进行程序设计.基于客观接口进行联调,避免主观争论.</p>\n<p>善于<strong>使用错误追踪系统</strong>记录错误,例如 Sentry . 有理有据的去排查问题,定位问题,给出问题修复报告.防止莫名其妙背锅.</p>\n<blockquote>\n<p>愿你不遇到恶劣的工作环境,遇到相互配合的好同事</p>\n</blockquote>\n<h3 id=\"天花板与JavaScript\"><a href=\"#天花板与JavaScript\" class=\"headerlink\" title=\"天花板与JavaScript\"></a>天花板与JavaScript</h3><p>在前端角度不要局限于 Web 前端,在吃透当前工作环境时去了解其他客户端技术,比如各类小程序, IOS Android.</p>\n<p>Swift Kotlin Java 都是不错的语言,了解他们后再回头写 TypeScript 会对编程有新的认识和理解.</p>\n<p>不要局限于前端,在项目中了解目前团队的后端语言和后端知识.参与后端提供的接口中数据类型的定义,(类似 TypeScript 中的 interface).了解后端语言(PHP就算了),对项目后端的程序设计有足够了解.必要时尝试参与后端开发,先完成一些简单不重要的后端工作.</p>\n<p>大部分情况下足够努力的前端做个三五年很容易在小团队做到天花板.不考虑换工作的情况下,去向全栈发展是个很好的选择.只有掌握了程序设计才能掌握话语权.</p>\n<p>现在很多人错误的理解了全栈,认为会 node 写个编译工具就是全栈,不要局限于掌握的后端语言是 Node . 使用 Node 能免去学习一门新语言的好处没有那么重要,反而会将你局限在 JavaScript.</p>\n<p><strong>了解一门强类型语言,了解各种后端技术.了解其他前端领域.</strong></p>\n<h3 id=\"价值与话语权\"><a href=\"#价值与话语权\" class=\"headerlink\" title=\"价值与话语权\"></a>价值与话语权</h3><p>吃透目前工作环境所需要使用的前端技术后,由<strong>实现者变为程序设计者</strong>不要将自己局限于”页面仔”.去理解了解业务才能提升自身价值.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>始于前端,不局限于前端.**不要把自己限制在客户端的实现者,让自己参与产品程序设计,精前端,懂业务,懂后端.</p>\n<p>原文地址 <a href=\"https://github.com/nimoc/blog/issues/35\">https://github.com/nimoc/blog/issues/35</a> (原文保持持续更新和更多的评论) </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Web-前端的困局与突破\"><a href=\"#Web-前端的困局与突破\" class=\"headerlink\" title=\"Web 前端的困局与突破\"></a>Web 前端的困局与突破</h1><p><a href=\"http://blog.nimoc.io/notice/index.html\"><img src=\"http://blog.nimoc.io/notice/index.svg\" alt=\"blog.nimoc.io\"></a></p>\n<blockquote>\n<p>每个Web前端都会不时思考自身对于团队的价值和在团队中的话语权,这类思考背后存在困局和突破</p>\n</blockquote>\n<h2 id=\"困局\"><a href=\"#困局\" class=\"headerlink\" title=\"困局\"></a>困局</h2><p>困局必然是负能量,耐下心来了解困局后再看突破.</p>\n<h3 id=\"价值\"><a href=\"#价值\" class=\"headerlink\" title=\"价值\"></a>价值</h3><p>在团队中前端的职责是实现原型和设计工作中的客户端部分,是<strong>实现者</strong>.很少参与功能/程序设计.极少数业务场景下是重前端的.需要前端实现可视化编辑组件(可视化创建页面/Web编辑器).这样的团队少之又少.大部分情况下前端的职责就只是实现产品设计.</p>\n<p>前端巧妙的程序设计,优秀的页面大部分情况下与商业逻辑是无关的.技术是依附于商业生存的.在客观的管理者视角看,前端是有价值的,但在技术团队中前端的价值不重要.只要把活干好了,别出错就可以了.也不需要维护管理公司命脉数据库.</p>\n<blockquote>\n<p>价值的意义:收入,市场竞争力都是基于价值的</p>\n</blockquote>\n<h3 id=\"话语权\"><a href=\"#话语权\" class=\"headerlink\" title=\"话语权\"></a>话语权</h3><p>从项目管理的角度看:</p>\n<table>\n<thead>\n<tr>\n<th>岗位</th>\n<th>职责</th>\n<th>分工</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>产品经理</td>\n<td>基于市场需求表达产品界面和功能逻辑</td>\n<td>需求与业务逻辑设计</td>\n</tr>\n<tr>\n<td>UI设计</td>\n<td>基于产品表达的界面进行界面设计</td>\n<td>基于原型UI交互设计</td>\n</tr>\n<tr>\n<td>前端</td>\n<td>基于产品原型与UI设计完成客户端的实现</td>\n<td>实现客户端</td>\n</tr>\n<tr>\n<td>后端</td>\n<td>数据结构与程序的设计和实现</td>\n<td>程序设计与实现</td>\n</tr>\n</tbody></table>\n<p>产品同事对项目有绝对的话语权,设计同事是产品同事的下游,是基于产品同事的要求完成界面设计工作.</p>\n<p>后端同事看似也是实现者,实则是<strong>后端是程序设计者</strong></p>\n<p>当前端遇到上下游意见相左时,因为前端的分工是实现者,所以往往前端是没有话语权的.</p>\n<p>有些人常说的用户体验,实际上这个活是UI设计干的活,前端只需要做到快速的基于设计完成客户端开发.并保证客户端的加载性能.</p>\n<p>高流量多信息聚合的页面需要基于前端的专业意见去协作开发,不过这种情况太少了</p>\n<blockquote>\n<p>话语权的意义: 决定项目中与前端相关的问题能用你的专业想法解决,而不是由”外行”解决.</p>\n</blockquote>\n<h3 id=\"恶劣的的工作环境\"><a href=\"#恶劣的的工作环境\" class=\"headerlink\" title=\"恶劣的的工作环境\"></a>恶劣的的工作环境</h3><ol>\n<li>没有产品原型</li>\n<li>没有设计稿</li>\n<li>没有后端接口文档</li>\n<li>联调阶段扯皮</li>\n</ol>\n<p>以上问题在很多小团队出现的特别频繁,严重影响了工作进度.</p>\n<p>前端是实现者,要基于设计去实现,基于实现去”消费”接口.</p>\n<p>3 4 问题是出现的最频繁的,扯皮无止境,不停的内耗.</p>\n<h3 id=\"天花板\"><a href=\"#天花板\" class=\"headerlink\" title=\"天花板\"></a>天花板</h3><p>随着三大剑客(react vue ng)的流行,基于成熟的组件库能极大的提高前端开发效率.大部分团队不需要再造适合公司业务场景的组件轮子.从业两三年就可以达到日常90%的页面开发工作是”<strong>机械化</strong>“的.大量的时间反而是解决上节说到的恶劣的工作环境</p>\n<p>前端工程管理,前端开发流程的制定,前端架构设计这些都是由前端话事人去设计和执行的.在技能水平+经验+对团队的了解程度+话语权上都应该由前端话事人去解决.大部分前端只需要遵循团队流程规范即可.</p>\n<h3 id=\"JavaScript与Node\"><a href=\"#JavaScript与Node\" class=\"headerlink\" title=\"JavaScript与Node\"></a>JavaScript与Node</h3><blockquote>\n<p>JavaScript 是困局这一点是很多人没有意识到,也不认同的.</p>\n</blockquote>\n<p>JavaScript 过于灵活宽松让代码不易于维护.动态语言在大型项目会降低可维护性. TypeScript 的类型系统需要对JavaScript 妥协.始终让前端在语言层面无法使用类型系统方便的写出分层明确和易于维护的代码.</p>\n<p>这点不深入讨论,了解过其他强类型系统语言再来使用 TypeScript 写非常严谨容错率低的代码自然就能明白.</p>\n<p>很多团队希望使用 Node 去提升自己的话语权,殊不知必须 Node 与公司所遇到的场景和问题契合才能解决问题.</p>\n<p>不要把自己限死在 JavaScript ,前端掌握当前团队的后端语言不是啥坏事.不是每个项目都需要要SSR.都需要使用Node进行前后端分离.</p>\n<h2 id=\"突破\"><a href=\"#突破\" class=\"headerlink\" title=\"突破\"></a>突破</h2><p>困局有:</p>\n<ol>\n<li>价值</li>\n<li>话语权</li>\n<li>恶劣的工作环境</li>\n<li>天花板</li>\n<li>JavaScript</li>\n</ol>\n<p>一句话就能说明白如何突破:</p>\n<p><strong>不要把自己限制在客户端的实现者,让自己参与产品程序设计,精前端,懂业务,懂后端.</strong></p>\n<h3 id=\"恶劣的工作环境\"><a href=\"#恶劣的工作环境\" class=\"headerlink\" title=\"恶劣的工作环境\"></a>恶劣的工作环境</h3><p>当<strong>没有产品原型和设计</strong>的情况下,正确更多的时间,去了解产品需求,使用前端界面作为”原型”.完成部分产品没时间或者认为不重要的产品设计工作.没有设计的情况下基于成熟的UI组件,antd element 完成表单类的开发,一些交互设计自己做主设计交互细节并实现.没有设计的情况下大概率你能做主.</p>\n<p>当后端<strong>给不到接口</strong>时,在前端角度维护接口文档,通过接口更深入的理解程序设计.有理有据的要求后端同时配合你给到接口让你使用,因为客户端是接口消费方.如果后端给不到接口就自行模拟接口,再联调的时候再修改也无妨,这样单前端定义接口的过程就是在进行程序设计.基于客观接口进行联调,避免主观争论.</p>\n<p>善于<strong>使用错误追踪系统</strong>记录错误,例如 Sentry . 有理有据的去排查问题,定位问题,给出问题修复报告.防止莫名其妙背锅.</p>\n<blockquote>\n<p>愿你不遇到恶劣的工作环境,遇到相互配合的好同事</p>\n</blockquote>\n<h3 id=\"天花板与JavaScript\"><a href=\"#天花板与JavaScript\" class=\"headerlink\" title=\"天花板与JavaScript\"></a>天花板与JavaScript</h3><p>在前端角度不要局限于 Web 前端,在吃透当前工作环境时去了解其他客户端技术,比如各类小程序, IOS Android.</p>\n<p>Swift Kotlin Java 都是不错的语言,了解他们后再回头写 TypeScript 会对编程有新的认识和理解.</p>\n<p>不要局限于前端,在项目中了解目前团队的后端语言和后端知识.参与后端提供的接口中数据类型的定义,(类似 TypeScript 中的 interface).了解后端语言(PHP就算了),对项目后端的程序设计有足够了解.必要时尝试参与后端开发,先完成一些简单不重要的后端工作.</p>\n<p>大部分情况下足够努力的前端做个三五年很容易在小团队做到天花板.不考虑换工作的情况下,去向全栈发展是个很好的选择.只有掌握了程序设计才能掌握话语权.</p>\n<p>现在很多人错误的理解了全栈,认为会 node 写个编译工具就是全栈,不要局限于掌握的后端语言是 Node . 使用 Node 能免去学习一门新语言的好处没有那么重要,反而会将你局限在 JavaScript.</p>\n<p><strong>了解一门强类型语言,了解各种后端技术.了解其他前端领域.</strong></p>\n<h3 id=\"价值与话语权\"><a href=\"#价值与话语权\" class=\"headerlink\" title=\"价值与话语权\"></a>价值与话语权</h3><p>吃透目前工作环境所需要使用的前端技术后,由<strong>实现者变为程序设计者</strong>不要将自己局限于”页面仔”.去理解了解业务才能提升自身价值.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>始于前端,不局限于前端.**不要把自己限制在客户端的实现者,让自己参与产品程序设计,精前端,懂业务,懂后端.</p>\n<p>原文地址 <a href=\"https://github.com/nimoc/blog/issues/35\">https://github.com/nimoc/blog/issues/35</a> (原文保持持续更新和更多的评论) </p>\n"},{"_content":"# JavaScript原型赋值陷阱\n[![blog.nimoc.io](http://blog.nimoc.io/notice/index.svg)](http://blog.nimoc.io/notice/index.html)\n\n不通过对象的 `constructor.prototype` 对原型中的属性进行递增时候会触发原型赋值陷阱。\n\n本文通过一个 Popup 弹出框来解释陷阱的出现情况，并说明如何找到陷阱和解决问题。并且本文假设你至少简单了解 JavaScript 中的原型。\n## 记录alert次数的弹出框\n\n**单实例调用**\n\n``` js\nvar Popup=function(){\n}\nPopup.prototype.alert=function(message){\n    this.iMessageCount++;\n    alert(message+'~alert过'+this.iMessageCount+'次');    \n}\nPopup.prototype.iMessageCount=0;\nvar oNimo=new Popup();\noNimo.alert('你好我是nimo!');//  alert 过1次\noNimo.alert('Nice to meet you,I am Nimo!');//  alert 过2次\n```\n\n代码解释\n1. 创建构造函数 Popup\n2. 给 Popup 添加 alert 方法。弹出内容是消息加弹出次数，每次弹出递增 iMessageCount 属性。\n3. 添加公用属性 iMessageCount 用于记录弹出次数。\n4. 创建oNimo实例，并用 oNimo 弹出2次内容。\n\n弹出内容\n1. 你好我是nimo!~alert过1次\n2. Nice to meet you,I am Nimo!~alert过2次\n\n**添加一个实例**\n\n在上面的代码底部添加如下代码\n\n```\nvar oDemo=new Popup();\noDemo.alert('我是demo!'); //alert过1次  \n```\n\n代码解释\n1. 创建oDemo实例，并用oDemo弹出2次内容。\n\n弹出内容\n1. 我是demo!~alert过1次\n\noDemo 的弹出结果应该是 alert 过3次，结果却是 alert 过1次\n## debug\n\n遇到 bug 先将相关对象输出检查\n\n``` js\nconsole.log(oNimo);\nconsole.log(oDemo);\n```\n\n![](https://cloud.githubusercontent.com/assets/3949015/7004697/0f1560d4-dca2-11e4-8c19-0668203b9000.png)\n打印结果后发现原型中 iMessageCount 属性并没有递增，依然是0。而 oNimo 和 oDemo 自身属性中却存储着 iMessageCount 属性，分别是2和1。说明 `this.iMessageCount++` 递增的是对象自身属性并不是原型属\n### 拆分 bug\n\n既然问题出在 `this.iMessageCount++` 那么就对这行代码进行详细分析。\n\n以下三行代码实际相等\n\n``` js\nthis.iMessageCount++\nthis.iMessageCount=this.iMessageCount+1\nthis.iMessageCount=this.constructor.prototype.iMessageCount+1\n```\n\n解释\n1. 递增操作\n2. iMessageCount属性等于iMessageCount属性+1\n3. 因为一开始对象自身并没有iMessageCount属性而原型中有，所有结果是将原型属性中的iMessageCount属性+1并赋值给对象自身属性中的iMessageCount属性。\n\n当调用新的 `oDemo` 时并没有修改 `Popup` 的原型。和上面一样，只是获取了 `Popup.prototype.iMessage` 的值。\n\n知识点：对象访问一个属性会首先查找自身属性如果找不到自身属性就查找对象的 constructor 中的 prototype 中的属性（对象构造函数的原型中的属性）。\n\n跳过陷阱\n\n如需对原型中的属性进行递增操作请直接对对象的 constructor 中的 protorype 中的属性进行递增。\n\n修复后的代码：\n\n关键代码： `this.constructor.prototype.iMessageCount++`\n\n完整代码：\n\n``` js\nvar Popup=function(){\n}\nPopup.prototype.alert=function(message){\n    this.constructor.prototype.iMessageCount++;\n    alert(message+'~alert过'+this.iMessageCount+'次');    \n}\nPopup.prototype.iMessageCount=0;\nvar oNimo=new Popup();\noNimo.alert('你好我是nimo!');//  alert 过1次\noNimo.alert('Nice to meet you,I am Nimo!');//  alert 过2次\n\nvar oDemo=new Popup();\noDemo.alert('我是demo!'); //alert过3次\n```\n## 小结\n\n不通过对象的 constructor.prototype 对原型中的属性进行递增时候会触发原型递增陷阱。\n\n如需对原型中的属性进行递增操作请直接对对象的constructor中的protorype中的属性进行递增。\n\n\n[点此订阅博客](https://github.com/nimoc/blog/issues/15)\n\n若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：[https://github.com/nimoc/blog/issues/17](https://github.com/nimoc/blog/issues/17)\n\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"17\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","source":"js_prototype_trap.md","raw":"# JavaScript原型赋值陷阱\n[![blog.nimoc.io](http://blog.nimoc.io/notice/index.svg)](http://blog.nimoc.io/notice/index.html)\n\n不通过对象的 `constructor.prototype` 对原型中的属性进行递增时候会触发原型赋值陷阱。\n\n本文通过一个 Popup 弹出框来解释陷阱的出现情况，并说明如何找到陷阱和解决问题。并且本文假设你至少简单了解 JavaScript 中的原型。\n## 记录alert次数的弹出框\n\n**单实例调用**\n\n``` js\nvar Popup=function(){\n}\nPopup.prototype.alert=function(message){\n    this.iMessageCount++;\n    alert(message+'~alert过'+this.iMessageCount+'次');    \n}\nPopup.prototype.iMessageCount=0;\nvar oNimo=new Popup();\noNimo.alert('你好我是nimo!');//  alert 过1次\noNimo.alert('Nice to meet you,I am Nimo!');//  alert 过2次\n```\n\n代码解释\n1. 创建构造函数 Popup\n2. 给 Popup 添加 alert 方法。弹出内容是消息加弹出次数，每次弹出递增 iMessageCount 属性。\n3. 添加公用属性 iMessageCount 用于记录弹出次数。\n4. 创建oNimo实例，并用 oNimo 弹出2次内容。\n\n弹出内容\n1. 你好我是nimo!~alert过1次\n2. Nice to meet you,I am Nimo!~alert过2次\n\n**添加一个实例**\n\n在上面的代码底部添加如下代码\n\n```\nvar oDemo=new Popup();\noDemo.alert('我是demo!'); //alert过1次  \n```\n\n代码解释\n1. 创建oDemo实例，并用oDemo弹出2次内容。\n\n弹出内容\n1. 我是demo!~alert过1次\n\noDemo 的弹出结果应该是 alert 过3次，结果却是 alert 过1次\n## debug\n\n遇到 bug 先将相关对象输出检查\n\n``` js\nconsole.log(oNimo);\nconsole.log(oDemo);\n```\n\n![](https://cloud.githubusercontent.com/assets/3949015/7004697/0f1560d4-dca2-11e4-8c19-0668203b9000.png)\n打印结果后发现原型中 iMessageCount 属性并没有递增，依然是0。而 oNimo 和 oDemo 自身属性中却存储着 iMessageCount 属性，分别是2和1。说明 `this.iMessageCount++` 递增的是对象自身属性并不是原型属\n### 拆分 bug\n\n既然问题出在 `this.iMessageCount++` 那么就对这行代码进行详细分析。\n\n以下三行代码实际相等\n\n``` js\nthis.iMessageCount++\nthis.iMessageCount=this.iMessageCount+1\nthis.iMessageCount=this.constructor.prototype.iMessageCount+1\n```\n\n解释\n1. 递增操作\n2. iMessageCount属性等于iMessageCount属性+1\n3. 因为一开始对象自身并没有iMessageCount属性而原型中有，所有结果是将原型属性中的iMessageCount属性+1并赋值给对象自身属性中的iMessageCount属性。\n\n当调用新的 `oDemo` 时并没有修改 `Popup` 的原型。和上面一样，只是获取了 `Popup.prototype.iMessage` 的值。\n\n知识点：对象访问一个属性会首先查找自身属性如果找不到自身属性就查找对象的 constructor 中的 prototype 中的属性（对象构造函数的原型中的属性）。\n\n跳过陷阱\n\n如需对原型中的属性进行递增操作请直接对对象的 constructor 中的 protorype 中的属性进行递增。\n\n修复后的代码：\n\n关键代码： `this.constructor.prototype.iMessageCount++`\n\n完整代码：\n\n``` js\nvar Popup=function(){\n}\nPopup.prototype.alert=function(message){\n    this.constructor.prototype.iMessageCount++;\n    alert(message+'~alert过'+this.iMessageCount+'次');    \n}\nPopup.prototype.iMessageCount=0;\nvar oNimo=new Popup();\noNimo.alert('你好我是nimo!');//  alert 过1次\noNimo.alert('Nice to meet you,I am Nimo!');//  alert 过2次\n\nvar oDemo=new Popup();\noDemo.alert('我是demo!'); //alert过3次\n```\n## 小结\n\n不通过对象的 constructor.prototype 对原型中的属性进行递增时候会触发原型递增陷阱。\n\n如需对原型中的属性进行递增操作请直接对对象的constructor中的protorype中的属性进行递增。\n\n\n[点此订阅博客](https://github.com/nimoc/blog/issues/15)\n\n若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：[https://github.com/nimoc/blog/issues/17](https://github.com/nimoc/blog/issues/17)\n\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"17\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","date":"2021-02-27T06:35:41.015Z","updated":"2021-02-27T06:35:41.015Z","path":"js_prototype_trap.html","title":"","comments":1,"layout":"page","_id":"cklncopzf000gf3u86v09dg0q","content":"<h1 id=\"JavaScript原型赋值陷阱\"><a href=\"#JavaScript原型赋值陷阱\" class=\"headerlink\" title=\"JavaScript原型赋值陷阱\"></a>JavaScript原型赋值陷阱</h1><p><a href=\"http://blog.nimoc.io/notice/index.html\"><img src=\"http://blog.nimoc.io/notice/index.svg\" alt=\"blog.nimoc.io\"></a></p>\n<p>不通过对象的 <code>constructor.prototype</code> 对原型中的属性进行递增时候会触发原型赋值陷阱。</p>\n<p>本文通过一个 Popup 弹出框来解释陷阱的出现情况，并说明如何找到陷阱和解决问题。并且本文假设你至少简单了解 JavaScript 中的原型。</p>\n<h2 id=\"记录alert次数的弹出框\"><a href=\"#记录alert次数的弹出框\" class=\"headerlink\" title=\"记录alert次数的弹出框\"></a>记录alert次数的弹出框</h2><p><strong>单实例调用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Popup=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Popup.prototype.alert=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">message</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.iMessageCount++;</span><br><span class=\"line\">    alert(message+<span class=\"string\">&#x27;~alert过&#x27;</span>+<span class=\"built_in\">this</span>.iMessageCount+<span class=\"string\">&#x27;次&#x27;</span>);    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Popup.prototype.iMessageCount=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> oNimo=<span class=\"keyword\">new</span> Popup();</span><br><span class=\"line\">oNimo.alert(<span class=\"string\">&#x27;你好我是nimo!&#x27;</span>);<span class=\"comment\">//  alert 过1次</span></span><br><span class=\"line\">oNimo.alert(<span class=\"string\">&#x27;Nice to meet you,I am Nimo!&#x27;</span>);<span class=\"comment\">//  alert 过2次</span></span><br></pre></td></tr></table></figure>\n\n<p>代码解释</p>\n<ol>\n<li>创建构造函数 Popup</li>\n<li>给 Popup 添加 alert 方法。弹出内容是消息加弹出次数，每次弹出递增 iMessageCount 属性。</li>\n<li>添加公用属性 iMessageCount 用于记录弹出次数。</li>\n<li>创建oNimo实例，并用 oNimo 弹出2次内容。</li>\n</ol>\n<p>弹出内容</p>\n<ol>\n<li>你好我是nimo!~alert过1次</li>\n<li>Nice to meet you,I am Nimo!~alert过2次</li>\n</ol>\n<p><strong>添加一个实例</strong></p>\n<p>在上面的代码底部添加如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var oDemo&#x3D;new Popup();</span><br><span class=\"line\">oDemo.alert(&#39;我是demo!&#39;); &#x2F;&#x2F;alert过1次  </span><br></pre></td></tr></table></figure>\n\n<p>代码解释</p>\n<ol>\n<li>创建oDemo实例，并用oDemo弹出2次内容。</li>\n</ol>\n<p>弹出内容</p>\n<ol>\n<li>我是demo!~alert过1次</li>\n</ol>\n<p>oDemo 的弹出结果应该是 alert 过3次，结果却是 alert 过1次</p>\n<h2 id=\"debug\"><a href=\"#debug\" class=\"headerlink\" title=\"debug\"></a>debug</h2><p>遇到 bug 先将相关对象输出检查</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(oNimo);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(oDemo);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cloud.githubusercontent.com/assets/3949015/7004697/0f1560d4-dca2-11e4-8c19-0668203b9000.png\"><br>打印结果后发现原型中 iMessageCount 属性并没有递增，依然是0。而 oNimo 和 oDemo 自身属性中却存储着 iMessageCount 属性，分别是2和1。说明 <code>this.iMessageCount++</code> 递增的是对象自身属性并不是原型属</p>\n<h3 id=\"拆分-bug\"><a href=\"#拆分-bug\" class=\"headerlink\" title=\"拆分 bug\"></a>拆分 bug</h3><p>既然问题出在 <code>this.iMessageCount++</code> 那么就对这行代码进行详细分析。</p>\n<p>以下三行代码实际相等</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.iMessageCount++</span><br><span class=\"line\"><span class=\"built_in\">this</span>.iMessageCount=<span class=\"built_in\">this</span>.iMessageCount+<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.iMessageCount=<span class=\"built_in\">this</span>.constructor.prototype.iMessageCount+<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>解释</p>\n<ol>\n<li>递增操作</li>\n<li>iMessageCount属性等于iMessageCount属性+1</li>\n<li>因为一开始对象自身并没有iMessageCount属性而原型中有，所有结果是将原型属性中的iMessageCount属性+1并赋值给对象自身属性中的iMessageCount属性。</li>\n</ol>\n<p>当调用新的 <code>oDemo</code> 时并没有修改 <code>Popup</code> 的原型。和上面一样，只是获取了 <code>Popup.prototype.iMessage</code> 的值。</p>\n<p>知识点：对象访问一个属性会首先查找自身属性如果找不到自身属性就查找对象的 constructor 中的 prototype 中的属性（对象构造函数的原型中的属性）。</p>\n<p>跳过陷阱</p>\n<p>如需对原型中的属性进行递增操作请直接对对象的 constructor 中的 protorype 中的属性进行递增。</p>\n<p>修复后的代码：</p>\n<p>关键代码： <code>this.constructor.prototype.iMessageCount++</code></p>\n<p>完整代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Popup=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Popup.prototype.alert=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">message</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.constructor.prototype.iMessageCount++;</span><br><span class=\"line\">    alert(message+<span class=\"string\">&#x27;~alert过&#x27;</span>+<span class=\"built_in\">this</span>.iMessageCount+<span class=\"string\">&#x27;次&#x27;</span>);    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Popup.prototype.iMessageCount=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> oNimo=<span class=\"keyword\">new</span> Popup();</span><br><span class=\"line\">oNimo.alert(<span class=\"string\">&#x27;你好我是nimo!&#x27;</span>);<span class=\"comment\">//  alert 过1次</span></span><br><span class=\"line\">oNimo.alert(<span class=\"string\">&#x27;Nice to meet you,I am Nimo!&#x27;</span>);<span class=\"comment\">//  alert 过2次</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> oDemo=<span class=\"keyword\">new</span> Popup();</span><br><span class=\"line\">oDemo.alert(<span class=\"string\">&#x27;我是demo!&#x27;</span>); <span class=\"comment\">//alert过3次</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>不通过对象的 constructor.prototype 对原型中的属性进行递增时候会触发原型递增陷阱。</p>\n<p>如需对原型中的属性进行递增操作请直接对对象的constructor中的protorype中的属性进行递增。</p>\n<p><a href=\"https://github.com/nimoc/blog/issues/15\">点此订阅博客</a></p>\n<p>若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：<a href=\"https://github.com/nimoc/blog/issues/17\">https://github.com/nimoc/blog/issues/17</a></p>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"17\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JavaScript原型赋值陷阱\"><a href=\"#JavaScript原型赋值陷阱\" class=\"headerlink\" title=\"JavaScript原型赋值陷阱\"></a>JavaScript原型赋值陷阱</h1><p><a href=\"http://blog.nimoc.io/notice/index.html\"><img src=\"http://blog.nimoc.io/notice/index.svg\" alt=\"blog.nimoc.io\"></a></p>\n<p>不通过对象的 <code>constructor.prototype</code> 对原型中的属性进行递增时候会触发原型赋值陷阱。</p>\n<p>本文通过一个 Popup 弹出框来解释陷阱的出现情况，并说明如何找到陷阱和解决问题。并且本文假设你至少简单了解 JavaScript 中的原型。</p>\n<h2 id=\"记录alert次数的弹出框\"><a href=\"#记录alert次数的弹出框\" class=\"headerlink\" title=\"记录alert次数的弹出框\"></a>记录alert次数的弹出框</h2><p><strong>单实例调用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Popup=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Popup.prototype.alert=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">message</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.iMessageCount++;</span><br><span class=\"line\">    alert(message+<span class=\"string\">&#x27;~alert过&#x27;</span>+<span class=\"built_in\">this</span>.iMessageCount+<span class=\"string\">&#x27;次&#x27;</span>);    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Popup.prototype.iMessageCount=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> oNimo=<span class=\"keyword\">new</span> Popup();</span><br><span class=\"line\">oNimo.alert(<span class=\"string\">&#x27;你好我是nimo!&#x27;</span>);<span class=\"comment\">//  alert 过1次</span></span><br><span class=\"line\">oNimo.alert(<span class=\"string\">&#x27;Nice to meet you,I am Nimo!&#x27;</span>);<span class=\"comment\">//  alert 过2次</span></span><br></pre></td></tr></table></figure>\n\n<p>代码解释</p>\n<ol>\n<li>创建构造函数 Popup</li>\n<li>给 Popup 添加 alert 方法。弹出内容是消息加弹出次数，每次弹出递增 iMessageCount 属性。</li>\n<li>添加公用属性 iMessageCount 用于记录弹出次数。</li>\n<li>创建oNimo实例，并用 oNimo 弹出2次内容。</li>\n</ol>\n<p>弹出内容</p>\n<ol>\n<li>你好我是nimo!~alert过1次</li>\n<li>Nice to meet you,I am Nimo!~alert过2次</li>\n</ol>\n<p><strong>添加一个实例</strong></p>\n<p>在上面的代码底部添加如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var oDemo&#x3D;new Popup();</span><br><span class=\"line\">oDemo.alert(&#39;我是demo!&#39;); &#x2F;&#x2F;alert过1次  </span><br></pre></td></tr></table></figure>\n\n<p>代码解释</p>\n<ol>\n<li>创建oDemo实例，并用oDemo弹出2次内容。</li>\n</ol>\n<p>弹出内容</p>\n<ol>\n<li>我是demo!~alert过1次</li>\n</ol>\n<p>oDemo 的弹出结果应该是 alert 过3次，结果却是 alert 过1次</p>\n<h2 id=\"debug\"><a href=\"#debug\" class=\"headerlink\" title=\"debug\"></a>debug</h2><p>遇到 bug 先将相关对象输出检查</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(oNimo);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(oDemo);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cloud.githubusercontent.com/assets/3949015/7004697/0f1560d4-dca2-11e4-8c19-0668203b9000.png\"><br>打印结果后发现原型中 iMessageCount 属性并没有递增，依然是0。而 oNimo 和 oDemo 自身属性中却存储着 iMessageCount 属性，分别是2和1。说明 <code>this.iMessageCount++</code> 递增的是对象自身属性并不是原型属</p>\n<h3 id=\"拆分-bug\"><a href=\"#拆分-bug\" class=\"headerlink\" title=\"拆分 bug\"></a>拆分 bug</h3><p>既然问题出在 <code>this.iMessageCount++</code> 那么就对这行代码进行详细分析。</p>\n<p>以下三行代码实际相等</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.iMessageCount++</span><br><span class=\"line\"><span class=\"built_in\">this</span>.iMessageCount=<span class=\"built_in\">this</span>.iMessageCount+<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.iMessageCount=<span class=\"built_in\">this</span>.constructor.prototype.iMessageCount+<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>解释</p>\n<ol>\n<li>递增操作</li>\n<li>iMessageCount属性等于iMessageCount属性+1</li>\n<li>因为一开始对象自身并没有iMessageCount属性而原型中有，所有结果是将原型属性中的iMessageCount属性+1并赋值给对象自身属性中的iMessageCount属性。</li>\n</ol>\n<p>当调用新的 <code>oDemo</code> 时并没有修改 <code>Popup</code> 的原型。和上面一样，只是获取了 <code>Popup.prototype.iMessage</code> 的值。</p>\n<p>知识点：对象访问一个属性会首先查找自身属性如果找不到自身属性就查找对象的 constructor 中的 prototype 中的属性（对象构造函数的原型中的属性）。</p>\n<p>跳过陷阱</p>\n<p>如需对原型中的属性进行递增操作请直接对对象的 constructor 中的 protorype 中的属性进行递增。</p>\n<p>修复后的代码：</p>\n<p>关键代码： <code>this.constructor.prototype.iMessageCount++</code></p>\n<p>完整代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Popup=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Popup.prototype.alert=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">message</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.constructor.prototype.iMessageCount++;</span><br><span class=\"line\">    alert(message+<span class=\"string\">&#x27;~alert过&#x27;</span>+<span class=\"built_in\">this</span>.iMessageCount+<span class=\"string\">&#x27;次&#x27;</span>);    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Popup.prototype.iMessageCount=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> oNimo=<span class=\"keyword\">new</span> Popup();</span><br><span class=\"line\">oNimo.alert(<span class=\"string\">&#x27;你好我是nimo!&#x27;</span>);<span class=\"comment\">//  alert 过1次</span></span><br><span class=\"line\">oNimo.alert(<span class=\"string\">&#x27;Nice to meet you,I am Nimo!&#x27;</span>);<span class=\"comment\">//  alert 过2次</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> oDemo=<span class=\"keyword\">new</span> Popup();</span><br><span class=\"line\">oDemo.alert(<span class=\"string\">&#x27;我是demo!&#x27;</span>); <span class=\"comment\">//alert过3次</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>不通过对象的 constructor.prototype 对原型中的属性进行递增时候会触发原型递增陷阱。</p>\n<p>如需对原型中的属性进行递增操作请直接对对象的constructor中的protorype中的属性进行递增。</p>\n<p><a href=\"https://github.com/nimoc/blog/issues/15\">点此订阅博客</a></p>\n<p>若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：<a href=\"https://github.com/nimoc/blog/issues/17\">https://github.com/nimoc/blog/issues/17</a></p>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"17\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>"},{"_content":"# 深入理解JavaScript-replace\n\n[![blog.nimoc.io](http://blog.nimoc.io/notice/index.svg)](http://blog.nimoc.io/notice/index.html)\n\nreplace方法是属于String对象的，可用于替换字符串。\n## 简单介绍:\n\n`String.replace(searchValue,replaceValue)`\n1.  String:字符串\n2.  searchValue：字符串或正则表达式\n3.  replaceValue:字符串或者函数\n## 字符串替换字符串\n\n``` javascript\n'I am loser!'.replace('loser','hero')\n//I am hero!\n```\n\n直接使用字符串能让自己从loser变成hero，但是如果有2个loser就不能一起变成hero了。\n\n``` javascript\n'I am loser,You are loser'.replace('loser','hero');\n//I am hero,You are loser \n```\n## 正则表达式替换为字符串\n\n``` javascript\n'I am loser,You are loser'.replace(/loser/g,'hero')\n//I am hero,You are hero\n```\n\n使用正则表达式，并将正则的global属性改为true则可以让所有loser都变为hero\n## 有趣的替换字符\n\n`replaceValue` 可以是字符串。如果字符串中有几个特定字符的话，会被转换为特定字符串。\n\n| 字符 | 替换文本 |\n| :-- | :-- |\n| $& | 与正则相匹配的字符串 |\n| $` | 匹配字符串左边的字符 |\n| $' | 匹配字符串右边的字符 |\n| $1,$2,$3,…,$n | 匹配结果中对应的分组匹配结果 |\n### 使用$&字符给匹配字符加大括号\n\n``` javascript\nvar sStr='讨论一下正则表达式中的replace的用法';\nsStr.replace(/正则表达式/,'{$&}');\n//讨论一下{正则表达式}中的replace的用法\n```\n### 使用$`和$'字符替换内容\n\n``` javascript\n'abc'.replace(/b/,\"$`\");//aac\n'abc'.replace(/b/,\"$'\");//acc\n```\n### 使用分组匹配组合新的字符串\n\n``` javascript\n'nimoc@126.com'.replace(/(.+)(@)(.*)/,\"$2$1\")//@nimoc\n```\n## replaceValue参数可以是一个函数\n\n`String.replace(searchValue,replaceValue)` 中的**replaceValue**可以是一个函数.\n\n如果replaceValue是一个函数的话那么，这个函数的arguments会有n+3个参数（n为正则匹配到的次数）\n\n**先看例子帮助理解：**\n\n``` javascript\nfunction logArguments(){    \n    console.log(arguments);//[\"nimoc@126.com\", \"nimoc\", \"@\", \"126.com\", 0, \"nimoc@126.com\"] \n    return '返回值会替换掉匹配到的目标'\n}\nconsole.log(\n    'nimoc@126.com'.replace(/(.+)(@)(.*)/,logArguments)\n)\n```\n\n**参数分别为**\n1.  匹配到的字符串（此例为nimoc@126.com,推荐修改上面代码的正则来查看匹配到的字符帮助理解)\n2.  如果正则使用了分组匹配就为多个否则无此参数。（此例的参数就分别为`\"nimoc\", \"@\", \"126.com\"`。推荐修改正则为/nimo/查看控制台中返回的arguments值）\n3.  匹配字符串的对应索引位置（此例为0）\n4.  原始字符串(此例为nimoc@126.com)\n### 使用自定义函数将A-G字符串改为小写\n\n``` javascript\n'JAVASCRIPT'.replace(/[A-G]/g,function(){\n    return arguments[0].toLowerCase();\n})//JaVaScRIPT \n```\n### 使用自定义函数做回调式替换将行内样式中的单引号删除\n\n``` javascript\n'<span style=\"font-family:\\'微软雅黑\\';\">;demo</span>'.replace(/\\'[^']+\\'/g,function(){      \n    var sResult=arguments[0];\n    console.log(sResult);//'微软雅黑'\n    sResult=sResult.replace(/\\'/g,'');\n    console.log(sResult);//微软雅黑\n    return sResult;\n})//<span style=\"font-family:微软雅黑;\">demo</span> \n```\n## 最后的小试牛刀\n\n这一节是交给阅读者发挥的内容：\n### 洗扑克\n\n需要将Thisnimoc-JavaScript使用正则替换成 `TJhaivsaNSicmroijpst`\n\n[点此订阅博客](https://github.com/nimoc/blog/issues/15)\n\n若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：[https://github.com/nimoc/blog/issues/2](https://github.com/nimoc/blog/issues/2)\n\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","source":"js_replace.md","raw":"# 深入理解JavaScript-replace\n\n[![blog.nimoc.io](http://blog.nimoc.io/notice/index.svg)](http://blog.nimoc.io/notice/index.html)\n\nreplace方法是属于String对象的，可用于替换字符串。\n## 简单介绍:\n\n`String.replace(searchValue,replaceValue)`\n1.  String:字符串\n2.  searchValue：字符串或正则表达式\n3.  replaceValue:字符串或者函数\n## 字符串替换字符串\n\n``` javascript\n'I am loser!'.replace('loser','hero')\n//I am hero!\n```\n\n直接使用字符串能让自己从loser变成hero，但是如果有2个loser就不能一起变成hero了。\n\n``` javascript\n'I am loser,You are loser'.replace('loser','hero');\n//I am hero,You are loser \n```\n## 正则表达式替换为字符串\n\n``` javascript\n'I am loser,You are loser'.replace(/loser/g,'hero')\n//I am hero,You are hero\n```\n\n使用正则表达式，并将正则的global属性改为true则可以让所有loser都变为hero\n## 有趣的替换字符\n\n`replaceValue` 可以是字符串。如果字符串中有几个特定字符的话，会被转换为特定字符串。\n\n| 字符 | 替换文本 |\n| :-- | :-- |\n| $& | 与正则相匹配的字符串 |\n| $` | 匹配字符串左边的字符 |\n| $' | 匹配字符串右边的字符 |\n| $1,$2,$3,…,$n | 匹配结果中对应的分组匹配结果 |\n### 使用$&字符给匹配字符加大括号\n\n``` javascript\nvar sStr='讨论一下正则表达式中的replace的用法';\nsStr.replace(/正则表达式/,'{$&}');\n//讨论一下{正则表达式}中的replace的用法\n```\n### 使用$`和$'字符替换内容\n\n``` javascript\n'abc'.replace(/b/,\"$`\");//aac\n'abc'.replace(/b/,\"$'\");//acc\n```\n### 使用分组匹配组合新的字符串\n\n``` javascript\n'nimoc@126.com'.replace(/(.+)(@)(.*)/,\"$2$1\")//@nimoc\n```\n## replaceValue参数可以是一个函数\n\n`String.replace(searchValue,replaceValue)` 中的**replaceValue**可以是一个函数.\n\n如果replaceValue是一个函数的话那么，这个函数的arguments会有n+3个参数（n为正则匹配到的次数）\n\n**先看例子帮助理解：**\n\n``` javascript\nfunction logArguments(){    \n    console.log(arguments);//[\"nimoc@126.com\", \"nimoc\", \"@\", \"126.com\", 0, \"nimoc@126.com\"] \n    return '返回值会替换掉匹配到的目标'\n}\nconsole.log(\n    'nimoc@126.com'.replace(/(.+)(@)(.*)/,logArguments)\n)\n```\n\n**参数分别为**\n1.  匹配到的字符串（此例为nimoc@126.com,推荐修改上面代码的正则来查看匹配到的字符帮助理解)\n2.  如果正则使用了分组匹配就为多个否则无此参数。（此例的参数就分别为`\"nimoc\", \"@\", \"126.com\"`。推荐修改正则为/nimo/查看控制台中返回的arguments值）\n3.  匹配字符串的对应索引位置（此例为0）\n4.  原始字符串(此例为nimoc@126.com)\n### 使用自定义函数将A-G字符串改为小写\n\n``` javascript\n'JAVASCRIPT'.replace(/[A-G]/g,function(){\n    return arguments[0].toLowerCase();\n})//JaVaScRIPT \n```\n### 使用自定义函数做回调式替换将行内样式中的单引号删除\n\n``` javascript\n'<span style=\"font-family:\\'微软雅黑\\';\">;demo</span>'.replace(/\\'[^']+\\'/g,function(){      \n    var sResult=arguments[0];\n    console.log(sResult);//'微软雅黑'\n    sResult=sResult.replace(/\\'/g,'');\n    console.log(sResult);//微软雅黑\n    return sResult;\n})//<span style=\"font-family:微软雅黑;\">demo</span> \n```\n## 最后的小试牛刀\n\n这一节是交给阅读者发挥的内容：\n### 洗扑克\n\n需要将Thisnimoc-JavaScript使用正则替换成 `TJhaivsaNSicmroijpst`\n\n[点此订阅博客](https://github.com/nimoc/blog/issues/15)\n\n若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：[https://github.com/nimoc/blog/issues/2](https://github.com/nimoc/blog/issues/2)\n\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","date":"2021-02-27T06:35:41.015Z","updated":"2021-02-27T06:35:41.015Z","path":"js_replace.html","title":"","comments":1,"layout":"page","_id":"cklncopzg000hf3u81j40034v","content":"<h1 id=\"深入理解JavaScript-replace\"><a href=\"#深入理解JavaScript-replace\" class=\"headerlink\" title=\"深入理解JavaScript-replace\"></a>深入理解JavaScript-replace</h1><p><a href=\"http://blog.nimoc.io/notice/index.html\"><img src=\"http://blog.nimoc.io/notice/index.svg\" alt=\"blog.nimoc.io\"></a></p>\n<p>replace方法是属于String对象的，可用于替换字符串。</p>\n<h2 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍:\"></a>简单介绍:</h2><p><code>String.replace(searchValue,replaceValue)</code></p>\n<ol>\n<li> String:字符串</li>\n<li> searchValue：字符串或正则表达式</li>\n<li> replaceValue:字符串或者函数<h2 id=\"字符串替换字符串\"><a href=\"#字符串替换字符串\" class=\"headerlink\" title=\"字符串替换字符串\"></a>字符串替换字符串</h2></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;I am loser!&#x27;</span>.replace(<span class=\"string\">&#x27;loser&#x27;</span>,<span class=\"string\">&#x27;hero&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">//I am hero!</span></span><br></pre></td></tr></table></figure>\n\n<p>直接使用字符串能让自己从loser变成hero，但是如果有2个loser就不能一起变成hero了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;I am loser,You are loser&#x27;</span>.replace(<span class=\"string\">&#x27;loser&#x27;</span>,<span class=\"string\">&#x27;hero&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//I am hero,You are loser </span></span><br></pre></td></tr></table></figure>\n<h2 id=\"正则表达式替换为字符串\"><a href=\"#正则表达式替换为字符串\" class=\"headerlink\" title=\"正则表达式替换为字符串\"></a>正则表达式替换为字符串</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;I am loser,You are loser&#x27;</span>.replace(<span class=\"regexp\">/loser/g</span>,<span class=\"string\">&#x27;hero&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">//I am hero,You are hero</span></span><br></pre></td></tr></table></figure>\n\n<p>使用正则表达式，并将正则的global属性改为true则可以让所有loser都变为hero</p>\n<h2 id=\"有趣的替换字符\"><a href=\"#有趣的替换字符\" class=\"headerlink\" title=\"有趣的替换字符\"></a>有趣的替换字符</h2><p><code>replaceValue</code> 可以是字符串。如果字符串中有几个特定字符的话，会被转换为特定字符串。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">字符</th>\n<th align=\"left\">替换文本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">$&amp;</td>\n<td align=\"left\">与正则相匹配的字符串</td>\n</tr>\n<tr>\n<td align=\"left\">$`</td>\n<td align=\"left\">匹配字符串左边的字符</td>\n</tr>\n<tr>\n<td align=\"left\">$’</td>\n<td align=\"left\">匹配字符串右边的字符</td>\n</tr>\n<tr>\n<td align=\"left\">$1,$2,$3,…,$n</td>\n<td align=\"left\">匹配结果中对应的分组匹配结果</td>\n</tr>\n</tbody></table>\n<h3 id=\"使用-amp-字符给匹配字符加大括号\"><a href=\"#使用-amp-字符给匹配字符加大括号\" class=\"headerlink\" title=\"使用$&amp;字符给匹配字符加大括号\"></a>使用$&amp;字符给匹配字符加大括号</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sStr=<span class=\"string\">&#x27;讨论一下正则表达式中的replace的用法&#x27;</span>;</span><br><span class=\"line\">sStr.replace(<span class=\"regexp\">/正则表达式/</span>,<span class=\"string\">&#x27;&#123;$&amp;&#125;&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//讨论一下&#123;正则表达式&#125;中的replace的用法</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-和-’字符替换内容\"><a href=\"#使用-和-’字符替换内容\" class=\"headerlink\" title=\"使用$`和$’字符替换内容\"></a>使用$`和$’字符替换内容</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;abc&#x27;</span>.replace(<span class=\"regexp\">/b/</span>,<span class=\"string\">&quot;$`&quot;</span>);<span class=\"comment\">//aac</span></span><br><span class=\"line\"><span class=\"string\">&#x27;abc&#x27;</span>.replace(<span class=\"regexp\">/b/</span>,<span class=\"string\">&quot;$&#x27;&quot;</span>);<span class=\"comment\">//acc</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用分组匹配组合新的字符串\"><a href=\"#使用分组匹配组合新的字符串\" class=\"headerlink\" title=\"使用分组匹配组合新的字符串\"></a>使用分组匹配组合新的字符串</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;nimoc@126.com&#x27;</span>.replace(<span class=\"regexp\">/(.+)(@)(.*)/</span>,<span class=\"string\">&quot;$2$1&quot;</span>)<span class=\"comment\">//@nimoc</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"replaceValue参数可以是一个函数\"><a href=\"#replaceValue参数可以是一个函数\" class=\"headerlink\" title=\"replaceValue参数可以是一个函数\"></a>replaceValue参数可以是一个函数</h2><p><code>String.replace(searchValue,replaceValue)</code> 中的<strong>replaceValue</strong>可以是一个函数.</p>\n<p>如果replaceValue是一个函数的话那么，这个函数的arguments会有n+3个参数（n为正则匹配到的次数）</p>\n<p><strong>先看例子帮助理解：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logArguments</span>(<span class=\"params\"></span>)</span>&#123;    </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);<span class=\"comment\">//[&quot;nimoc@126.com&quot;, &quot;nimoc&quot;, &quot;@&quot;, &quot;126.com&quot;, 0, &quot;nimoc@126.com&quot;] </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;返回值会替换掉匹配到的目标&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">    <span class=\"string\">&#x27;nimoc@126.com&#x27;</span>.replace(<span class=\"regexp\">/(.+)(@)(.*)/</span>,logArguments)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p><strong>参数分别为</strong></p>\n<ol>\n<li> 匹配到的字符串（此例为<a href=\"mailto:&#x6e;&#x69;&#109;&#111;&#99;&#x40;&#49;&#50;&#54;&#x2e;&#99;&#x6f;&#109;\">&#x6e;&#x69;&#109;&#111;&#99;&#x40;&#49;&#50;&#54;&#x2e;&#99;&#x6f;&#109;</a>,推荐修改上面代码的正则来查看匹配到的字符帮助理解)</li>\n<li> 如果正则使用了分组匹配就为多个否则无此参数。（此例的参数就分别为<code>&quot;nimoc&quot;, &quot;@&quot;, &quot;126.com&quot;</code>。推荐修改正则为/nimo/查看控制台中返回的arguments值）</li>\n<li> 匹配字符串的对应索引位置（此例为0）</li>\n<li> 原始字符串(此例为<a href=\"mailto:&#110;&#105;&#x6d;&#111;&#x63;&#x40;&#x31;&#50;&#x36;&#x2e;&#x63;&#x6f;&#x6d;\">&#110;&#105;&#x6d;&#111;&#x63;&#x40;&#x31;&#50;&#x36;&#x2e;&#x63;&#x6f;&#x6d;</a>)<h3 id=\"使用自定义函数将A-G字符串改为小写\"><a href=\"#使用自定义函数将A-G字符串改为小写\" class=\"headerlink\" title=\"使用自定义函数将A-G字符串改为小写\"></a>使用自定义函数将A-G字符串改为小写</h3></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;JAVASCRIPT&#x27;</span>.replace(<span class=\"regexp\">/[A-G]/g</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>].toLowerCase();</span><br><span class=\"line\">&#125;)<span class=\"comment\">//JaVaScRIPT </span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用自定义函数做回调式替换将行内样式中的单引号删除\"><a href=\"#使用自定义函数做回调式替换将行内样式中的单引号删除\" class=\"headerlink\" title=\"使用自定义函数做回调式替换将行内样式中的单引号删除\"></a>使用自定义函数做回调式替换将行内样式中的单引号删除</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&lt;span style=&quot;font-family:\\&#x27;微软雅黑\\&#x27;;&quot;&gt;;demo&lt;/span&gt;&#x27;</span>.replace(<span class=\"regexp\">/\\&#x27;[^&#x27;]+\\&#x27;/g</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;      </span><br><span class=\"line\">    <span class=\"keyword\">var</span> sResult=<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(sResult);<span class=\"comment\">//&#x27;微软雅黑&#x27;</span></span><br><span class=\"line\">    sResult=sResult.replace(<span class=\"regexp\">/\\&#x27;/g</span>,<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(sResult);<span class=\"comment\">//微软雅黑</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sResult;</span><br><span class=\"line\">&#125;)<span class=\"comment\">//&lt;span style=&quot;font-family:微软雅黑;&quot;&gt;demo&lt;/span&gt; </span></span><br></pre></td></tr></table></figure>\n<h2 id=\"最后的小试牛刀\"><a href=\"#最后的小试牛刀\" class=\"headerlink\" title=\"最后的小试牛刀\"></a>最后的小试牛刀</h2><p>这一节是交给阅读者发挥的内容：</p>\n<h3 id=\"洗扑克\"><a href=\"#洗扑克\" class=\"headerlink\" title=\"洗扑克\"></a>洗扑克</h3><p>需要将Thisnimoc-JavaScript使用正则替换成 <code>TJhaivsaNSicmroijpst</code></p>\n<p><a href=\"https://github.com/nimoc/blog/issues/15\">点此订阅博客</a></p>\n<p>若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：<a href=\"https://github.com/nimoc/blog/issues/2\">https://github.com/nimoc/blog/issues/2</a></p>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"深入理解JavaScript-replace\"><a href=\"#深入理解JavaScript-replace\" class=\"headerlink\" title=\"深入理解JavaScript-replace\"></a>深入理解JavaScript-replace</h1><p><a href=\"http://blog.nimoc.io/notice/index.html\"><img src=\"http://blog.nimoc.io/notice/index.svg\" alt=\"blog.nimoc.io\"></a></p>\n<p>replace方法是属于String对象的，可用于替换字符串。</p>\n<h2 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍:\"></a>简单介绍:</h2><p><code>String.replace(searchValue,replaceValue)</code></p>\n<ol>\n<li> String:字符串</li>\n<li> searchValue：字符串或正则表达式</li>\n<li> replaceValue:字符串或者函数<h2 id=\"字符串替换字符串\"><a href=\"#字符串替换字符串\" class=\"headerlink\" title=\"字符串替换字符串\"></a>字符串替换字符串</h2></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;I am loser!&#x27;</span>.replace(<span class=\"string\">&#x27;loser&#x27;</span>,<span class=\"string\">&#x27;hero&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">//I am hero!</span></span><br></pre></td></tr></table></figure>\n\n<p>直接使用字符串能让自己从loser变成hero，但是如果有2个loser就不能一起变成hero了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;I am loser,You are loser&#x27;</span>.replace(<span class=\"string\">&#x27;loser&#x27;</span>,<span class=\"string\">&#x27;hero&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//I am hero,You are loser </span></span><br></pre></td></tr></table></figure>\n<h2 id=\"正则表达式替换为字符串\"><a href=\"#正则表达式替换为字符串\" class=\"headerlink\" title=\"正则表达式替换为字符串\"></a>正则表达式替换为字符串</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;I am loser,You are loser&#x27;</span>.replace(<span class=\"regexp\">/loser/g</span>,<span class=\"string\">&#x27;hero&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">//I am hero,You are hero</span></span><br></pre></td></tr></table></figure>\n\n<p>使用正则表达式，并将正则的global属性改为true则可以让所有loser都变为hero</p>\n<h2 id=\"有趣的替换字符\"><a href=\"#有趣的替换字符\" class=\"headerlink\" title=\"有趣的替换字符\"></a>有趣的替换字符</h2><p><code>replaceValue</code> 可以是字符串。如果字符串中有几个特定字符的话，会被转换为特定字符串。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">字符</th>\n<th align=\"left\">替换文本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">$&amp;</td>\n<td align=\"left\">与正则相匹配的字符串</td>\n</tr>\n<tr>\n<td align=\"left\">$`</td>\n<td align=\"left\">匹配字符串左边的字符</td>\n</tr>\n<tr>\n<td align=\"left\">$’</td>\n<td align=\"left\">匹配字符串右边的字符</td>\n</tr>\n<tr>\n<td align=\"left\">$1,$2,$3,…,$n</td>\n<td align=\"left\">匹配结果中对应的分组匹配结果</td>\n</tr>\n</tbody></table>\n<h3 id=\"使用-amp-字符给匹配字符加大括号\"><a href=\"#使用-amp-字符给匹配字符加大括号\" class=\"headerlink\" title=\"使用$&amp;字符给匹配字符加大括号\"></a>使用$&amp;字符给匹配字符加大括号</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sStr=<span class=\"string\">&#x27;讨论一下正则表达式中的replace的用法&#x27;</span>;</span><br><span class=\"line\">sStr.replace(<span class=\"regexp\">/正则表达式/</span>,<span class=\"string\">&#x27;&#123;$&amp;&#125;&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//讨论一下&#123;正则表达式&#125;中的replace的用法</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-和-’字符替换内容\"><a href=\"#使用-和-’字符替换内容\" class=\"headerlink\" title=\"使用$`和$’字符替换内容\"></a>使用$`和$’字符替换内容</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;abc&#x27;</span>.replace(<span class=\"regexp\">/b/</span>,<span class=\"string\">&quot;$`&quot;</span>);<span class=\"comment\">//aac</span></span><br><span class=\"line\"><span class=\"string\">&#x27;abc&#x27;</span>.replace(<span class=\"regexp\">/b/</span>,<span class=\"string\">&quot;$&#x27;&quot;</span>);<span class=\"comment\">//acc</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用分组匹配组合新的字符串\"><a href=\"#使用分组匹配组合新的字符串\" class=\"headerlink\" title=\"使用分组匹配组合新的字符串\"></a>使用分组匹配组合新的字符串</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;nimoc@126.com&#x27;</span>.replace(<span class=\"regexp\">/(.+)(@)(.*)/</span>,<span class=\"string\">&quot;$2$1&quot;</span>)<span class=\"comment\">//@nimoc</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"replaceValue参数可以是一个函数\"><a href=\"#replaceValue参数可以是一个函数\" class=\"headerlink\" title=\"replaceValue参数可以是一个函数\"></a>replaceValue参数可以是一个函数</h2><p><code>String.replace(searchValue,replaceValue)</code> 中的<strong>replaceValue</strong>可以是一个函数.</p>\n<p>如果replaceValue是一个函数的话那么，这个函数的arguments会有n+3个参数（n为正则匹配到的次数）</p>\n<p><strong>先看例子帮助理解：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logArguments</span>(<span class=\"params\"></span>)</span>&#123;    </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);<span class=\"comment\">//[&quot;nimoc@126.com&quot;, &quot;nimoc&quot;, &quot;@&quot;, &quot;126.com&quot;, 0, &quot;nimoc@126.com&quot;] </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;返回值会替换掉匹配到的目标&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">    <span class=\"string\">&#x27;nimoc@126.com&#x27;</span>.replace(<span class=\"regexp\">/(.+)(@)(.*)/</span>,logArguments)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p><strong>参数分别为</strong></p>\n<ol>\n<li> 匹配到的字符串（此例为<a href=\"mailto:&#x6e;&#x69;&#109;&#111;&#99;&#x40;&#49;&#50;&#54;&#x2e;&#99;&#x6f;&#109;\">&#x6e;&#x69;&#109;&#111;&#99;&#x40;&#49;&#50;&#54;&#x2e;&#99;&#x6f;&#109;</a>,推荐修改上面代码的正则来查看匹配到的字符帮助理解)</li>\n<li> 如果正则使用了分组匹配就为多个否则无此参数。（此例的参数就分别为<code>&quot;nimoc&quot;, &quot;@&quot;, &quot;126.com&quot;</code>。推荐修改正则为/nimo/查看控制台中返回的arguments值）</li>\n<li> 匹配字符串的对应索引位置（此例为0）</li>\n<li> 原始字符串(此例为<a href=\"mailto:&#110;&#105;&#x6d;&#111;&#x63;&#x40;&#x31;&#50;&#x36;&#x2e;&#x63;&#x6f;&#x6d;\">&#110;&#105;&#x6d;&#111;&#x63;&#x40;&#x31;&#50;&#x36;&#x2e;&#x63;&#x6f;&#x6d;</a>)<h3 id=\"使用自定义函数将A-G字符串改为小写\"><a href=\"#使用自定义函数将A-G字符串改为小写\" class=\"headerlink\" title=\"使用自定义函数将A-G字符串改为小写\"></a>使用自定义函数将A-G字符串改为小写</h3></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;JAVASCRIPT&#x27;</span>.replace(<span class=\"regexp\">/[A-G]/g</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>].toLowerCase();</span><br><span class=\"line\">&#125;)<span class=\"comment\">//JaVaScRIPT </span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用自定义函数做回调式替换将行内样式中的单引号删除\"><a href=\"#使用自定义函数做回调式替换将行内样式中的单引号删除\" class=\"headerlink\" title=\"使用自定义函数做回调式替换将行内样式中的单引号删除\"></a>使用自定义函数做回调式替换将行内样式中的单引号删除</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&lt;span style=&quot;font-family:\\&#x27;微软雅黑\\&#x27;;&quot;&gt;;demo&lt;/span&gt;&#x27;</span>.replace(<span class=\"regexp\">/\\&#x27;[^&#x27;]+\\&#x27;/g</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;      </span><br><span class=\"line\">    <span class=\"keyword\">var</span> sResult=<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(sResult);<span class=\"comment\">//&#x27;微软雅黑&#x27;</span></span><br><span class=\"line\">    sResult=sResult.replace(<span class=\"regexp\">/\\&#x27;/g</span>,<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(sResult);<span class=\"comment\">//微软雅黑</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sResult;</span><br><span class=\"line\">&#125;)<span class=\"comment\">//&lt;span style=&quot;font-family:微软雅黑;&quot;&gt;demo&lt;/span&gt; </span></span><br></pre></td></tr></table></figure>\n<h2 id=\"最后的小试牛刀\"><a href=\"#最后的小试牛刀\" class=\"headerlink\" title=\"最后的小试牛刀\"></a>最后的小试牛刀</h2><p>这一节是交给阅读者发挥的内容：</p>\n<h3 id=\"洗扑克\"><a href=\"#洗扑克\" class=\"headerlink\" title=\"洗扑克\"></a>洗扑克</h3><p>需要将Thisnimoc-JavaScript使用正则替换成 <code>TJhaivsaNSicmroijpst</code></p>\n<p><a href=\"https://github.com/nimoc/blog/issues/15\">点此订阅博客</a></p>\n<p>若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：<a href=\"https://github.com/nimoc/blog/issues/2\">https://github.com/nimoc/blog/issues/2</a></p>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>"},{"_content":"# github订阅\n\n<img src=\"https://cloud.githubusercontent.com/assets/3949015/6850719/bf6f642e-d415-11e4-8096-157ed60f3c3b.png\" width=\"300\">\n\n## 订阅\n\n点击本页面右上角的 [Watch](https://github.com/nimoc/blog/subscription)  在弹出框中点击 `Watching` 订阅本博客，这样本博客的所有文章更新和评论都会在github首页出现。\n![image](https://cloud.githubusercontent.com/assets/3949015/6850925/f12bc470-d416-11e4-9a09-ec3f59041a00.png)\n### 收藏\n\n点击 `Star` 收藏本博客，以便在 [stars](https://github.com/stars) 中找到本博客。\n\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","source":"watch.md","raw":"# github订阅\n\n<img src=\"https://cloud.githubusercontent.com/assets/3949015/6850719/bf6f642e-d415-11e4-8096-157ed60f3c3b.png\" width=\"300\">\n\n## 订阅\n\n点击本页面右上角的 [Watch](https://github.com/nimoc/blog/subscription)  在弹出框中点击 `Watching` 订阅本博客，这样本博客的所有文章更新和评论都会在github首页出现。\n![image](https://cloud.githubusercontent.com/assets/3949015/6850925/f12bc470-d416-11e4-9a09-ec3f59041a00.png)\n### 收藏\n\n点击 `Star` 收藏本博客，以便在 [stars](https://github.com/stars) 中找到本博客。\n\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","date":"2021-02-27T06:35:41.905Z","updated":"2021-02-27T06:35:41.905Z","path":"watch.html","title":"","comments":1,"layout":"page","_id":"cklncoqe1000if3u85k5ectb0","content":"<h1 id=\"github订阅\"><a href=\"#github订阅\" class=\"headerlink\" title=\"github订阅\"></a>github订阅</h1><img src=\"https://cloud.githubusercontent.com/assets/3949015/6850719/bf6f642e-d415-11e4-8096-157ed60f3c3b.png\" width=\"300\">\n\n<h2 id=\"订阅\"><a href=\"#订阅\" class=\"headerlink\" title=\"订阅\"></a>订阅</h2><p>点击本页面右上角的 <a href=\"https://github.com/nimoc/blog/subscription\">Watch</a>  在弹出框中点击 <code>Watching</code> 订阅本博客，这样本博客的所有文章更新和评论都会在github首页出现。<br><img src=\"https://cloud.githubusercontent.com/assets/3949015/6850925/f12bc470-d416-11e4-9a09-ec3f59041a00.png\" alt=\"image\"></p>\n<h3 id=\"收藏\"><a href=\"#收藏\" class=\"headerlink\" title=\"收藏\"></a>收藏</h3><p>点击 <code>Star</code> 收藏本博客，以便在 <a href=\"https://github.com/stars\">stars</a> 中找到本博客。</p>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"github订阅\"><a href=\"#github订阅\" class=\"headerlink\" title=\"github订阅\"></a>github订阅</h1><img src=\"https://cloud.githubusercontent.com/assets/3949015/6850719/bf6f642e-d415-11e4-8096-157ed60f3c3b.png\" width=\"300\">\n\n<h2 id=\"订阅\"><a href=\"#订阅\" class=\"headerlink\" title=\"订阅\"></a>订阅</h2><p>点击本页面右上角的 <a href=\"https://github.com/nimoc/blog/subscription\">Watch</a>  在弹出框中点击 <code>Watching</code> 订阅本博客，这样本博客的所有文章更新和评论都会在github首页出现。<br><img src=\"https://cloud.githubusercontent.com/assets/3949015/6850925/f12bc470-d416-11e4-9a09-ec3f59041a00.png\" alt=\"image\"></p>\n<h3 id=\"收藏\"><a href=\"#收藏\" class=\"headerlink\" title=\"收藏\"></a>收藏</h3><p>点击 <code>Star</code> 收藏本博客，以便在 <a href=\"https://github.com/stars\">stars</a> 中找到本博客。</p>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>"},{"_content":"# 前后端数据交互方法\n\n[![blog.nimoc.io](http://blog.nimoc.io/notice/index.svg)](http://blog.nimoc.io/notice/index.html)\n\n> 本文写自 2015年,在现在看来很多方式已经被淘汰了.\n\n在此介绍几种常用的前后端数据交互方法，并给出使用建议。以提高前后端协同开发的效率。  \n此文章适合前后端协同开发经验不足的新手阅读。\n\n**目录:**  \n1. [HTML赋值](#hash_htmlvalue1)\n2. [JS赋值](#hash_jsvar2)\n3. [script填充JSON](#hash_json3)\n4. [AJAX获取JSON](#hash_ajaxjson4)\n5. [WebSocket实时传输数据](#hash_websocket5)\n6. [总结](#hash_summary6)\n\n<a title=\"HTML赋值\" id=\"hash_htmlvalue1\" name=\"hash_htmlvalue1\"></a>\n## HTML赋值\n\n输出到 Element 的 value 或 data-name \n\n``` php\n<input type=\"hidden\" value=\"<?php echo $user_avatar;?>\" />\n<div data-value=\"<?php echo $user_avatar;?>\"></div>\n\n```\n\n渲染结果\n\n``` html\n<input type=\"hidden\" value=\"https://avatars1.githubusercontent.com/u/3949015?v=3&s=40\" />\n<div data-avatar=\"https://avatars1.githubusercontent.com/u/3949015?v=3&s=40\"></div>\n\n```\n\n使用 JS 获取\n\n``` js\n$('input').val();\n// http://jquery.bootcss.com/jQuery.data/\n$('div').data('avatar');\n\n```\n\n**优点：**  \n不占用全局变量，由 JS 自由获取。\n\n**使用建议：**  \n\n适合传递简单数据，也非常适合多个简单数据与 Element 绑定关系。\n\n``` html\n<ul>\n<li>nimoc <span data-userid=\"1\" >删除</span></li>\n<li>nimo22 <span data-userid=\"2\" >删除</span></li>\n<li>nimo33 <span data-userid=\"3\" >删除</span></li>\n<li>nimo44 <span data-userid=\"4\" >删除</span></li>\n<li>nimo55 <span data-userid=\"5\" >删除</span></li>\n</ul>\n<script>\n$('span').on('click',function(){\n    $.post('/ajax/remove/',$(this).data('userid'),function(data){\n        // ...\n    })\n})\n</script>\n\n```\n\n<a title=\"JS赋值\" id=\"hash_jsvar2\" name=\"hash_jsvar2\"></a>\n## JS赋值\n\n将数据填充到 `<script>` 的 JavaScript 变量声明中。\n\n``` php\n<script>\nvar user_avatar = \"<?php echo $user_avatar;?>\";\n// 渲染结果\n// var user_avatar = \"https://avatars1.githubusercontent.com/u/3949015?v=3&s=40\";\n</script>\n\n```\n\n或使用 Smarty 后端模板引擎：\n\n``` js\n<script>\nvar user_avatar = \"{$user_avatar}\";\n</script>\n```\n\n**优点：**\n传递数据非常方便。前端直接调用 user_avatar 变量使用数据。\n\n**缺点：**\n1. 为了传递一个字符串数据占用了全局变量 `user_avatar`，当有很多数据需要传输时则会占用很多全局变量。\n2. 如果返回数据存在换行将会导致JS报错\n\n``` js\n// 渲染结果有换行符\nvar user_id = \"\n\nhttps://avatars1.githubusercontent.com/u/3949015?v=3&s=40\";\n// Uncaught SyntaxError: Unexpected token ILLEGAL\n\n```\n\n**优化：**  \n可以通过指向的某一个变量存放所有后端返回的内容，最小程度占用全局变量。例：\n\n``` js\n// PHP 代码\nvar SERVER_DATA = {\n    username: {$username},\n    userid: {$userid},\n    title: {$title}\n}\n// 渲染结果\nvar SERVER_DATA = {\n    username: \"NimoChu\",\n    userid: 1,\n    title: 'F2E'\n}\n\n```\n\n**使用建议：**  \n需要最快速度传递数据给 JS 并十分确定此数据稳定时，使用此方式。数据格式复杂的建议使用script填充JSON 或AJAX获取JSON 方法。\n\n<a title=\"script填充JSON\" id=\"hash_json3\" name=\"hash_json3\"></a>\n## script填充JSON\n\n[什么是JSON？](http://www.w3school.com.cn/json/json_syntax.asp)\n\n填充 JSON 数据到 `<script>` 标签中，前端通过 DOM 获取 JSON字符串并解析成对象。\n\n``` html\n<!-- PHP 代码 -->\n<script type=\"text/json\" id=\"data\"><?php echo json_encode($data) ?></script>\n<!-- 页面渲染结果 -->\n<script type=\"text/json\" id=\"data\">{\"username\":\"nimoc\",\"userid\":1}</script>\n<script>\nvar data = JSON.parse($('#data').html());\n//{username:\"nimoc\",userid:1}\n</script>\n```\n\n**优点：**  \n页面加载完成后就可以获取到数据。不占用全局变量，可传递大量数据集合。\n\n**缺点：**  \n数据量特别大时会导致页面初次加载变慢。变慢并不只是文件大小导致的，也因为服务器查询数据并返回合集是需要时间，可使用AJAX获取JSON完成按需加载和加载等待。\n\n**使用建议：**  \n适合传递在DOM加载完成时就需要用到的大量数据集合。例如：前端控制页面渲染，后端将JSON数据源填充到 `<script>` 由前端使用 [JavaScript模板引擎](http://www.gbtags.com/technology/javascript/20120917-javascript-template-engine-chooser/)进行页面渲染。\n\n<a title=\"AJAX获取JSON\" id=\"hash_ajaxjson4\" name=\"hash_ajaxjson4\"></a>\n## AJAX获取JSON\n\n使用 AJAX 获取JSON数据\n\n``` html\n<span id=\"showdata\">查看资料</span>\n<div style=\"display:none;\" id=\"box\">\n    <h2>用户信息</h2>\n    <p id=\"info\"><img src=\"loading.gif\" /></p>\n</div>\n```\n\n``` javascript\n$('#showdata').on('click',function(){\n    $('#box').show();\n    $.getJSON('/ajax/userdata/',function(oData){\n        // oData = {\"username\":\"nimoc\",\"userid\":1}\n        $('#info').html('用户名：' + oData.username + '<br>用户ID：' + oData.userid);\n    })\n})\n```\n\n这是一个通过AJAX 获取用户资料的示例。流程如下：\n1. 页面上只显示查看资料\n2. 用户点击查看资料\n3. 显示用户信息和 loading 图片\n4. 向服务器发送获取用户信息的AJAX请求\n5. 服务器返回JSON字符串，$.getJSON  自动将返回的 JSON字符串转换为对象\n6. 填充内容到 `<p id=\"info\">`\n\n**优点：**  \n不占用全局变量和 DOM 节点，可以自由控制获取数据的触发条件（页面加载完成时、用户点击查看资料时或用户点击某个按钮时）。当开始获取数据时可使用 loading 图片占位提示用户数据正在读取。防止页面加载所有数据导致的页面加载缓慢。\n\n**缺点：**  \n会产生额外的HTTP请求。不能在DOM加载完成以后立即获取，需要发送请求-接收响应。\n\n**使用建议：**  \n适合加载非主要信息、设定触发条件（用户点击查看资料时），并提供友好的数据读取等待提示。\n\n<a title=\"WebSocket实时传输数据\" id=\"hash_websocket5\" name=\"hash_websocket5\"></a>\n## WebSocket实时传输数据\n\n如果将 AJAX请求和响应比喻成给服务器发短信和等待服务器回复短信，而 WebSocket 就如同和服务器打电话。\n\n此处不对WebSocket做过多介绍，附上参考资料：\n1. [Wiki:WebSocket](http://zh.wikipedia.org/wiki/WebSocket)\n2. [使用 HTML5 WebSocket 构建实时 Web 应用](http://www.ibm.com/developerworks/cn/web/1112_huangxa_websocket/)\n3. [Ajax vs WebSocket](http://www.web-tinker.com/article/20372.html?utm_source=tuicool)\n\n<a title=\"总结\" id=\"hash_summary6\" name=\"hash_summary6\"></a>\n## 总结\n\n每种情况都有每种情况的用处，没有绝对正确的方法。**根据实际情况灵活的选择获取数据方式**。\n\n相关链接\n- [知乎：前端 ，后端 关于数据交互的问题?](http://www.zhihu.com/question/26532621)\n\n[点此订阅博客](https://github.com/nimoc/blog/issues/15)\n\n若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：[https://github.com/nimoc/blog/issues/13](https://github.com/nimoc/blog/issues/13)\n\n\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"13\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","source":"web_team_interface.md","raw":"# 前后端数据交互方法\n\n[![blog.nimoc.io](http://blog.nimoc.io/notice/index.svg)](http://blog.nimoc.io/notice/index.html)\n\n> 本文写自 2015年,在现在看来很多方式已经被淘汰了.\n\n在此介绍几种常用的前后端数据交互方法，并给出使用建议。以提高前后端协同开发的效率。  \n此文章适合前后端协同开发经验不足的新手阅读。\n\n**目录:**  \n1. [HTML赋值](#hash_htmlvalue1)\n2. [JS赋值](#hash_jsvar2)\n3. [script填充JSON](#hash_json3)\n4. [AJAX获取JSON](#hash_ajaxjson4)\n5. [WebSocket实时传输数据](#hash_websocket5)\n6. [总结](#hash_summary6)\n\n<a title=\"HTML赋值\" id=\"hash_htmlvalue1\" name=\"hash_htmlvalue1\"></a>\n## HTML赋值\n\n输出到 Element 的 value 或 data-name \n\n``` php\n<input type=\"hidden\" value=\"<?php echo $user_avatar;?>\" />\n<div data-value=\"<?php echo $user_avatar;?>\"></div>\n\n```\n\n渲染结果\n\n``` html\n<input type=\"hidden\" value=\"https://avatars1.githubusercontent.com/u/3949015?v=3&s=40\" />\n<div data-avatar=\"https://avatars1.githubusercontent.com/u/3949015?v=3&s=40\"></div>\n\n```\n\n使用 JS 获取\n\n``` js\n$('input').val();\n// http://jquery.bootcss.com/jQuery.data/\n$('div').data('avatar');\n\n```\n\n**优点：**  \n不占用全局变量，由 JS 自由获取。\n\n**使用建议：**  \n\n适合传递简单数据，也非常适合多个简单数据与 Element 绑定关系。\n\n``` html\n<ul>\n<li>nimoc <span data-userid=\"1\" >删除</span></li>\n<li>nimo22 <span data-userid=\"2\" >删除</span></li>\n<li>nimo33 <span data-userid=\"3\" >删除</span></li>\n<li>nimo44 <span data-userid=\"4\" >删除</span></li>\n<li>nimo55 <span data-userid=\"5\" >删除</span></li>\n</ul>\n<script>\n$('span').on('click',function(){\n    $.post('/ajax/remove/',$(this).data('userid'),function(data){\n        // ...\n    })\n})\n</script>\n\n```\n\n<a title=\"JS赋值\" id=\"hash_jsvar2\" name=\"hash_jsvar2\"></a>\n## JS赋值\n\n将数据填充到 `<script>` 的 JavaScript 变量声明中。\n\n``` php\n<script>\nvar user_avatar = \"<?php echo $user_avatar;?>\";\n// 渲染结果\n// var user_avatar = \"https://avatars1.githubusercontent.com/u/3949015?v=3&s=40\";\n</script>\n\n```\n\n或使用 Smarty 后端模板引擎：\n\n``` js\n<script>\nvar user_avatar = \"{$user_avatar}\";\n</script>\n```\n\n**优点：**\n传递数据非常方便。前端直接调用 user_avatar 变量使用数据。\n\n**缺点：**\n1. 为了传递一个字符串数据占用了全局变量 `user_avatar`，当有很多数据需要传输时则会占用很多全局变量。\n2. 如果返回数据存在换行将会导致JS报错\n\n``` js\n// 渲染结果有换行符\nvar user_id = \"\n\nhttps://avatars1.githubusercontent.com/u/3949015?v=3&s=40\";\n// Uncaught SyntaxError: Unexpected token ILLEGAL\n\n```\n\n**优化：**  \n可以通过指向的某一个变量存放所有后端返回的内容，最小程度占用全局变量。例：\n\n``` js\n// PHP 代码\nvar SERVER_DATA = {\n    username: {$username},\n    userid: {$userid},\n    title: {$title}\n}\n// 渲染结果\nvar SERVER_DATA = {\n    username: \"NimoChu\",\n    userid: 1,\n    title: 'F2E'\n}\n\n```\n\n**使用建议：**  \n需要最快速度传递数据给 JS 并十分确定此数据稳定时，使用此方式。数据格式复杂的建议使用script填充JSON 或AJAX获取JSON 方法。\n\n<a title=\"script填充JSON\" id=\"hash_json3\" name=\"hash_json3\"></a>\n## script填充JSON\n\n[什么是JSON？](http://www.w3school.com.cn/json/json_syntax.asp)\n\n填充 JSON 数据到 `<script>` 标签中，前端通过 DOM 获取 JSON字符串并解析成对象。\n\n``` html\n<!-- PHP 代码 -->\n<script type=\"text/json\" id=\"data\"><?php echo json_encode($data) ?></script>\n<!-- 页面渲染结果 -->\n<script type=\"text/json\" id=\"data\">{\"username\":\"nimoc\",\"userid\":1}</script>\n<script>\nvar data = JSON.parse($('#data').html());\n//{username:\"nimoc\",userid:1}\n</script>\n```\n\n**优点：**  \n页面加载完成后就可以获取到数据。不占用全局变量，可传递大量数据集合。\n\n**缺点：**  \n数据量特别大时会导致页面初次加载变慢。变慢并不只是文件大小导致的，也因为服务器查询数据并返回合集是需要时间，可使用AJAX获取JSON完成按需加载和加载等待。\n\n**使用建议：**  \n适合传递在DOM加载完成时就需要用到的大量数据集合。例如：前端控制页面渲染，后端将JSON数据源填充到 `<script>` 由前端使用 [JavaScript模板引擎](http://www.gbtags.com/technology/javascript/20120917-javascript-template-engine-chooser/)进行页面渲染。\n\n<a title=\"AJAX获取JSON\" id=\"hash_ajaxjson4\" name=\"hash_ajaxjson4\"></a>\n## AJAX获取JSON\n\n使用 AJAX 获取JSON数据\n\n``` html\n<span id=\"showdata\">查看资料</span>\n<div style=\"display:none;\" id=\"box\">\n    <h2>用户信息</h2>\n    <p id=\"info\"><img src=\"loading.gif\" /></p>\n</div>\n```\n\n``` javascript\n$('#showdata').on('click',function(){\n    $('#box').show();\n    $.getJSON('/ajax/userdata/',function(oData){\n        // oData = {\"username\":\"nimoc\",\"userid\":1}\n        $('#info').html('用户名：' + oData.username + '<br>用户ID：' + oData.userid);\n    })\n})\n```\n\n这是一个通过AJAX 获取用户资料的示例。流程如下：\n1. 页面上只显示查看资料\n2. 用户点击查看资料\n3. 显示用户信息和 loading 图片\n4. 向服务器发送获取用户信息的AJAX请求\n5. 服务器返回JSON字符串，$.getJSON  自动将返回的 JSON字符串转换为对象\n6. 填充内容到 `<p id=\"info\">`\n\n**优点：**  \n不占用全局变量和 DOM 节点，可以自由控制获取数据的触发条件（页面加载完成时、用户点击查看资料时或用户点击某个按钮时）。当开始获取数据时可使用 loading 图片占位提示用户数据正在读取。防止页面加载所有数据导致的页面加载缓慢。\n\n**缺点：**  \n会产生额外的HTTP请求。不能在DOM加载完成以后立即获取，需要发送请求-接收响应。\n\n**使用建议：**  \n适合加载非主要信息、设定触发条件（用户点击查看资料时），并提供友好的数据读取等待提示。\n\n<a title=\"WebSocket实时传输数据\" id=\"hash_websocket5\" name=\"hash_websocket5\"></a>\n## WebSocket实时传输数据\n\n如果将 AJAX请求和响应比喻成给服务器发短信和等待服务器回复短信，而 WebSocket 就如同和服务器打电话。\n\n此处不对WebSocket做过多介绍，附上参考资料：\n1. [Wiki:WebSocket](http://zh.wikipedia.org/wiki/WebSocket)\n2. [使用 HTML5 WebSocket 构建实时 Web 应用](http://www.ibm.com/developerworks/cn/web/1112_huangxa_websocket/)\n3. [Ajax vs WebSocket](http://www.web-tinker.com/article/20372.html?utm_source=tuicool)\n\n<a title=\"总结\" id=\"hash_summary6\" name=\"hash_summary6\"></a>\n## 总结\n\n每种情况都有每种情况的用处，没有绝对正确的方法。**根据实际情况灵活的选择获取数据方式**。\n\n相关链接\n- [知乎：前端 ，后端 关于数据交互的问题?](http://www.zhihu.com/question/26532621)\n\n[点此订阅博客](https://github.com/nimoc/blog/issues/15)\n\n若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：[https://github.com/nimoc/blog/issues/13](https://github.com/nimoc/blog/issues/13)\n\n\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"13\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","date":"2021-02-27T06:35:41.908Z","updated":"2021-02-27T06:35:41.908Z","path":"web_team_interface.html","title":"","comments":1,"layout":"page","_id":"cklncoqe2000jf3u855f5haga","content":"<h1 id=\"前后端数据交互方法\"><a href=\"#前后端数据交互方法\" class=\"headerlink\" title=\"前后端数据交互方法\"></a>前后端数据交互方法</h1><p><a href=\"http://blog.nimoc.io/notice/index.html\"><img src=\"http://blog.nimoc.io/notice/index.svg\" alt=\"blog.nimoc.io\"></a></p>\n<blockquote>\n<p>本文写自 2015年,在现在看来很多方式已经被淘汰了.</p>\n</blockquote>\n<p>在此介绍几种常用的前后端数据交互方法，并给出使用建议。以提高前后端协同开发的效率。<br>此文章适合前后端协同开发经验不足的新手阅读。</p>\n<p><strong>目录:</strong>  </p>\n<ol>\n<li><a href=\"#hash_htmlvalue1\">HTML赋值</a></li>\n<li><a href=\"#hash_jsvar2\">JS赋值</a></li>\n<li><a href=\"#hash_json3\">script填充JSON</a></li>\n<li><a href=\"#hash_ajaxjson4\">AJAX获取JSON</a></li>\n<li><a href=\"#hash_websocket5\">WebSocket实时传输数据</a></li>\n<li><a href=\"#hash_summary6\">总结</a></li>\n</ol>\n<p><a title=\"HTML赋值\" id=\"hash_htmlvalue1\" name=\"hash_htmlvalue1\"></a></p>\n<h2 id=\"HTML赋值\"><a href=\"#HTML赋值\" class=\"headerlink\" title=\"HTML赋值\"></a>HTML赋值</h2><p>输出到 Element 的 value 或 data-name </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">&quot;hidden&quot;</span> value=<span class=\"string\">&quot;&lt;?php echo <span class=\"subst\">$user_avatar</span>;?&gt;&quot;</span> /&gt;</span><br><span class=\"line\">&lt;div data-value=<span class=\"string\">&quot;&lt;?php echo <span class=\"subst\">$user_avatar</span>;?&gt;&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>渲染结果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;https://avatars1.githubusercontent.com/u/3949015?v=3&amp;s=40&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-avatar</span>=<span class=\"string\">&quot;https://avatars1.githubusercontent.com/u/3949015?v=3&amp;s=40&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用 JS 获取</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;input&#x27;</span>).val();</span><br><span class=\"line\"><span class=\"comment\">// http://jquery.bootcss.com/jQuery.data/</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;div&#x27;</span>).data(<span class=\"string\">&#x27;avatar&#x27;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong><br>不占用全局变量，由 JS 自由获取。</p>\n<p><strong>使用建议：</strong>  </p>\n<p>适合传递简单数据，也非常适合多个简单数据与 Element 绑定关系。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>nimoc <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">data-userid</span>=<span class=\"string\">&quot;1&quot;</span> &gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>nimo22 <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">data-userid</span>=<span class=\"string\">&quot;2&quot;</span> &gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>nimo33 <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">data-userid</span>=<span class=\"string\">&quot;3&quot;</span> &gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>nimo44 <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">data-userid</span>=<span class=\"string\">&quot;4&quot;</span> &gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>nimo55 <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">data-userid</span>=<span class=\"string\">&quot;5&quot;</span> &gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">$(<span class=\"string\">&#x27;span&#x27;</span>).on(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    $.post(<span class=\"string\">&#x27;/ajax/remove/&#x27;</span>,$(<span class=\"built_in\">this</span>).data(<span class=\"string\">&#x27;userid&#x27;</span>),<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// ...</span></span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><a title=\"JS赋值\" id=\"hash_jsvar2\" name=\"hash_jsvar2\"></a></p>\n<h2 id=\"JS赋值\"><a href=\"#JS赋值\" class=\"headerlink\" title=\"JS赋值\"></a>JS赋值</h2><p>将数据填充到 <code>&lt;script&gt;</code> 的 JavaScript 变量声明中。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> user_avatar = <span class=\"string\">&quot;&lt;?php echo <span class=\"subst\">$user_avatar</span>;?&gt;&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 渲染结果</span></span><br><span class=\"line\"><span class=\"comment\">// var user_avatar = &quot;https://avatars1.githubusercontent.com/u/3949015?v=3&amp;s=40&quot;;</span></span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>或使用 Smarty 后端模板引擎：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> user_avatar = <span class=\"string\">&quot;&#123;$user_avatar&#125;&quot;</span>;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong><br>传递数据非常方便。前端直接调用 user_avatar 变量使用数据。</p>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>为了传递一个字符串数据占用了全局变量 <code>user_avatar</code>，当有很多数据需要传输时则会占用很多全局变量。</li>\n<li>如果返回数据存在换行将会导致JS报错</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 渲染结果有换行符</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> user_id = <span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">https://avatars1.githubusercontent.com/u/3949015?v=3&amp;s=40&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// Uncaught SyntaxError: Unexpected token ILLEGAL</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>优化：</strong><br>可以通过指向的某一个变量存放所有后端返回的内容，最小程度占用全局变量。例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// PHP 代码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> SERVER_DATA = &#123;</span><br><span class=\"line\">    username: &#123;$username&#125;,</span><br><span class=\"line\">    userid: &#123;$userid&#125;,</span><br><span class=\"line\">    title: &#123;$title&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 渲染结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> SERVER_DATA = &#123;</span><br><span class=\"line\">    username: <span class=\"string\">&quot;NimoChu&quot;</span>,</span><br><span class=\"line\">    userid: <span class=\"number\">1</span>,</span><br><span class=\"line\">    title: <span class=\"string\">&#x27;F2E&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>使用建议：</strong><br>需要最快速度传递数据给 JS 并十分确定此数据稳定时，使用此方式。数据格式复杂的建议使用script填充JSON 或AJAX获取JSON 方法。</p>\n<p><a title=\"script填充JSON\" id=\"hash_json3\" name=\"hash_json3\"></a></p>\n<h2 id=\"script填充JSON\"><a href=\"#script填充JSON\" class=\"headerlink\" title=\"script填充JSON\"></a>script填充JSON</h2><p><a href=\"http://www.w3school.com.cn/json/json_syntax.asp\">什么是JSON？</a></p>\n<p>填充 JSON 数据到 <code>&lt;script&gt;</code> 标签中，前端通过 DOM 获取 JSON字符串并解析成对象。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- PHP 代码 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/json&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;data&quot;</span>&gt;</span>&lt;?php echo json_encode($data) ?&gt;<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 页面渲染结果 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/json&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;data&quot;</span>&gt;</span><span class=\"javascript\">&#123;<span class=\"string\">&quot;username&quot;</span>:<span class=\"string\">&quot;nimoc&quot;</span>,<span class=\"string\">&quot;userid&quot;</span>:<span class=\"number\">1</span>&#125;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.parse($(<span class=\"string\">&#x27;#data&#x27;</span>).html());</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//&#123;username:&quot;nimoc&quot;,userid:1&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong><br>页面加载完成后就可以获取到数据。不占用全局变量，可传递大量数据集合。</p>\n<p><strong>缺点：</strong><br>数据量特别大时会导致页面初次加载变慢。变慢并不只是文件大小导致的，也因为服务器查询数据并返回合集是需要时间，可使用AJAX获取JSON完成按需加载和加载等待。</p>\n<p><strong>使用建议：</strong><br>适合传递在DOM加载完成时就需要用到的大量数据集合。例如：前端控制页面渲染，后端将JSON数据源填充到 <code>&lt;script&gt;</code> 由前端使用 <a href=\"http://www.gbtags.com/technology/javascript/20120917-javascript-template-engine-chooser/\">JavaScript模板引擎</a>进行页面渲染。</p>\n<p><a title=\"AJAX获取JSON\" id=\"hash_ajaxjson4\" name=\"hash_ajaxjson4\"></a></p>\n<h2 id=\"AJAX获取JSON\"><a href=\"#AJAX获取JSON\" class=\"headerlink\" title=\"AJAX获取JSON\"></a>AJAX获取JSON</h2><p>使用 AJAX 获取JSON数据</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;showdata&quot;</span>&gt;</span>查看资料<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display:none;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>用户信息<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;info&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;loading.gif&quot;</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#showdata&#x27;</span>).on(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#box&#x27;</span>).show();</span><br><span class=\"line\">    $.getJSON(<span class=\"string\">&#x27;/ajax/userdata/&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">oData</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// oData = &#123;&quot;username&quot;:&quot;nimoc&quot;,&quot;userid&quot;:1&#125;</span></span><br><span class=\"line\">        $(<span class=\"string\">&#x27;#info&#x27;</span>).html(<span class=\"string\">&#x27;用户名：&#x27;</span> + oData.username + <span class=\"string\">&#x27;&lt;br&gt;用户ID：&#x27;</span> + oData.userid);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这是一个通过AJAX 获取用户资料的示例。流程如下：</p>\n<ol>\n<li>页面上只显示查看资料</li>\n<li>用户点击查看资料</li>\n<li>显示用户信息和 loading 图片</li>\n<li>向服务器发送获取用户信息的AJAX请求</li>\n<li>服务器返回JSON字符串，$.getJSON  自动将返回的 JSON字符串转换为对象</li>\n<li>填充内容到 <code>&lt;p id=&quot;info&quot;&gt;</code></li>\n</ol>\n<p><strong>优点：</strong><br>不占用全局变量和 DOM 节点，可以自由控制获取数据的触发条件（页面加载完成时、用户点击查看资料时或用户点击某个按钮时）。当开始获取数据时可使用 loading 图片占位提示用户数据正在读取。防止页面加载所有数据导致的页面加载缓慢。</p>\n<p><strong>缺点：</strong><br>会产生额外的HTTP请求。不能在DOM加载完成以后立即获取，需要发送请求-接收响应。</p>\n<p><strong>使用建议：</strong><br>适合加载非主要信息、设定触发条件（用户点击查看资料时），并提供友好的数据读取等待提示。</p>\n<p><a title=\"WebSocket实时传输数据\" id=\"hash_websocket5\" name=\"hash_websocket5\"></a></p>\n<h2 id=\"WebSocket实时传输数据\"><a href=\"#WebSocket实时传输数据\" class=\"headerlink\" title=\"WebSocket实时传输数据\"></a>WebSocket实时传输数据</h2><p>如果将 AJAX请求和响应比喻成给服务器发短信和等待服务器回复短信，而 WebSocket 就如同和服务器打电话。</p>\n<p>此处不对WebSocket做过多介绍，附上参考资料：</p>\n<ol>\n<li><a href=\"http://zh.wikipedia.org/wiki/WebSocket\">Wiki:WebSocket</a></li>\n<li><a href=\"http://www.ibm.com/developerworks/cn/web/1112_huangxa_websocket/\">使用 HTML5 WebSocket 构建实时 Web 应用</a></li>\n<li><a href=\"http://www.web-tinker.com/article/20372.html?utm_source=tuicool\">Ajax vs WebSocket</a></li>\n</ol>\n<p><a title=\"总结\" id=\"hash_summary6\" name=\"hash_summary6\"></a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>每种情况都有每种情况的用处，没有绝对正确的方法。<strong>根据实际情况灵活的选择获取数据方式</strong>。</p>\n<p>相关链接</p>\n<ul>\n<li><a href=\"http://www.zhihu.com/question/26532621\">知乎：前端 ，后端 关于数据交互的问题?</a></li>\n</ul>\n<p><a href=\"https://github.com/nimoc/blog/issues/15\">点此订阅博客</a></p>\n<p>若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：<a href=\"https://github.com/nimoc/blog/issues/13\">https://github.com/nimoc/blog/issues/13</a></p>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"13\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前后端数据交互方法\"><a href=\"#前后端数据交互方法\" class=\"headerlink\" title=\"前后端数据交互方法\"></a>前后端数据交互方法</h1><p><a href=\"http://blog.nimoc.io/notice/index.html\"><img src=\"http://blog.nimoc.io/notice/index.svg\" alt=\"blog.nimoc.io\"></a></p>\n<blockquote>\n<p>本文写自 2015年,在现在看来很多方式已经被淘汰了.</p>\n</blockquote>\n<p>在此介绍几种常用的前后端数据交互方法，并给出使用建议。以提高前后端协同开发的效率。<br>此文章适合前后端协同开发经验不足的新手阅读。</p>\n<p><strong>目录:</strong>  </p>\n<ol>\n<li><a href=\"#hash_htmlvalue1\">HTML赋值</a></li>\n<li><a href=\"#hash_jsvar2\">JS赋值</a></li>\n<li><a href=\"#hash_json3\">script填充JSON</a></li>\n<li><a href=\"#hash_ajaxjson4\">AJAX获取JSON</a></li>\n<li><a href=\"#hash_websocket5\">WebSocket实时传输数据</a></li>\n<li><a href=\"#hash_summary6\">总结</a></li>\n</ol>\n<p><a title=\"HTML赋值\" id=\"hash_htmlvalue1\" name=\"hash_htmlvalue1\"></a></p>\n<h2 id=\"HTML赋值\"><a href=\"#HTML赋值\" class=\"headerlink\" title=\"HTML赋值\"></a>HTML赋值</h2><p>输出到 Element 的 value 或 data-name </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">&quot;hidden&quot;</span> value=<span class=\"string\">&quot;&lt;?php echo <span class=\"subst\">$user_avatar</span>;?&gt;&quot;</span> /&gt;</span><br><span class=\"line\">&lt;div data-value=<span class=\"string\">&quot;&lt;?php echo <span class=\"subst\">$user_avatar</span>;?&gt;&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>渲染结果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;https://avatars1.githubusercontent.com/u/3949015?v=3&amp;s=40&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-avatar</span>=<span class=\"string\">&quot;https://avatars1.githubusercontent.com/u/3949015?v=3&amp;s=40&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用 JS 获取</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;input&#x27;</span>).val();</span><br><span class=\"line\"><span class=\"comment\">// http://jquery.bootcss.com/jQuery.data/</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;div&#x27;</span>).data(<span class=\"string\">&#x27;avatar&#x27;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong><br>不占用全局变量，由 JS 自由获取。</p>\n<p><strong>使用建议：</strong>  </p>\n<p>适合传递简单数据，也非常适合多个简单数据与 Element 绑定关系。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>nimoc <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">data-userid</span>=<span class=\"string\">&quot;1&quot;</span> &gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>nimo22 <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">data-userid</span>=<span class=\"string\">&quot;2&quot;</span> &gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>nimo33 <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">data-userid</span>=<span class=\"string\">&quot;3&quot;</span> &gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>nimo44 <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">data-userid</span>=<span class=\"string\">&quot;4&quot;</span> &gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>nimo55 <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">data-userid</span>=<span class=\"string\">&quot;5&quot;</span> &gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">$(<span class=\"string\">&#x27;span&#x27;</span>).on(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    $.post(<span class=\"string\">&#x27;/ajax/remove/&#x27;</span>,$(<span class=\"built_in\">this</span>).data(<span class=\"string\">&#x27;userid&#x27;</span>),<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// ...</span></span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><a title=\"JS赋值\" id=\"hash_jsvar2\" name=\"hash_jsvar2\"></a></p>\n<h2 id=\"JS赋值\"><a href=\"#JS赋值\" class=\"headerlink\" title=\"JS赋值\"></a>JS赋值</h2><p>将数据填充到 <code>&lt;script&gt;</code> 的 JavaScript 变量声明中。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> user_avatar = <span class=\"string\">&quot;&lt;?php echo <span class=\"subst\">$user_avatar</span>;?&gt;&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 渲染结果</span></span><br><span class=\"line\"><span class=\"comment\">// var user_avatar = &quot;https://avatars1.githubusercontent.com/u/3949015?v=3&amp;s=40&quot;;</span></span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>或使用 Smarty 后端模板引擎：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> user_avatar = <span class=\"string\">&quot;&#123;$user_avatar&#125;&quot;</span>;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong><br>传递数据非常方便。前端直接调用 user_avatar 变量使用数据。</p>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>为了传递一个字符串数据占用了全局变量 <code>user_avatar</code>，当有很多数据需要传输时则会占用很多全局变量。</li>\n<li>如果返回数据存在换行将会导致JS报错</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 渲染结果有换行符</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> user_id = <span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">https://avatars1.githubusercontent.com/u/3949015?v=3&amp;s=40&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// Uncaught SyntaxError: Unexpected token ILLEGAL</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>优化：</strong><br>可以通过指向的某一个变量存放所有后端返回的内容，最小程度占用全局变量。例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// PHP 代码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> SERVER_DATA = &#123;</span><br><span class=\"line\">    username: &#123;$username&#125;,</span><br><span class=\"line\">    userid: &#123;$userid&#125;,</span><br><span class=\"line\">    title: &#123;$title&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 渲染结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> SERVER_DATA = &#123;</span><br><span class=\"line\">    username: <span class=\"string\">&quot;NimoChu&quot;</span>,</span><br><span class=\"line\">    userid: <span class=\"number\">1</span>,</span><br><span class=\"line\">    title: <span class=\"string\">&#x27;F2E&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>使用建议：</strong><br>需要最快速度传递数据给 JS 并十分确定此数据稳定时，使用此方式。数据格式复杂的建议使用script填充JSON 或AJAX获取JSON 方法。</p>\n<p><a title=\"script填充JSON\" id=\"hash_json3\" name=\"hash_json3\"></a></p>\n<h2 id=\"script填充JSON\"><a href=\"#script填充JSON\" class=\"headerlink\" title=\"script填充JSON\"></a>script填充JSON</h2><p><a href=\"http://www.w3school.com.cn/json/json_syntax.asp\">什么是JSON？</a></p>\n<p>填充 JSON 数据到 <code>&lt;script&gt;</code> 标签中，前端通过 DOM 获取 JSON字符串并解析成对象。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- PHP 代码 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/json&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;data&quot;</span>&gt;</span>&lt;?php echo json_encode($data) ?&gt;<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 页面渲染结果 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/json&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;data&quot;</span>&gt;</span><span class=\"javascript\">&#123;<span class=\"string\">&quot;username&quot;</span>:<span class=\"string\">&quot;nimoc&quot;</span>,<span class=\"string\">&quot;userid&quot;</span>:<span class=\"number\">1</span>&#125;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.parse($(<span class=\"string\">&#x27;#data&#x27;</span>).html());</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//&#123;username:&quot;nimoc&quot;,userid:1&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong><br>页面加载完成后就可以获取到数据。不占用全局变量，可传递大量数据集合。</p>\n<p><strong>缺点：</strong><br>数据量特别大时会导致页面初次加载变慢。变慢并不只是文件大小导致的，也因为服务器查询数据并返回合集是需要时间，可使用AJAX获取JSON完成按需加载和加载等待。</p>\n<p><strong>使用建议：</strong><br>适合传递在DOM加载完成时就需要用到的大量数据集合。例如：前端控制页面渲染，后端将JSON数据源填充到 <code>&lt;script&gt;</code> 由前端使用 <a href=\"http://www.gbtags.com/technology/javascript/20120917-javascript-template-engine-chooser/\">JavaScript模板引擎</a>进行页面渲染。</p>\n<p><a title=\"AJAX获取JSON\" id=\"hash_ajaxjson4\" name=\"hash_ajaxjson4\"></a></p>\n<h2 id=\"AJAX获取JSON\"><a href=\"#AJAX获取JSON\" class=\"headerlink\" title=\"AJAX获取JSON\"></a>AJAX获取JSON</h2><p>使用 AJAX 获取JSON数据</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;showdata&quot;</span>&gt;</span>查看资料<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display:none;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>用户信息<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;info&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;loading.gif&quot;</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#showdata&#x27;</span>).on(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#box&#x27;</span>).show();</span><br><span class=\"line\">    $.getJSON(<span class=\"string\">&#x27;/ajax/userdata/&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">oData</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// oData = &#123;&quot;username&quot;:&quot;nimoc&quot;,&quot;userid&quot;:1&#125;</span></span><br><span class=\"line\">        $(<span class=\"string\">&#x27;#info&#x27;</span>).html(<span class=\"string\">&#x27;用户名：&#x27;</span> + oData.username + <span class=\"string\">&#x27;&lt;br&gt;用户ID：&#x27;</span> + oData.userid);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这是一个通过AJAX 获取用户资料的示例。流程如下：</p>\n<ol>\n<li>页面上只显示查看资料</li>\n<li>用户点击查看资料</li>\n<li>显示用户信息和 loading 图片</li>\n<li>向服务器发送获取用户信息的AJAX请求</li>\n<li>服务器返回JSON字符串，$.getJSON  自动将返回的 JSON字符串转换为对象</li>\n<li>填充内容到 <code>&lt;p id=&quot;info&quot;&gt;</code></li>\n</ol>\n<p><strong>优点：</strong><br>不占用全局变量和 DOM 节点，可以自由控制获取数据的触发条件（页面加载完成时、用户点击查看资料时或用户点击某个按钮时）。当开始获取数据时可使用 loading 图片占位提示用户数据正在读取。防止页面加载所有数据导致的页面加载缓慢。</p>\n<p><strong>缺点：</strong><br>会产生额外的HTTP请求。不能在DOM加载完成以后立即获取，需要发送请求-接收响应。</p>\n<p><strong>使用建议：</strong><br>适合加载非主要信息、设定触发条件（用户点击查看资料时），并提供友好的数据读取等待提示。</p>\n<p><a title=\"WebSocket实时传输数据\" id=\"hash_websocket5\" name=\"hash_websocket5\"></a></p>\n<h2 id=\"WebSocket实时传输数据\"><a href=\"#WebSocket实时传输数据\" class=\"headerlink\" title=\"WebSocket实时传输数据\"></a>WebSocket实时传输数据</h2><p>如果将 AJAX请求和响应比喻成给服务器发短信和等待服务器回复短信，而 WebSocket 就如同和服务器打电话。</p>\n<p>此处不对WebSocket做过多介绍，附上参考资料：</p>\n<ol>\n<li><a href=\"http://zh.wikipedia.org/wiki/WebSocket\">Wiki:WebSocket</a></li>\n<li><a href=\"http://www.ibm.com/developerworks/cn/web/1112_huangxa_websocket/\">使用 HTML5 WebSocket 构建实时 Web 应用</a></li>\n<li><a href=\"http://www.web-tinker.com/article/20372.html?utm_source=tuicool\">Ajax vs WebSocket</a></li>\n</ol>\n<p><a title=\"总结\" id=\"hash_summary6\" name=\"hash_summary6\"></a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>每种情况都有每种情况的用处，没有绝对正确的方法。<strong>根据实际情况灵活的选择获取数据方式</strong>。</p>\n<p>相关链接</p>\n<ul>\n<li><a href=\"http://www.zhihu.com/question/26532621\">知乎：前端 ，后端 关于数据交互的问题?</a></li>\n</ul>\n<p><a href=\"https://github.com/nimoc/blog/issues/15\">点此订阅博客</a></p>\n<p>若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：<a href=\"https://github.com/nimoc/blog/issues/13\">https://github.com/nimoc/blog/issues/13</a></p>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"13\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>"},{"_content":"<h1>Web前端写给Web设计师的注意事项</h1>\n\n[![blog.nimoc.io](http://blog.nimoc.io/notice/index.svg)](http://blog.nimoc.io/notice/index.html)\n\n<blockquote>\n<p>Web 设计和 Web 前端都应该仔细阅读此文档，会减少因为设计不合理导致的返工。</p>\n</blockquote>\n\n\n<p>Web 设计因为要在浏览器中实现，有时还需要『动』起来，在设计时有一定的限制。</p>\n\n\n<p><strong>前端同行应该以此文档作为审核设计稿的依据，不应该拿到设计稿直接开发。</strong></p>\n\n\n<p>有任何问题请 <a href=\"https://github.com/nimoc/web-desgin-notes/issues/new\">参与讨论</a> <a href=\"https://github.com/nimoc/web-desgin-notes/issues\">讨论列表</a></p>\n\n\n<blockquote>\n<p> <strong><a href=\"https://github.com/nimoc/web-desgin-notes/subscription\">Watch</a></strong> 订阅本文档更新</p>\n</blockquote>\n\n\n<hr>\n\n<p><a name=\"user-content-hash_top\" href=\"https://github.com/nimoc/web-design-notes#hash_top\"></a></p>\n\n\n<p><strong>索引</strong></p>\n\n\n<p><a href=\"https://github.com/nimoc/web-design-notes#hash_collect\">资源</a></p>\n\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_size\">页面尺寸</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_size_min-width\">最小宽度</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_responsive\">响应式设计</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_retina\">移动设备 Retina</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font\">字体</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font-size\">大小</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font-special\">特殊字体</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font-icon\">字体图标</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow\">内容溢出</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow-ddd\">...</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow-clip\">裁剪</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow-tip\">提示</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd\">PSD</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-layer-name\">图层命名</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-retina\">Retina</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-marker\">标注</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-font\">字体</a></li>\n</ol></li>\n<li>栅格化</li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status\">状态</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-loading\">Loading</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-hover\">hover</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-error\">error</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-paging\">分页</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-logout\">用户超时登出</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_ui\">UI组件化</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_ui-charts\">图表</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_typo\">typo 内容排版样式</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_typo-rich-text-editor\">富文本编辑</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_typo-markdown\">markdown</a>)</li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_everyone_checkout\">技术团队审核设计稿</a></li>\n</ol>\n\n\n[订阅博客](https://github.com/nimoc/blog/issues/15)\n\n若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：[https://github.com/nimoc/blog/issues/26](https://github.com/nimoc/blog/issues/26)\n\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","source":"web_design_notes.md","raw":"<h1>Web前端写给Web设计师的注意事项</h1>\n\n[![blog.nimoc.io](http://blog.nimoc.io/notice/index.svg)](http://blog.nimoc.io/notice/index.html)\n\n<blockquote>\n<p>Web 设计和 Web 前端都应该仔细阅读此文档，会减少因为设计不合理导致的返工。</p>\n</blockquote>\n\n\n<p>Web 设计因为要在浏览器中实现，有时还需要『动』起来，在设计时有一定的限制。</p>\n\n\n<p><strong>前端同行应该以此文档作为审核设计稿的依据，不应该拿到设计稿直接开发。</strong></p>\n\n\n<p>有任何问题请 <a href=\"https://github.com/nimoc/web-desgin-notes/issues/new\">参与讨论</a> <a href=\"https://github.com/nimoc/web-desgin-notes/issues\">讨论列表</a></p>\n\n\n<blockquote>\n<p> <strong><a href=\"https://github.com/nimoc/web-desgin-notes/subscription\">Watch</a></strong> 订阅本文档更新</p>\n</blockquote>\n\n\n<hr>\n\n<p><a name=\"user-content-hash_top\" href=\"https://github.com/nimoc/web-design-notes#hash_top\"></a></p>\n\n\n<p><strong>索引</strong></p>\n\n\n<p><a href=\"https://github.com/nimoc/web-design-notes#hash_collect\">资源</a></p>\n\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_size\">页面尺寸</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_size_min-width\">最小宽度</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_responsive\">响应式设计</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_retina\">移动设备 Retina</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font\">字体</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font-size\">大小</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font-special\">特殊字体</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font-icon\">字体图标</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow\">内容溢出</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow-ddd\">...</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow-clip\">裁剪</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow-tip\">提示</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd\">PSD</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-layer-name\">图层命名</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-retina\">Retina</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-marker\">标注</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-font\">字体</a></li>\n</ol></li>\n<li>栅格化</li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status\">状态</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-loading\">Loading</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-hover\">hover</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-error\">error</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-paging\">分页</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-logout\">用户超时登出</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_ui\">UI组件化</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_ui-charts\">图表</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_typo\">typo 内容排版样式</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_typo-rich-text-editor\">富文本编辑</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_typo-markdown\">markdown</a>)</li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_everyone_checkout\">技术团队审核设计稿</a></li>\n</ol>\n\n\n[订阅博客](https://github.com/nimoc/blog/issues/15)\n\n若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：[https://github.com/nimoc/blog/issues/26](https://github.com/nimoc/blog/issues/26)\n\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","date":"2021-02-27T06:35:41.907Z","updated":"2021-02-27T06:35:41.907Z","path":"web_design_notes.html","title":"","comments":1,"layout":"page","_id":"cklncoqe6000kf3u8h9fw2qvs","content":"<h1>Web前端写给Web设计师的注意事项</h1>\n\n<p><a href=\"http://blog.nimoc.io/notice/index.html\"><img src=\"http://blog.nimoc.io/notice/index.svg\" alt=\"blog.nimoc.io\"></a></p>\n<blockquote>\n<p>Web 设计和 Web 前端都应该仔细阅读此文档，会减少因为设计不合理导致的返工。</p>\n</blockquote>\n\n\n<p>Web 设计因为要在浏览器中实现，有时还需要『动』起来，在设计时有一定的限制。</p>\n\n\n<p><strong>前端同行应该以此文档作为审核设计稿的依据，不应该拿到设计稿直接开发。</strong></p>\n\n\n<p>有任何问题请 <a href=\"https://github.com/nimoc/web-desgin-notes/issues/new\">参与讨论</a> <a href=\"https://github.com/nimoc/web-desgin-notes/issues\">讨论列表</a></p>\n\n\n<blockquote>\n<p> <strong><a href=\"https://github.com/nimoc/web-desgin-notes/subscription\">Watch</a></strong> 订阅本文档更新</p>\n</blockquote>\n\n\n<hr>\n\n<p><a name=\"user-content-hash_top\" href=\"https://github.com/nimoc/web-design-notes#hash_top\"></a></p>\n\n\n<p><strong>索引</strong></p>\n\n\n<p><a href=\"https://github.com/nimoc/web-design-notes#hash_collect\">资源</a></p>\n\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_size\">页面尺寸</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_size_min-width\">最小宽度</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_responsive\">响应式设计</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_retina\">移动设备 Retina</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font\">字体</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font-size\">大小</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font-special\">特殊字体</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font-icon\">字体图标</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow\">内容溢出</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow-ddd\">...</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow-clip\">裁剪</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow-tip\">提示</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd\">PSD</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-layer-name\">图层命名</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-retina\">Retina</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-marker\">标注</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-font\">字体</a></li>\n</ol></li>\n<li>栅格化</li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status\">状态</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-loading\">Loading</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-hover\">hover</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-error\">error</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-paging\">分页</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-logout\">用户超时登出</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_ui\">UI组件化</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_ui-charts\">图表</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_typo\">typo 内容排版样式</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_typo-rich-text-editor\">富文本编辑</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_typo-markdown\">markdown</a>)</li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_everyone_checkout\">技术团队审核设计稿</a></li>\n</ol>\n\n\n<p><a href=\"https://github.com/nimoc/blog/issues/15\">订阅博客</a></p>\n<p>若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：<a href=\"https://github.com/nimoc/blog/issues/26\">https://github.com/nimoc/blog/issues/26</a></p>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","site":{"data":{}},"excerpt":"","more":"<h1>Web前端写给Web设计师的注意事项</h1>\n\n<p><a href=\"http://blog.nimoc.io/notice/index.html\"><img src=\"http://blog.nimoc.io/notice/index.svg\" alt=\"blog.nimoc.io\"></a></p>\n<blockquote>\n<p>Web 设计和 Web 前端都应该仔细阅读此文档，会减少因为设计不合理导致的返工。</p>\n</blockquote>\n\n\n<p>Web 设计因为要在浏览器中实现，有时还需要『动』起来，在设计时有一定的限制。</p>\n\n\n<p><strong>前端同行应该以此文档作为审核设计稿的依据，不应该拿到设计稿直接开发。</strong></p>\n\n\n<p>有任何问题请 <a href=\"https://github.com/nimoc/web-desgin-notes/issues/new\">参与讨论</a> <a href=\"https://github.com/nimoc/web-desgin-notes/issues\">讨论列表</a></p>\n\n\n<blockquote>\n<p> <strong><a href=\"https://github.com/nimoc/web-desgin-notes/subscription\">Watch</a></strong> 订阅本文档更新</p>\n</blockquote>\n\n\n<hr>\n\n<p><a name=\"user-content-hash_top\" href=\"https://github.com/nimoc/web-design-notes#hash_top\"></a></p>\n\n\n<p><strong>索引</strong></p>\n\n\n<p><a href=\"https://github.com/nimoc/web-design-notes#hash_collect\">资源</a></p>\n\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_size\">页面尺寸</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_size_min-width\">最小宽度</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_responsive\">响应式设计</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_retina\">移动设备 Retina</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font\">字体</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font-size\">大小</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font-special\">特殊字体</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_font-icon\">字体图标</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow\">内容溢出</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow-ddd\">...</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow-clip\">裁剪</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_text-overflow-tip\">提示</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd\">PSD</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-layer-name\">图层命名</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-retina\">Retina</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-marker\">标注</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_psd-font\">字体</a></li>\n</ol></li>\n<li>栅格化</li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status\">状态</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-loading\">Loading</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-hover\">hover</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-error\">error</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-paging\">分页</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_status-logout\">用户超时登出</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_ui\">UI组件化</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_ui-charts\">图表</a></li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_typo\">typo 内容排版样式</a>\n\n<ol>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_typo-rich-text-editor\">富文本编辑</a></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_typo-markdown\">markdown</a>)</li>\n</ol></li>\n<li><a href=\"https://github.com/nimoc/web-design-notes#hash_everyone_checkout\">技术团队审核设计稿</a></li>\n</ol>\n\n\n<p><a href=\"https://github.com/nimoc/blog/issues/15\">订阅博客</a></p>\n<p>若作者显示不是Nimo（被转载了），请访问Github原文进行讨论：<a href=\"https://github.com/nimoc/blog/issues/26\">https://github.com/nimoc/blog/issues/26</a></p>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"15\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>"},{"_content":"## 微信小程序广告对接指导手册\n\n[![blog.nimoc.io](http://blog.nimoc.io/notice/index.svg)](http://blog.nimoc.io/notice/index.html)\n\n友情链接: [fucking-weapp](https://github.com/onface/fucking-weapp)\n\n## 业务场景\n\n因公司业务需求，需要**在微信小程序中插入广告**。点击广告后跳转至广告客户的小程序中，或展示广告客户的信息。\n\n或者需要推广自己公司的微信小程序，需要支付其他公司广告费用，其他公司通过各种方式**引导普通用户进入微信小程序**。\n\n## 支持的对接方式\n\n### 流量方\n\n1. 跳转其他小程序\n2. 跳转APP\n3. 打开网页\n\n### 广告主\n\n1. 普通链接\n2. 公众号推文\n3. APP直接打开小程序\n4. 公众/服务号菜单\n\n\n> 流量方指的是在自己的小程序中加入客户的广告收取广告费用的公司\n\n> 广告主指的是支付广告费用给其他公司，其他公司通过各种方式引导普通用户进入自己的小程序\n\n## 流量方\n\n### 跳转其他小程序\n\n#### 商务\n\n跳转其他小程序需要客户提供他的小程序 `app-id` 小程序路径和 `extra-data`, `extra-data` 一般作为统计不同流量方的标识。（推广ID）\n\n并在自己的小程序管理后台关联客户的 `app-id`\n\n跳转有两种方式：\n\n1. 进入自己的小程序后直接跳转到其他小程序\n2. 点击按钮跳转到其他小程序\n\n> 目前可以打开自己的小程序直接跳转到客户的小程序，但是这个功能后续会被微信禁用。\n\n\n#### 技术实现\n\n##### 直接跳转\n\n> 此接口即将废弃，请使用 `<navigator>` 组件来使用此功能\n\n```js\nwx.navigateToMiniProgram({\n  appId: '',\n  path: '',\n  extraData: {\n    channel_id: '客户提供的流量方标识'\n  },\n  success(res) {\n    // 打开成功\n  }\n})\n```\n\n[wx.navigateToMiniProgram](https://developers.weixin.qq.com/miniprogram/dev/api/navigateToMiniProgram.html)\n\n##### 点击按钮跳转\n\n```html\n<navigator\n    target=\"miniProgram\"\n    open-type=\"navigate\"\n    app-id=\"小程序APPID\"\n    path=\"小程序路径\"\n    extra-data=\"\"\n    version=\"release\"\n    >跳转其他小程序</navigator>\n```\n[navigator](https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html)\n\n\n### 跳转 APP\n\n#### 商务\n\n跳转 APP 必须通过用户主动点击按钮才能跳转。\n\n与客户的技术对接时请将这个链接发送给客户 https://developers.weixin.qq.com/miniprogram/dev/api/launchApp.html 需要客户的技术人员接入微信 OpenSDK。\n\n#### 技术实现\n\n可尝试在 `app-parameter` 中传递用于统计的流量方标识\n\n```html\n<button open-type=\"launchApp\" app-parameter=\"wechat\" binderror=\"launchAppError\">打开APP</button>\n```\n\n```js\nPage({\n    launchAppError: function(e) {\n        console.log(e.detail.errMsg)\n    }\n})\n```\n\n[launchApp](https://developers.weixin.qq.com/miniprogram/dev/api/launchApp.html)\n\n### 打开网页\n\n微信小程序官方提供了打开网页的功能，但是只能打开绑定此小程序的域名。\n\n\n每个小程序只能绑定20个业务域名，业务域名也就是客户的网址。绑定业务域名时需要在微信小程序管理后台下载验证文件，交给广告客户上传到客户的服务器。（客户在安全性和便利性上不一定会愿意），上传成功后即可在小程序中打开客户的网站。但客户的网站中不可以跳转到其他不在业务域名的网站。\n\n> 注意：业务域名一年只能修改50次。所以建议寻找稳定的广告客户。小客户经常更换的不建议合作。\n\n[web-view](https://developers.weixin.qq.com/miniprogram/dev/component/web-view.html)\n\n\n## 广告主\n\n### 普通链接\n\n找设计人员设计页面，比如：\n\n![](http://effect.admpv.com/turntable/index.png)\n\n然后由技术人员上传到服务器，给商务人员一个在线访问地址。商务将地址给客户。客户引导用户进入页面识别二维码进入微信小程序。\n\n#### 技术实现\n\n通过微信小程序后台 **设置>开发设置>扫普通链接二维码打开小程序** 可以生成二维码，二维码可以加上唯一标识，统计不同流量的访问情况。\n\n\n### 公众号推文\n\n#### 阅读原文\n\n与普通链接一致，向技术索取链接地址\n\n#### 小程序\n\n微信推文中可插入小程序卡片，点击卡片可直接打开微信小程序。技术需要向商务提供 AppID,路径(path) ，路径上应该带上统计id。\n\n##### 流量方操作流程\n\n1. 流量方时需要在微信小程序管理后台管理关联我们的小程序（我们需要提供小程序 AppID）\n2. 关联后需要我们自己在微信小程序管理后台同意关联\n3. 创建推文时选择小程序>插入小程序卡片\n\n### APP直接打开小程序\n\n\n移动应用拉起小程序是指用户可以通过接入该功能的第三方移动应用（APP）跳转至某一微信小程序的指定页面，完成服务后跳回至原移动应用（APP）。\n\n##### 流量方操作流程\n\n[移动应用拉起小程序功能](https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=21526646385rK1Bs&token=&lang=zh_CN)\n\n**需要在微信开放平台创建应用后才能实现APP打开小程序 [创建应用](https://open.weixin.qq.com/cgi-bin/frame?t=home/app_tmpl&lang=zh_CN)**\n\n[Android开发示例](https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=21526646437Y6nEC&token=&lang=zh_CN)\n\n[iOS开发示例](https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=21526646447MMfXU&token=&lang=zh_CN)\n\n### 公众/服务号菜单\n\n#### 流量方操作流程\n\n登录微信公众号/服务号后台，选择左侧导航自定义菜单。选择对应菜单，菜单内容选择跳转小程序。\n\n未出现我们小程序的，需要关联我们的小程序。我们需要提供 AppID 给流量方关联后需要我们在后台确定绑定。\n\n\n若作者显示不是Nimo （被转载了），请访问Github原文进行讨论：https://github.com/nimoc/blog/issues/31\n\n\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"31\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","source":"weapp_ad_jump.md","raw":"## 微信小程序广告对接指导手册\n\n[![blog.nimoc.io](http://blog.nimoc.io/notice/index.svg)](http://blog.nimoc.io/notice/index.html)\n\n友情链接: [fucking-weapp](https://github.com/onface/fucking-weapp)\n\n## 业务场景\n\n因公司业务需求，需要**在微信小程序中插入广告**。点击广告后跳转至广告客户的小程序中，或展示广告客户的信息。\n\n或者需要推广自己公司的微信小程序，需要支付其他公司广告费用，其他公司通过各种方式**引导普通用户进入微信小程序**。\n\n## 支持的对接方式\n\n### 流量方\n\n1. 跳转其他小程序\n2. 跳转APP\n3. 打开网页\n\n### 广告主\n\n1. 普通链接\n2. 公众号推文\n3. APP直接打开小程序\n4. 公众/服务号菜单\n\n\n> 流量方指的是在自己的小程序中加入客户的广告收取广告费用的公司\n\n> 广告主指的是支付广告费用给其他公司，其他公司通过各种方式引导普通用户进入自己的小程序\n\n## 流量方\n\n### 跳转其他小程序\n\n#### 商务\n\n跳转其他小程序需要客户提供他的小程序 `app-id` 小程序路径和 `extra-data`, `extra-data` 一般作为统计不同流量方的标识。（推广ID）\n\n并在自己的小程序管理后台关联客户的 `app-id`\n\n跳转有两种方式：\n\n1. 进入自己的小程序后直接跳转到其他小程序\n2. 点击按钮跳转到其他小程序\n\n> 目前可以打开自己的小程序直接跳转到客户的小程序，但是这个功能后续会被微信禁用。\n\n\n#### 技术实现\n\n##### 直接跳转\n\n> 此接口即将废弃，请使用 `<navigator>` 组件来使用此功能\n\n```js\nwx.navigateToMiniProgram({\n  appId: '',\n  path: '',\n  extraData: {\n    channel_id: '客户提供的流量方标识'\n  },\n  success(res) {\n    // 打开成功\n  }\n})\n```\n\n[wx.navigateToMiniProgram](https://developers.weixin.qq.com/miniprogram/dev/api/navigateToMiniProgram.html)\n\n##### 点击按钮跳转\n\n```html\n<navigator\n    target=\"miniProgram\"\n    open-type=\"navigate\"\n    app-id=\"小程序APPID\"\n    path=\"小程序路径\"\n    extra-data=\"\"\n    version=\"release\"\n    >跳转其他小程序</navigator>\n```\n[navigator](https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html)\n\n\n### 跳转 APP\n\n#### 商务\n\n跳转 APP 必须通过用户主动点击按钮才能跳转。\n\n与客户的技术对接时请将这个链接发送给客户 https://developers.weixin.qq.com/miniprogram/dev/api/launchApp.html 需要客户的技术人员接入微信 OpenSDK。\n\n#### 技术实现\n\n可尝试在 `app-parameter` 中传递用于统计的流量方标识\n\n```html\n<button open-type=\"launchApp\" app-parameter=\"wechat\" binderror=\"launchAppError\">打开APP</button>\n```\n\n```js\nPage({\n    launchAppError: function(e) {\n        console.log(e.detail.errMsg)\n    }\n})\n```\n\n[launchApp](https://developers.weixin.qq.com/miniprogram/dev/api/launchApp.html)\n\n### 打开网页\n\n微信小程序官方提供了打开网页的功能，但是只能打开绑定此小程序的域名。\n\n\n每个小程序只能绑定20个业务域名，业务域名也就是客户的网址。绑定业务域名时需要在微信小程序管理后台下载验证文件，交给广告客户上传到客户的服务器。（客户在安全性和便利性上不一定会愿意），上传成功后即可在小程序中打开客户的网站。但客户的网站中不可以跳转到其他不在业务域名的网站。\n\n> 注意：业务域名一年只能修改50次。所以建议寻找稳定的广告客户。小客户经常更换的不建议合作。\n\n[web-view](https://developers.weixin.qq.com/miniprogram/dev/component/web-view.html)\n\n\n## 广告主\n\n### 普通链接\n\n找设计人员设计页面，比如：\n\n![](http://effect.admpv.com/turntable/index.png)\n\n然后由技术人员上传到服务器，给商务人员一个在线访问地址。商务将地址给客户。客户引导用户进入页面识别二维码进入微信小程序。\n\n#### 技术实现\n\n通过微信小程序后台 **设置>开发设置>扫普通链接二维码打开小程序** 可以生成二维码，二维码可以加上唯一标识，统计不同流量的访问情况。\n\n\n### 公众号推文\n\n#### 阅读原文\n\n与普通链接一致，向技术索取链接地址\n\n#### 小程序\n\n微信推文中可插入小程序卡片，点击卡片可直接打开微信小程序。技术需要向商务提供 AppID,路径(path) ，路径上应该带上统计id。\n\n##### 流量方操作流程\n\n1. 流量方时需要在微信小程序管理后台管理关联我们的小程序（我们需要提供小程序 AppID）\n2. 关联后需要我们自己在微信小程序管理后台同意关联\n3. 创建推文时选择小程序>插入小程序卡片\n\n### APP直接打开小程序\n\n\n移动应用拉起小程序是指用户可以通过接入该功能的第三方移动应用（APP）跳转至某一微信小程序的指定页面，完成服务后跳回至原移动应用（APP）。\n\n##### 流量方操作流程\n\n[移动应用拉起小程序功能](https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=21526646385rK1Bs&token=&lang=zh_CN)\n\n**需要在微信开放平台创建应用后才能实现APP打开小程序 [创建应用](https://open.weixin.qq.com/cgi-bin/frame?t=home/app_tmpl&lang=zh_CN)**\n\n[Android开发示例](https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=21526646437Y6nEC&token=&lang=zh_CN)\n\n[iOS开发示例](https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=21526646447MMfXU&token=&lang=zh_CN)\n\n### 公众/服务号菜单\n\n#### 流量方操作流程\n\n登录微信公众号/服务号后台，选择左侧导航自定义菜单。选择对应菜单，菜单内容选择跳转小程序。\n\n未出现我们小程序的，需要关联我们的小程序。我们需要提供 AppID 给流量方关联后需要我们在后台确定绑定。\n\n\n若作者显示不是Nimo （被转载了），请访问Github原文进行讨论：https://github.com/nimoc/blog/issues/31\n\n\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"31\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","date":"2021-02-27T06:35:41.906Z","updated":"2021-02-27T06:35:41.906Z","path":"weapp_ad_jump.html","title":"","comments":1,"layout":"page","_id":"cklncoqe7000lf3u80gs00yfr","content":"<h2 id=\"微信小程序广告对接指导手册\"><a href=\"#微信小程序广告对接指导手册\" class=\"headerlink\" title=\"微信小程序广告对接指导手册\"></a>微信小程序广告对接指导手册</h2><p><a href=\"http://blog.nimoc.io/notice/index.html\"><img src=\"http://blog.nimoc.io/notice/index.svg\" alt=\"blog.nimoc.io\"></a></p>\n<p>友情链接: <a href=\"https://github.com/onface/fucking-weapp\">fucking-weapp</a></p>\n<h2 id=\"业务场景\"><a href=\"#业务场景\" class=\"headerlink\" title=\"业务场景\"></a>业务场景</h2><p>因公司业务需求，需要<strong>在微信小程序中插入广告</strong>。点击广告后跳转至广告客户的小程序中，或展示广告客户的信息。</p>\n<p>或者需要推广自己公司的微信小程序，需要支付其他公司广告费用，其他公司通过各种方式<strong>引导普通用户进入微信小程序</strong>。</p>\n<h2 id=\"支持的对接方式\"><a href=\"#支持的对接方式\" class=\"headerlink\" title=\"支持的对接方式\"></a>支持的对接方式</h2><h3 id=\"流量方\"><a href=\"#流量方\" class=\"headerlink\" title=\"流量方\"></a>流量方</h3><ol>\n<li>跳转其他小程序</li>\n<li>跳转APP</li>\n<li>打开网页</li>\n</ol>\n<h3 id=\"广告主\"><a href=\"#广告主\" class=\"headerlink\" title=\"广告主\"></a>广告主</h3><ol>\n<li>普通链接</li>\n<li>公众号推文</li>\n<li>APP直接打开小程序</li>\n<li>公众/服务号菜单</li>\n</ol>\n<blockquote>\n<p>流量方指的是在自己的小程序中加入客户的广告收取广告费用的公司</p>\n</blockquote>\n<blockquote>\n<p>广告主指的是支付广告费用给其他公司，其他公司通过各种方式引导普通用户进入自己的小程序</p>\n</blockquote>\n<h2 id=\"流量方-1\"><a href=\"#流量方-1\" class=\"headerlink\" title=\"流量方\"></a>流量方</h2><h3 id=\"跳转其他小程序\"><a href=\"#跳转其他小程序\" class=\"headerlink\" title=\"跳转其他小程序\"></a>跳转其他小程序</h3><h4 id=\"商务\"><a href=\"#商务\" class=\"headerlink\" title=\"商务\"></a>商务</h4><p>跳转其他小程序需要客户提供他的小程序 <code>app-id</code> 小程序路径和 <code>extra-data</code>, <code>extra-data</code> 一般作为统计不同流量方的标识。（推广ID）</p>\n<p>并在自己的小程序管理后台关联客户的 <code>app-id</code></p>\n<p>跳转有两种方式：</p>\n<ol>\n<li>进入自己的小程序后直接跳转到其他小程序</li>\n<li>点击按钮跳转到其他小程序</li>\n</ol>\n<blockquote>\n<p>目前可以打开自己的小程序直接跳转到客户的小程序，但是这个功能后续会被微信禁用。</p>\n</blockquote>\n<h4 id=\"技术实现\"><a href=\"#技术实现\" class=\"headerlink\" title=\"技术实现\"></a>技术实现</h4><h5 id=\"直接跳转\"><a href=\"#直接跳转\" class=\"headerlink\" title=\"直接跳转\"></a>直接跳转</h5><blockquote>\n<p>此接口即将废弃，请使用 <code>&lt;navigator&gt;</code> 组件来使用此功能</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.navigateToMiniProgram(&#123;</span><br><span class=\"line\">  appId: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  path: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  extraData: &#123;</span><br><span class=\"line\">    channel_id: <span class=\"string\">&#x27;客户提供的流量方标识&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">success</span>(<span class=\"params\">res</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打开成功</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/navigateToMiniProgram.html\">wx.navigateToMiniProgram</a></p>\n<h5 id=\"点击按钮跳转\"><a href=\"#点击按钮跳转\" class=\"headerlink\" title=\"点击按钮跳转\"></a>点击按钮跳转</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;navigator</span><br><span class=\"line\">    target=&quot;miniProgram&quot;</span><br><span class=\"line\">    open-type=&quot;navigate&quot;</span><br><span class=\"line\">    app-id=&quot;小程序APPID&quot;</span><br><span class=\"line\">    path=&quot;小程序路径&quot;</span><br><span class=\"line\">    extra-data=&quot;&quot;</span><br><span class=\"line\">    version=&quot;release&quot;</span><br><span class=\"line\">    &gt;跳转其他小程序<span class=\"tag\">&lt;/<span class=\"name\">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html\">navigator</a></p>\n<h3 id=\"跳转-APP\"><a href=\"#跳转-APP\" class=\"headerlink\" title=\"跳转 APP\"></a>跳转 APP</h3><h4 id=\"商务-1\"><a href=\"#商务-1\" class=\"headerlink\" title=\"商务\"></a>商务</h4><p>跳转 APP 必须通过用户主动点击按钮才能跳转。</p>\n<p>与客户的技术对接时请将这个链接发送给客户 <a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/launchApp.html\">https://developers.weixin.qq.com/miniprogram/dev/api/launchApp.html</a> 需要客户的技术人员接入微信 OpenSDK。</p>\n<h4 id=\"技术实现-1\"><a href=\"#技术实现-1\" class=\"headerlink\" title=\"技术实现\"></a>技术实现</h4><p>可尝试在 <code>app-parameter</code> 中传递用于统计的流量方标识</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">open-type</span>=<span class=\"string\">&quot;launchApp&quot;</span> <span class=\"attr\">app-parameter</span>=<span class=\"string\">&quot;wechat&quot;</span> <span class=\"attr\">binderror</span>=<span class=\"string\">&quot;launchAppError&quot;</span>&gt;</span>打开APP<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Page(&#123;</span><br><span class=\"line\">    launchAppError: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(e.detail.errMsg)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/launchApp.html\">launchApp</a></p>\n<h3 id=\"打开网页\"><a href=\"#打开网页\" class=\"headerlink\" title=\"打开网页\"></a>打开网页</h3><p>微信小程序官方提供了打开网页的功能，但是只能打开绑定此小程序的域名。</p>\n<p>每个小程序只能绑定20个业务域名，业务域名也就是客户的网址。绑定业务域名时需要在微信小程序管理后台下载验证文件，交给广告客户上传到客户的服务器。（客户在安全性和便利性上不一定会愿意），上传成功后即可在小程序中打开客户的网站。但客户的网站中不可以跳转到其他不在业务域名的网站。</p>\n<blockquote>\n<p>注意：业务域名一年只能修改50次。所以建议寻找稳定的广告客户。小客户经常更换的不建议合作。</p>\n</blockquote>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/web-view.html\">web-view</a></p>\n<h2 id=\"广告主-1\"><a href=\"#广告主-1\" class=\"headerlink\" title=\"广告主\"></a>广告主</h2><h3 id=\"普通链接\"><a href=\"#普通链接\" class=\"headerlink\" title=\"普通链接\"></a>普通链接</h3><p>找设计人员设计页面，比如：</p>\n<p><img src=\"http://effect.admpv.com/turntable/index.png\"></p>\n<p>然后由技术人员上传到服务器，给商务人员一个在线访问地址。商务将地址给客户。客户引导用户进入页面识别二维码进入微信小程序。</p>\n<h4 id=\"技术实现-2\"><a href=\"#技术实现-2\" class=\"headerlink\" title=\"技术实现\"></a>技术实现</h4><p>通过微信小程序后台 <strong>设置&gt;开发设置&gt;扫普通链接二维码打开小程序</strong> 可以生成二维码，二维码可以加上唯一标识，统计不同流量的访问情况。</p>\n<h3 id=\"公众号推文\"><a href=\"#公众号推文\" class=\"headerlink\" title=\"公众号推文\"></a>公众号推文</h3><h4 id=\"阅读原文\"><a href=\"#阅读原文\" class=\"headerlink\" title=\"阅读原文\"></a>阅读原文</h4><p>与普通链接一致，向技术索取链接地址</p>\n<h4 id=\"小程序\"><a href=\"#小程序\" class=\"headerlink\" title=\"小程序\"></a>小程序</h4><p>微信推文中可插入小程序卡片，点击卡片可直接打开微信小程序。技术需要向商务提供 AppID,路径(path) ，路径上应该带上统计id。</p>\n<h5 id=\"流量方操作流程\"><a href=\"#流量方操作流程\" class=\"headerlink\" title=\"流量方操作流程\"></a>流量方操作流程</h5><ol>\n<li>流量方时需要在微信小程序管理后台管理关联我们的小程序（我们需要提供小程序 AppID）</li>\n<li>关联后需要我们自己在微信小程序管理后台同意关联</li>\n<li>创建推文时选择小程序&gt;插入小程序卡片</li>\n</ol>\n<h3 id=\"APP直接打开小程序\"><a href=\"#APP直接打开小程序\" class=\"headerlink\" title=\"APP直接打开小程序\"></a>APP直接打开小程序</h3><p>移动应用拉起小程序是指用户可以通过接入该功能的第三方移动应用（APP）跳转至某一微信小程序的指定页面，完成服务后跳回至原移动应用（APP）。</p>\n<h5 id=\"流量方操作流程-1\"><a href=\"#流量方操作流程-1\" class=\"headerlink\" title=\"流量方操作流程\"></a>流量方操作流程</h5><p><a href=\"https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=21526646385rK1Bs&token=&lang=zh_CN\">移动应用拉起小程序功能</a></p>\n<p><strong>需要在微信开放平台创建应用后才能实现APP打开小程序 <a href=\"https://open.weixin.qq.com/cgi-bin/frame?t=home/app_tmpl&lang=zh_CN\">创建应用</a></strong></p>\n<p><a href=\"https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=21526646437Y6nEC&token=&lang=zh_CN\">Android开发示例</a></p>\n<p><a href=\"https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=21526646447MMfXU&token=&lang=zh_CN\">iOS开发示例</a></p>\n<h3 id=\"公众-服务号菜单\"><a href=\"#公众-服务号菜单\" class=\"headerlink\" title=\"公众/服务号菜单\"></a>公众/服务号菜单</h3><h4 id=\"流量方操作流程-2\"><a href=\"#流量方操作流程-2\" class=\"headerlink\" title=\"流量方操作流程\"></a>流量方操作流程</h4><p>登录微信公众号/服务号后台，选择左侧导航自定义菜单。选择对应菜单，菜单内容选择跳转小程序。</p>\n<p>未出现我们小程序的，需要关联我们的小程序。我们需要提供 AppID 给流量方关联后需要我们在后台确定绑定。</p>\n<p>若作者显示不是Nimo （被转载了），请访问Github原文进行讨论：<a href=\"https://github.com/nimoc/blog/issues/31\">https://github.com/nimoc/blog/issues/31</a></p>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"31\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"微信小程序广告对接指导手册\"><a href=\"#微信小程序广告对接指导手册\" class=\"headerlink\" title=\"微信小程序广告对接指导手册\"></a>微信小程序广告对接指导手册</h2><p><a href=\"http://blog.nimoc.io/notice/index.html\"><img src=\"http://blog.nimoc.io/notice/index.svg\" alt=\"blog.nimoc.io\"></a></p>\n<p>友情链接: <a href=\"https://github.com/onface/fucking-weapp\">fucking-weapp</a></p>\n<h2 id=\"业务场景\"><a href=\"#业务场景\" class=\"headerlink\" title=\"业务场景\"></a>业务场景</h2><p>因公司业务需求，需要<strong>在微信小程序中插入广告</strong>。点击广告后跳转至广告客户的小程序中，或展示广告客户的信息。</p>\n<p>或者需要推广自己公司的微信小程序，需要支付其他公司广告费用，其他公司通过各种方式<strong>引导普通用户进入微信小程序</strong>。</p>\n<h2 id=\"支持的对接方式\"><a href=\"#支持的对接方式\" class=\"headerlink\" title=\"支持的对接方式\"></a>支持的对接方式</h2><h3 id=\"流量方\"><a href=\"#流量方\" class=\"headerlink\" title=\"流量方\"></a>流量方</h3><ol>\n<li>跳转其他小程序</li>\n<li>跳转APP</li>\n<li>打开网页</li>\n</ol>\n<h3 id=\"广告主\"><a href=\"#广告主\" class=\"headerlink\" title=\"广告主\"></a>广告主</h3><ol>\n<li>普通链接</li>\n<li>公众号推文</li>\n<li>APP直接打开小程序</li>\n<li>公众/服务号菜单</li>\n</ol>\n<blockquote>\n<p>流量方指的是在自己的小程序中加入客户的广告收取广告费用的公司</p>\n</blockquote>\n<blockquote>\n<p>广告主指的是支付广告费用给其他公司，其他公司通过各种方式引导普通用户进入自己的小程序</p>\n</blockquote>\n<h2 id=\"流量方-1\"><a href=\"#流量方-1\" class=\"headerlink\" title=\"流量方\"></a>流量方</h2><h3 id=\"跳转其他小程序\"><a href=\"#跳转其他小程序\" class=\"headerlink\" title=\"跳转其他小程序\"></a>跳转其他小程序</h3><h4 id=\"商务\"><a href=\"#商务\" class=\"headerlink\" title=\"商务\"></a>商务</h4><p>跳转其他小程序需要客户提供他的小程序 <code>app-id</code> 小程序路径和 <code>extra-data</code>, <code>extra-data</code> 一般作为统计不同流量方的标识。（推广ID）</p>\n<p>并在自己的小程序管理后台关联客户的 <code>app-id</code></p>\n<p>跳转有两种方式：</p>\n<ol>\n<li>进入自己的小程序后直接跳转到其他小程序</li>\n<li>点击按钮跳转到其他小程序</li>\n</ol>\n<blockquote>\n<p>目前可以打开自己的小程序直接跳转到客户的小程序，但是这个功能后续会被微信禁用。</p>\n</blockquote>\n<h4 id=\"技术实现\"><a href=\"#技术实现\" class=\"headerlink\" title=\"技术实现\"></a>技术实现</h4><h5 id=\"直接跳转\"><a href=\"#直接跳转\" class=\"headerlink\" title=\"直接跳转\"></a>直接跳转</h5><blockquote>\n<p>此接口即将废弃，请使用 <code>&lt;navigator&gt;</code> 组件来使用此功能</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.navigateToMiniProgram(&#123;</span><br><span class=\"line\">  appId: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  path: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  extraData: &#123;</span><br><span class=\"line\">    channel_id: <span class=\"string\">&#x27;客户提供的流量方标识&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">success</span>(<span class=\"params\">res</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打开成功</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/navigateToMiniProgram.html\">wx.navigateToMiniProgram</a></p>\n<h5 id=\"点击按钮跳转\"><a href=\"#点击按钮跳转\" class=\"headerlink\" title=\"点击按钮跳转\"></a>点击按钮跳转</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;navigator</span><br><span class=\"line\">    target=&quot;miniProgram&quot;</span><br><span class=\"line\">    open-type=&quot;navigate&quot;</span><br><span class=\"line\">    app-id=&quot;小程序APPID&quot;</span><br><span class=\"line\">    path=&quot;小程序路径&quot;</span><br><span class=\"line\">    extra-data=&quot;&quot;</span><br><span class=\"line\">    version=&quot;release&quot;</span><br><span class=\"line\">    &gt;跳转其他小程序<span class=\"tag\">&lt;/<span class=\"name\">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html\">navigator</a></p>\n<h3 id=\"跳转-APP\"><a href=\"#跳转-APP\" class=\"headerlink\" title=\"跳转 APP\"></a>跳转 APP</h3><h4 id=\"商务-1\"><a href=\"#商务-1\" class=\"headerlink\" title=\"商务\"></a>商务</h4><p>跳转 APP 必须通过用户主动点击按钮才能跳转。</p>\n<p>与客户的技术对接时请将这个链接发送给客户 <a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/launchApp.html\">https://developers.weixin.qq.com/miniprogram/dev/api/launchApp.html</a> 需要客户的技术人员接入微信 OpenSDK。</p>\n<h4 id=\"技术实现-1\"><a href=\"#技术实现-1\" class=\"headerlink\" title=\"技术实现\"></a>技术实现</h4><p>可尝试在 <code>app-parameter</code> 中传递用于统计的流量方标识</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">open-type</span>=<span class=\"string\">&quot;launchApp&quot;</span> <span class=\"attr\">app-parameter</span>=<span class=\"string\">&quot;wechat&quot;</span> <span class=\"attr\">binderror</span>=<span class=\"string\">&quot;launchAppError&quot;</span>&gt;</span>打开APP<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Page(&#123;</span><br><span class=\"line\">    launchAppError: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(e.detail.errMsg)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/launchApp.html\">launchApp</a></p>\n<h3 id=\"打开网页\"><a href=\"#打开网页\" class=\"headerlink\" title=\"打开网页\"></a>打开网页</h3><p>微信小程序官方提供了打开网页的功能，但是只能打开绑定此小程序的域名。</p>\n<p>每个小程序只能绑定20个业务域名，业务域名也就是客户的网址。绑定业务域名时需要在微信小程序管理后台下载验证文件，交给广告客户上传到客户的服务器。（客户在安全性和便利性上不一定会愿意），上传成功后即可在小程序中打开客户的网站。但客户的网站中不可以跳转到其他不在业务域名的网站。</p>\n<blockquote>\n<p>注意：业务域名一年只能修改50次。所以建议寻找稳定的广告客户。小客户经常更换的不建议合作。</p>\n</blockquote>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/web-view.html\">web-view</a></p>\n<h2 id=\"广告主-1\"><a href=\"#广告主-1\" class=\"headerlink\" title=\"广告主\"></a>广告主</h2><h3 id=\"普通链接\"><a href=\"#普通链接\" class=\"headerlink\" title=\"普通链接\"></a>普通链接</h3><p>找设计人员设计页面，比如：</p>\n<p><img src=\"http://effect.admpv.com/turntable/index.png\"></p>\n<p>然后由技术人员上传到服务器，给商务人员一个在线访问地址。商务将地址给客户。客户引导用户进入页面识别二维码进入微信小程序。</p>\n<h4 id=\"技术实现-2\"><a href=\"#技术实现-2\" class=\"headerlink\" title=\"技术实现\"></a>技术实现</h4><p>通过微信小程序后台 <strong>设置&gt;开发设置&gt;扫普通链接二维码打开小程序</strong> 可以生成二维码，二维码可以加上唯一标识，统计不同流量的访问情况。</p>\n<h3 id=\"公众号推文\"><a href=\"#公众号推文\" class=\"headerlink\" title=\"公众号推文\"></a>公众号推文</h3><h4 id=\"阅读原文\"><a href=\"#阅读原文\" class=\"headerlink\" title=\"阅读原文\"></a>阅读原文</h4><p>与普通链接一致，向技术索取链接地址</p>\n<h4 id=\"小程序\"><a href=\"#小程序\" class=\"headerlink\" title=\"小程序\"></a>小程序</h4><p>微信推文中可插入小程序卡片，点击卡片可直接打开微信小程序。技术需要向商务提供 AppID,路径(path) ，路径上应该带上统计id。</p>\n<h5 id=\"流量方操作流程\"><a href=\"#流量方操作流程\" class=\"headerlink\" title=\"流量方操作流程\"></a>流量方操作流程</h5><ol>\n<li>流量方时需要在微信小程序管理后台管理关联我们的小程序（我们需要提供小程序 AppID）</li>\n<li>关联后需要我们自己在微信小程序管理后台同意关联</li>\n<li>创建推文时选择小程序&gt;插入小程序卡片</li>\n</ol>\n<h3 id=\"APP直接打开小程序\"><a href=\"#APP直接打开小程序\" class=\"headerlink\" title=\"APP直接打开小程序\"></a>APP直接打开小程序</h3><p>移动应用拉起小程序是指用户可以通过接入该功能的第三方移动应用（APP）跳转至某一微信小程序的指定页面，完成服务后跳回至原移动应用（APP）。</p>\n<h5 id=\"流量方操作流程-1\"><a href=\"#流量方操作流程-1\" class=\"headerlink\" title=\"流量方操作流程\"></a>流量方操作流程</h5><p><a href=\"https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=21526646385rK1Bs&token=&lang=zh_CN\">移动应用拉起小程序功能</a></p>\n<p><strong>需要在微信开放平台创建应用后才能实现APP打开小程序 <a href=\"https://open.weixin.qq.com/cgi-bin/frame?t=home/app_tmpl&lang=zh_CN\">创建应用</a></strong></p>\n<p><a href=\"https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=21526646437Y6nEC&token=&lang=zh_CN\">Android开发示例</a></p>\n<p><a href=\"https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=21526646447MMfXU&token=&lang=zh_CN\">iOS开发示例</a></p>\n<h3 id=\"公众-服务号菜单\"><a href=\"#公众-服务号菜单\" class=\"headerlink\" title=\"公众/服务号菜单\"></a>公众/服务号菜单</h3><h4 id=\"流量方操作流程-2\"><a href=\"#流量方操作流程-2\" class=\"headerlink\" title=\"流量方操作流程\"></a>流量方操作流程</h4><p>登录微信公众号/服务号后台，选择左侧导航自定义菜单。选择对应菜单，菜单内容选择跳转小程序。</p>\n<p>未出现我们小程序的，需要关联我们的小程序。我们需要提供 AppID 给流量方关联后需要我们在后台确定绑定。</p>\n<p>若作者显示不是Nimo （被转载了），请访问Github原文进行讨论：<a href=\"https://github.com/nimoc/blog/issues/31\">https://github.com/nimoc/blog/issues/31</a></p>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"nimoc/blog\"\n        issue-number=\"31\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>"},{"_content":"<!-- !!!!!!!!!! \nThis file is create by compile, do not edit this file \n!!! -->\n# 将 TypeScript 中 松散的类型当做药品\n\n\n[![blog.nimoc.io](http://blog.nimoc.io/notice/index.svg)](http://blog.nimoc.io/notice/index.html)\n\n> 本文代码有大量的 test 和  expect 函数,目的是替代注释,用 expect 说明变量和函数的返回值\n\n\n## 动态语言不需要泛型\n\n基于显而易见的原因如果你使用的是动态语言没有类型系统意味着一切都是泛型.\n\n我通过列举一个 `filterZeroValue` 的例子来说明情况:\n\n> 为了把重点放在类型系统上所以使用 `filterZeroValue` 这个简单的函数,实际情况中不大可能封装 `filterZeroValue` 而是直接写 `list.filter`.  \n\n比如在 JavaScript 中:\n\n```ts\n/*\n * 排除数组中的空值'\n * @param list\n * @return notZeroValueList\n * */\nfunction jsFilterZeroValue(list) {\n    return list.filter(function (item) {\n        switch (typeof item) {\n            case \"string\":\n                return item != \"\"\n            break\n            case \"number\":\n                return item != 0\n                break\n            default:\n            throw new Error(\"filterZeroValue: list[] item must be string or number\" )\n        }\n    })\n}\n\ntest(\"jsFilterZeroValue\", function () {\n    expect(jsFilterZeroValue([\"a\",\"\",\"c\"])).toStrictEqual([\"a\",\"c\"])\n    expect(jsFilterZeroValue([1,0,3])).toStrictEqual([1,3])\n})\n\n\n```\n\n\n你甚至可以3行代码搞定\n\n```js\nfunction jsFilterZeroValue() {\n    return list.filter((item)=> {return !!item})\n}\n```\n\n\n不这么做是因为需要在参数是 string number 之外的的类型时进行错误提示,和减少隐式类型转换.\n\n\n## TypeScript 实现泛型\n\n> 注意不要只看下面的代码后就结束,看完文章会发现下面的代码是不好的\n\n```ts\n\nfunction tsFilterZeroValue<T>(list: T[]): T[] {\n    return list.filter(function (item) {\n        switch (typeof item) {\n            case \"string\":\n                return item != \"\"\n                break\n            case \"number\":\n                return item != 0\n                break\n            default:\n                throw new Error(\"filterZeroValue: list[] item must be string or number\")\n        }\n    })\n}\n\n\ntest(\"tsFilterZeroValue\", function () {\n    expect(tsFilterZeroValue([\"a\",\"\",\"c\"])).toStrictEqual([\"a\",\"c\"])\n    expect(tsFilterZeroValue([1,0,3])).toStrictEqual([1,3])\n})\n\n```\n\n虽然通过 `<T>(list: T[]): T[]` 约束了必须是个数组,并且输出的类型和输入的类型一致.但是还是不能明确只允许 `number[]` `string[]` .\n\n\n### 联合类型\n\n上面的列子可以用联合类型来解决,但是联合类型也不够好哦.\n\n> 联合类型和泛型其实是一类方法,在现在的这个场景的目的就是偷懒.\n\n```ts\n\nfunction unionTypeFilterZeroValue(list: string[] | number[]) :string[] | number[] {\n    let output = []\n    for (let i= 0;i<list.length;i++ ) {\n        const item = list[i]\n        switch (typeof item) {\n            case \"string\":\n                if (item != \"\") {\n                   output.push(item)\n                }\n                break\n            case \"number\":\n                if (item != 0) {\n                    output.push(item)\n                }\n                break\n            default:\n                throw new Error(\"filterZeroValue: list[] item must be string or number\")\n        }\n    }\n    return output\n}\n\n\ntest(\"unionTypeFilterZeroValue\", function () {\n    expect(unionTypeFilterZeroValue([\"a\",\"\",\"c\"])).toStrictEqual([\"a\",\"c\"])\n    expect(unionTypeFilterZeroValue([1,0,3])).toStrictEqual([1,3])\n})\n\n\n```\n\n\n### TypeScript filterZeroValue 正确的实现\n\n上面的 `tsFilterZeroValue` 和 `unionTypeFilterZeroValue` 都不够好,\n反而 TypeScript 代码写的很复杂.虽然可能是我个人对 TypeScript 了解程度不够,\n要注意团队中不是每个人都是 TypeScript 高手.\n\n实际上在TypeScript中使用泛型绝大部分情况下是编码思维没有转换为静态类型思维.\n\n请看下面的代码 \n\n```ts\n\nfunction stringListFilterZeroValue(list: string[]) :string[] {\n    return list.filter(function (v) {\n        return v != \"\"\n    })\n}\n\nfunction numberListFilterZeroValue(list: number[]) :number[] {\n    return list.filter(function (v) {\n        return v != 0\n    })\n}\n\ntest(\"stringAndNumberlistFilterZeroValue\", function () {\n    expect(stringListFilterZeroValue([\"nimo\",\"\",\"nico\"])).toStrictEqual([\"nimo\",\"nico\"])\n    expect(numberListFilterZeroValue([1,0,3])).toStrictEqual([1,3])\n})\n\n```\n\n\n> 不要带入动态类型快猛糙的思维去写 TypeScript\n\n该多写点\"重复\"的代码,这样反而实现会更简单,更易于阅读.\n\n最重要的是有些情况下使用了泛型或联合类型加上编码时疏忽了会造成想不到的bug:\n \n```ts\n\nfunction updateSQL(id: string, names: string[]) :{sql:string, values:any[]} {\n    const updateValue = stringListFilterZeroValue(names)\n    // 如果 updateSQL 的函数参数 names 改成了  ages int[]\n    // stringListFilterZeroValue 将会在编译期报错\n    // 如果使用的是 unionTypeFilterZeroValue 则不会\n\n    // names 修改后 要让此处编译期报错的目的是要\n    // 提醒自己,在没有修改前的代码逻辑中期望 updateValue 是一个 string[]\n    // 如果使用 unionTypeFilterZeroValue 则没有了这一层提醒\n    // 而 JSON.stringify(string[]) 和 JSON.stringify(number[]) 的结果是不一样的\n    // 而这个不一样类型系统是无法检查到的,因为返回值 的 values 属性因为 sql 的场景导致就是 any[]\n    return {\n        sql: `UPDATE tableName SET names = ? WHERE id = ?`,\n        values: [JSON.stringify(updateValue), id],\n    }\n}\n\n\n\ntest(\"updateSQL\", function (){\n    expect(updateSQL(\"1\", [\"nimo\", \"nico\"])).toStrictEqual(\n        {\n            sql: \"UPDATE tableName SET names = ? WHERE id = ?\",\n            values: [\n                '[\"nimo\",\"nico\"]',\n                \"1\",\n            ],\n        }\n    )\n})\n\n\n```\n\n\n上面的例子不够完美,本文想表达的主要的观点是:\n\n**控制参数数量和类型不可变**\n\n在代码中明确函数参数固定且每个参数只能有一个类型能让代码更易于维护\n\n**尽可能多的在编译期做类型检查发现问题**\n\n即使单元测试和细心编码能检查出这种小概率的错误,但是编码要做悲观设计.不能总期望写代码的人状态在线\n\n**将松散的类型当做药品使用**\n\n泛型,联合类型这种应当当做药品去使用,不到万不得已不要使用.比如 Go 语言中就不支持 TypeScript 这种泛型,也照样构建了那么稳定的项目,\n只要不是觉得业务代码中出现大量重复代码太麻烦,就要避免使用松散的类型.非业务逻辑的第三方封装代码,就必须让参数类型只能有一个. \n除非你实现是 JSON.parse 这种必须用 any 的库.\n \n \n> 有些人对于效率和质量的认知可能与作者有偏差,作者是绝对侧重质量,在要效率非常低下的情况下才通过深思熟虑的才写一些\"偷懒的代码\".\n> 读者可以有自己的判断,但请注意: 如果因为类型不严谨导致项目中出现一个 bug,如果能后悔你会愿意花十倍的时间去弥补写出更多类型严谨的代码.   \n\n\n如果你觉得本文观点不错,请将本文推荐给你的朋友或同事\n\n原文地址 https://github.com/nimoc/blog/issues/34 (原文保持持续更新和更多的评论) \n\n<script src=\"https://utteranc.es/client.js\"\nrepo=\"nimoc/blog\"\nissue-number=\"34\"\ntheme=\"github-light\"\ncrossorigin=\"anonymous\"\nasync>\n</script>\n\n```ts;\n```","source":"ts_go_generics.md","raw":"<!-- !!!!!!!!!! \nThis file is create by compile, do not edit this file \n!!! -->\n# 将 TypeScript 中 松散的类型当做药品\n\n\n[![blog.nimoc.io](http://blog.nimoc.io/notice/index.svg)](http://blog.nimoc.io/notice/index.html)\n\n> 本文代码有大量的 test 和  expect 函数,目的是替代注释,用 expect 说明变量和函数的返回值\n\n\n## 动态语言不需要泛型\n\n基于显而易见的原因如果你使用的是动态语言没有类型系统意味着一切都是泛型.\n\n我通过列举一个 `filterZeroValue` 的例子来说明情况:\n\n> 为了把重点放在类型系统上所以使用 `filterZeroValue` 这个简单的函数,实际情况中不大可能封装 `filterZeroValue` 而是直接写 `list.filter`.  \n\n比如在 JavaScript 中:\n\n```ts\n/*\n * 排除数组中的空值'\n * @param list\n * @return notZeroValueList\n * */\nfunction jsFilterZeroValue(list) {\n    return list.filter(function (item) {\n        switch (typeof item) {\n            case \"string\":\n                return item != \"\"\n            break\n            case \"number\":\n                return item != 0\n                break\n            default:\n            throw new Error(\"filterZeroValue: list[] item must be string or number\" )\n        }\n    })\n}\n\ntest(\"jsFilterZeroValue\", function () {\n    expect(jsFilterZeroValue([\"a\",\"\",\"c\"])).toStrictEqual([\"a\",\"c\"])\n    expect(jsFilterZeroValue([1,0,3])).toStrictEqual([1,3])\n})\n\n\n```\n\n\n你甚至可以3行代码搞定\n\n```js\nfunction jsFilterZeroValue() {\n    return list.filter((item)=> {return !!item})\n}\n```\n\n\n不这么做是因为需要在参数是 string number 之外的的类型时进行错误提示,和减少隐式类型转换.\n\n\n## TypeScript 实现泛型\n\n> 注意不要只看下面的代码后就结束,看完文章会发现下面的代码是不好的\n\n```ts\n\nfunction tsFilterZeroValue<T>(list: T[]): T[] {\n    return list.filter(function (item) {\n        switch (typeof item) {\n            case \"string\":\n                return item != \"\"\n                break\n            case \"number\":\n                return item != 0\n                break\n            default:\n                throw new Error(\"filterZeroValue: list[] item must be string or number\")\n        }\n    })\n}\n\n\ntest(\"tsFilterZeroValue\", function () {\n    expect(tsFilterZeroValue([\"a\",\"\",\"c\"])).toStrictEqual([\"a\",\"c\"])\n    expect(tsFilterZeroValue([1,0,3])).toStrictEqual([1,3])\n})\n\n```\n\n虽然通过 `<T>(list: T[]): T[]` 约束了必须是个数组,并且输出的类型和输入的类型一致.但是还是不能明确只允许 `number[]` `string[]` .\n\n\n### 联合类型\n\n上面的列子可以用联合类型来解决,但是联合类型也不够好哦.\n\n> 联合类型和泛型其实是一类方法,在现在的这个场景的目的就是偷懒.\n\n```ts\n\nfunction unionTypeFilterZeroValue(list: string[] | number[]) :string[] | number[] {\n    let output = []\n    for (let i= 0;i<list.length;i++ ) {\n        const item = list[i]\n        switch (typeof item) {\n            case \"string\":\n                if (item != \"\") {\n                   output.push(item)\n                }\n                break\n            case \"number\":\n                if (item != 0) {\n                    output.push(item)\n                }\n                break\n            default:\n                throw new Error(\"filterZeroValue: list[] item must be string or number\")\n        }\n    }\n    return output\n}\n\n\ntest(\"unionTypeFilterZeroValue\", function () {\n    expect(unionTypeFilterZeroValue([\"a\",\"\",\"c\"])).toStrictEqual([\"a\",\"c\"])\n    expect(unionTypeFilterZeroValue([1,0,3])).toStrictEqual([1,3])\n})\n\n\n```\n\n\n### TypeScript filterZeroValue 正确的实现\n\n上面的 `tsFilterZeroValue` 和 `unionTypeFilterZeroValue` 都不够好,\n反而 TypeScript 代码写的很复杂.虽然可能是我个人对 TypeScript 了解程度不够,\n要注意团队中不是每个人都是 TypeScript 高手.\n\n实际上在TypeScript中使用泛型绝大部分情况下是编码思维没有转换为静态类型思维.\n\n请看下面的代码 \n\n```ts\n\nfunction stringListFilterZeroValue(list: string[]) :string[] {\n    return list.filter(function (v) {\n        return v != \"\"\n    })\n}\n\nfunction numberListFilterZeroValue(list: number[]) :number[] {\n    return list.filter(function (v) {\n        return v != 0\n    })\n}\n\ntest(\"stringAndNumberlistFilterZeroValue\", function () {\n    expect(stringListFilterZeroValue([\"nimo\",\"\",\"nico\"])).toStrictEqual([\"nimo\",\"nico\"])\n    expect(numberListFilterZeroValue([1,0,3])).toStrictEqual([1,3])\n})\n\n```\n\n\n> 不要带入动态类型快猛糙的思维去写 TypeScript\n\n该多写点\"重复\"的代码,这样反而实现会更简单,更易于阅读.\n\n最重要的是有些情况下使用了泛型或联合类型加上编码时疏忽了会造成想不到的bug:\n \n```ts\n\nfunction updateSQL(id: string, names: string[]) :{sql:string, values:any[]} {\n    const updateValue = stringListFilterZeroValue(names)\n    // 如果 updateSQL 的函数参数 names 改成了  ages int[]\n    // stringListFilterZeroValue 将会在编译期报错\n    // 如果使用的是 unionTypeFilterZeroValue 则不会\n\n    // names 修改后 要让此处编译期报错的目的是要\n    // 提醒自己,在没有修改前的代码逻辑中期望 updateValue 是一个 string[]\n    // 如果使用 unionTypeFilterZeroValue 则没有了这一层提醒\n    // 而 JSON.stringify(string[]) 和 JSON.stringify(number[]) 的结果是不一样的\n    // 而这个不一样类型系统是无法检查到的,因为返回值 的 values 属性因为 sql 的场景导致就是 any[]\n    return {\n        sql: `UPDATE tableName SET names = ? WHERE id = ?`,\n        values: [JSON.stringify(updateValue), id],\n    }\n}\n\n\n\ntest(\"updateSQL\", function (){\n    expect(updateSQL(\"1\", [\"nimo\", \"nico\"])).toStrictEqual(\n        {\n            sql: \"UPDATE tableName SET names = ? WHERE id = ?\",\n            values: [\n                '[\"nimo\",\"nico\"]',\n                \"1\",\n            ],\n        }\n    )\n})\n\n\n```\n\n\n上面的例子不够完美,本文想表达的主要的观点是:\n\n**控制参数数量和类型不可变**\n\n在代码中明确函数参数固定且每个参数只能有一个类型能让代码更易于维护\n\n**尽可能多的在编译期做类型检查发现问题**\n\n即使单元测试和细心编码能检查出这种小概率的错误,但是编码要做悲观设计.不能总期望写代码的人状态在线\n\n**将松散的类型当做药品使用**\n\n泛型,联合类型这种应当当做药品去使用,不到万不得已不要使用.比如 Go 语言中就不支持 TypeScript 这种泛型,也照样构建了那么稳定的项目,\n只要不是觉得业务代码中出现大量重复代码太麻烦,就要避免使用松散的类型.非业务逻辑的第三方封装代码,就必须让参数类型只能有一个. \n除非你实现是 JSON.parse 这种必须用 any 的库.\n \n \n> 有些人对于效率和质量的认知可能与作者有偏差,作者是绝对侧重质量,在要效率非常低下的情况下才通过深思熟虑的才写一些\"偷懒的代码\".\n> 读者可以有自己的判断,但请注意: 如果因为类型不严谨导致项目中出现一个 bug,如果能后悔你会愿意花十倍的时间去弥补写出更多类型严谨的代码.   \n\n\n如果你觉得本文观点不错,请将本文推荐给你的朋友或同事\n\n原文地址 https://github.com/nimoc/blog/issues/34 (原文保持持续更新和更多的评论) \n\n<script src=\"https://utteranc.es/client.js\"\nrepo=\"nimoc/blog\"\nissue-number=\"34\"\ntheme=\"github-light\"\ncrossorigin=\"anonymous\"\nasync>\n</script>\n\n```ts;\n```","date":"2021-02-27T06:35:41.899Z","updated":"2021-02-27T06:35:41.899Z","path":"ts_go_generics.html","title":"","comments":1,"layout":"page","_id":"cklncoqe9000mf3u86oywawzw","content":"<!-- !!!!!!!!!! \nThis file is create by compile, do not edit this file \n!!! -->\n<h1 id=\"将-TypeScript-中-松散的类型当做药品\"><a href=\"#将-TypeScript-中-松散的类型当做药品\" class=\"headerlink\" title=\"将 TypeScript 中 松散的类型当做药品\"></a>将 TypeScript 中 松散的类型当做药品</h1><p><a href=\"http://blog.nimoc.io/notice/index.html\"><img src=\"http://blog.nimoc.io/notice/index.svg\" alt=\"blog.nimoc.io\"></a></p>\n<blockquote>\n<p>本文代码有大量的 test 和  expect 函数,目的是替代注释,用 expect 说明变量和函数的返回值</p>\n</blockquote>\n<h2 id=\"动态语言不需要泛型\"><a href=\"#动态语言不需要泛型\" class=\"headerlink\" title=\"动态语言不需要泛型\"></a>动态语言不需要泛型</h2><p>基于显而易见的原因如果你使用的是动态语言没有类型系统意味着一切都是泛型.</p>\n<p>我通过列举一个 <code>filterZeroValue</code> 的例子来说明情况:</p>\n<blockquote>\n<p>为了把重点放在类型系统上所以使用 <code>filterZeroValue</code> 这个简单的函数,实际情况中不大可能封装 <code>filterZeroValue</code> 而是直接写 <code>list.filter</code>.  </p>\n</blockquote>\n<p>比如在 JavaScript 中:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 排除数组中的空值&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list</span></span><br><span class=\"line\"><span class=\"comment\"> * @return notZeroValueList</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsFilterZeroValue</span>(<span class=\"params\">list</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"keyword\">typeof</span> item) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;string&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> item != <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;number&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> item != <span class=\"number\">0</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;filterZeroValue: list[] item must be string or number&quot;</span> )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&quot;jsFilterZeroValue&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    expect(jsFilterZeroValue([<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"string\">&quot;c&quot;</span>])).toStrictEqual([<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;c&quot;</span>])</span><br><span class=\"line\">    expect(jsFilterZeroValue([<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">3</span>])).toStrictEqual([<span class=\"number\">1</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>你甚至可以3行代码搞定</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsFilterZeroValue</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list.filter(<span class=\"function\">(<span class=\"params\">item</span>)=&gt;</span> &#123;<span class=\"keyword\">return</span> !!item&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>不这么做是因为需要在参数是 string number 之外的的类型时进行错误提示,和减少隐式类型转换.</p>\n<h2 id=\"TypeScript-实现泛型\"><a href=\"#TypeScript-实现泛型\" class=\"headerlink\" title=\"TypeScript 实现泛型\"></a>TypeScript 实现泛型</h2><blockquote>\n<p>注意不要只看下面的代码后就结束,看完文章会发现下面的代码是不好的</p>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tsFilterZeroValue</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">list: T[]</span>): <span class=\"title\">T</span>[] </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"keyword\">typeof</span> item) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;string&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> item != <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;number&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> item != <span class=\"number\">0</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;filterZeroValue: list[] item must be string or number&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&quot;tsFilterZeroValue&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    expect(tsFilterZeroValue([<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"string\">&quot;c&quot;</span>])).toStrictEqual([<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;c&quot;</span>])</span><br><span class=\"line\">    expect(tsFilterZeroValue([<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">3</span>])).toStrictEqual([<span class=\"number\">1</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>虽然通过 <code>&lt;T&gt;(list: T[]): T[]</code> 约束了必须是个数组,并且输出的类型和输入的类型一致.但是还是不能明确只允许 <code>number[]</code> <code>string[]</code> .</p>\n<h3 id=\"联合类型\"><a href=\"#联合类型\" class=\"headerlink\" title=\"联合类型\"></a>联合类型</h3><p>上面的列子可以用联合类型来解决,但是联合类型也不够好哦.</p>\n<blockquote>\n<p>联合类型和泛型其实是一类方法,在现在的这个场景的目的就是偷懒.</p>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unionTypeFilterZeroValue</span>(<span class=\"params\">list: <span class=\"built_in\">string</span>[] | <span class=\"built_in\">number</span>[]</span>) :<span class=\"title\">string</span>[] | <span class=\"title\">number</span>[] </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> output = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i= <span class=\"number\">0</span>;i&lt;list.length;i++ ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> item = list[i]</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"keyword\">typeof</span> item) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;string&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (item != <span class=\"string\">&quot;&quot;</span>) &#123;</span><br><span class=\"line\">                   output.push(item)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;number&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (item != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    output.push(item)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;filterZeroValue: list[] item must be string or number&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> output</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&quot;unionTypeFilterZeroValue&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    expect(unionTypeFilterZeroValue([<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"string\">&quot;c&quot;</span>])).toStrictEqual([<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;c&quot;</span>])</span><br><span class=\"line\">    expect(unionTypeFilterZeroValue([<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">3</span>])).toStrictEqual([<span class=\"number\">1</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"TypeScript-filterZeroValue-正确的实现\"><a href=\"#TypeScript-filterZeroValue-正确的实现\" class=\"headerlink\" title=\"TypeScript filterZeroValue 正确的实现\"></a>TypeScript filterZeroValue 正确的实现</h3><p>上面的 <code>tsFilterZeroValue</code> 和 <code>unionTypeFilterZeroValue</code> 都不够好,<br>反而 TypeScript 代码写的很复杂.虽然可能是我个人对 TypeScript 了解程度不够,<br>要注意团队中不是每个人都是 TypeScript 高手.</p>\n<p>实际上在TypeScript中使用泛型绝大部分情况下是编码思维没有转换为静态类型思维.</p>\n<p>请看下面的代码 </p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stringListFilterZeroValue</span>(<span class=\"params\">list: <span class=\"built_in\">string</span>[]</span>) :<span class=\"title\">string</span>[] </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v != <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">numberListFilterZeroValue</span>(<span class=\"params\">list: <span class=\"built_in\">number</span>[]</span>) :<span class=\"title\">number</span>[] </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v != <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&quot;stringAndNumberlistFilterZeroValue&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    expect(stringListFilterZeroValue([<span class=\"string\">&quot;nimo&quot;</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"string\">&quot;nico&quot;</span>])).toStrictEqual([<span class=\"string\">&quot;nimo&quot;</span>,<span class=\"string\">&quot;nico&quot;</span>])</span><br><span class=\"line\">    expect(numberListFilterZeroValue([<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">3</span>])).toStrictEqual([<span class=\"number\">1</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>不要带入动态类型快猛糙的思维去写 TypeScript</p>\n</blockquote>\n<p>该多写点”重复”的代码,这样反而实现会更简单,更易于阅读.</p>\n<p>最重要的是有些情况下使用了泛型或联合类型加上编码时疏忽了会造成想不到的bug:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateSQL</span>(<span class=\"params\">id: <span class=\"built_in\">string</span>, names: <span class=\"built_in\">string</span>[]</span>) :</span>&#123;sql:<span class=\"built_in\">string</span>, <span class=\"attr\">values</span>:<span class=\"built_in\">any</span>[]&#125; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> updateValue = stringListFilterZeroValue(names)</span><br><span class=\"line\">    <span class=\"comment\">// 如果 updateSQL 的函数参数 names 改成了  ages int[]</span></span><br><span class=\"line\">    <span class=\"comment\">// stringListFilterZeroValue 将会在编译期报错</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果使用的是 unionTypeFilterZeroValue 则不会</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// names 修改后 要让此处编译期报错的目的是要</span></span><br><span class=\"line\">    <span class=\"comment\">// 提醒自己,在没有修改前的代码逻辑中期望 updateValue 是一个 string[]</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果使用 unionTypeFilterZeroValue 则没有了这一层提醒</span></span><br><span class=\"line\">    <span class=\"comment\">// 而 JSON.stringify(string[]) 和 JSON.stringify(number[]) 的结果是不一样的</span></span><br><span class=\"line\">    <span class=\"comment\">// 而这个不一样类型系统是无法检查到的,因为返回值 的 values 属性因为 sql 的场景导致就是 any[]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        sql: <span class=\"string\">`UPDATE tableName SET names = ? WHERE id = ?`</span>,</span><br><span class=\"line\">        values: [<span class=\"built_in\">JSON</span>.stringify(updateValue), id],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&quot;updateSQL&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    expect(updateSQL(<span class=\"string\">&quot;1&quot;</span>, [<span class=\"string\">&quot;nimo&quot;</span>, <span class=\"string\">&quot;nico&quot;</span>])).toStrictEqual(</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            sql: <span class=\"string\">&quot;UPDATE tableName SET names = ? WHERE id = ?&quot;</span>,</span><br><span class=\"line\">            values: [</span><br><span class=\"line\">                <span class=\"string\">&#x27;[&quot;nimo&quot;,&quot;nico&quot;]&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>上面的例子不够完美,本文想表达的主要的观点是:</p>\n<p><strong>控制参数数量和类型不可变</strong></p>\n<p>在代码中明确函数参数固定且每个参数只能有一个类型能让代码更易于维护</p>\n<p><strong>尽可能多的在编译期做类型检查发现问题</strong></p>\n<p>即使单元测试和细心编码能检查出这种小概率的错误,但是编码要做悲观设计.不能总期望写代码的人状态在线</p>\n<p><strong>将松散的类型当做药品使用</strong></p>\n<p>泛型,联合类型这种应当当做药品去使用,不到万不得已不要使用.比如 Go 语言中就不支持 TypeScript 这种泛型,也照样构建了那么稳定的项目,<br>只要不是觉得业务代码中出现大量重复代码太麻烦,就要避免使用松散的类型.非业务逻辑的第三方封装代码,就必须让参数类型只能有一个.<br>除非你实现是 JSON.parse 这种必须用 any 的库.</p>\n<blockquote>\n<p>有些人对于效率和质量的认知可能与作者有偏差,作者是绝对侧重质量,在要效率非常低下的情况下才通过深思熟虑的才写一些”偷懒的代码”.<br>读者可以有自己的判断,但请注意: 如果因为类型不严谨导致项目中出现一个 bug,如果能后悔你会愿意花十倍的时间去弥补写出更多类型严谨的代码.   </p>\n</blockquote>\n<p>如果你觉得本文观点不错,请将本文推荐给你的朋友或同事</p>\n<p>原文地址 <a href=\"https://github.com/nimoc/blog/issues/34\">https://github.com/nimoc/blog/issues/34</a> (原文保持持续更新和更多的评论) </p>\n<script src=\"https://utteranc.es/client.js\"\nrepo=\"nimoc/blog\"\nissue-number=\"34\"\ntheme=\"github-light\"\ncrossorigin=\"anonymous\"\nasync>\n</script>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<!-- !!!!!!!!!! \nThis file is create by compile, do not edit this file \n!!! -->\n<h1 id=\"将-TypeScript-中-松散的类型当做药品\"><a href=\"#将-TypeScript-中-松散的类型当做药品\" class=\"headerlink\" title=\"将 TypeScript 中 松散的类型当做药品\"></a>将 TypeScript 中 松散的类型当做药品</h1><p><a href=\"http://blog.nimoc.io/notice/index.html\"><img src=\"http://blog.nimoc.io/notice/index.svg\" alt=\"blog.nimoc.io\"></a></p>\n<blockquote>\n<p>本文代码有大量的 test 和  expect 函数,目的是替代注释,用 expect 说明变量和函数的返回值</p>\n</blockquote>\n<h2 id=\"动态语言不需要泛型\"><a href=\"#动态语言不需要泛型\" class=\"headerlink\" title=\"动态语言不需要泛型\"></a>动态语言不需要泛型</h2><p>基于显而易见的原因如果你使用的是动态语言没有类型系统意味着一切都是泛型.</p>\n<p>我通过列举一个 <code>filterZeroValue</code> 的例子来说明情况:</p>\n<blockquote>\n<p>为了把重点放在类型系统上所以使用 <code>filterZeroValue</code> 这个简单的函数,实际情况中不大可能封装 <code>filterZeroValue</code> 而是直接写 <code>list.filter</code>.  </p>\n</blockquote>\n<p>比如在 JavaScript 中:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 排除数组中的空值&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list</span></span><br><span class=\"line\"><span class=\"comment\"> * @return notZeroValueList</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsFilterZeroValue</span>(<span class=\"params\">list</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"keyword\">typeof</span> item) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;string&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> item != <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;number&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> item != <span class=\"number\">0</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;filterZeroValue: list[] item must be string or number&quot;</span> )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&quot;jsFilterZeroValue&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    expect(jsFilterZeroValue([<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"string\">&quot;c&quot;</span>])).toStrictEqual([<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;c&quot;</span>])</span><br><span class=\"line\">    expect(jsFilterZeroValue([<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">3</span>])).toStrictEqual([<span class=\"number\">1</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>你甚至可以3行代码搞定</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsFilterZeroValue</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list.filter(<span class=\"function\">(<span class=\"params\">item</span>)=&gt;</span> &#123;<span class=\"keyword\">return</span> !!item&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>不这么做是因为需要在参数是 string number 之外的的类型时进行错误提示,和减少隐式类型转换.</p>\n<h2 id=\"TypeScript-实现泛型\"><a href=\"#TypeScript-实现泛型\" class=\"headerlink\" title=\"TypeScript 实现泛型\"></a>TypeScript 实现泛型</h2><blockquote>\n<p>注意不要只看下面的代码后就结束,看完文章会发现下面的代码是不好的</p>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tsFilterZeroValue</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">list: T[]</span>): <span class=\"title\">T</span>[] </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"keyword\">typeof</span> item) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;string&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> item != <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;number&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> item != <span class=\"number\">0</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;filterZeroValue: list[] item must be string or number&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&quot;tsFilterZeroValue&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    expect(tsFilterZeroValue([<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"string\">&quot;c&quot;</span>])).toStrictEqual([<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;c&quot;</span>])</span><br><span class=\"line\">    expect(tsFilterZeroValue([<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">3</span>])).toStrictEqual([<span class=\"number\">1</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>虽然通过 <code>&lt;T&gt;(list: T[]): T[]</code> 约束了必须是个数组,并且输出的类型和输入的类型一致.但是还是不能明确只允许 <code>number[]</code> <code>string[]</code> .</p>\n<h3 id=\"联合类型\"><a href=\"#联合类型\" class=\"headerlink\" title=\"联合类型\"></a>联合类型</h3><p>上面的列子可以用联合类型来解决,但是联合类型也不够好哦.</p>\n<blockquote>\n<p>联合类型和泛型其实是一类方法,在现在的这个场景的目的就是偷懒.</p>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unionTypeFilterZeroValue</span>(<span class=\"params\">list: <span class=\"built_in\">string</span>[] | <span class=\"built_in\">number</span>[]</span>) :<span class=\"title\">string</span>[] | <span class=\"title\">number</span>[] </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> output = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i= <span class=\"number\">0</span>;i&lt;list.length;i++ ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> item = list[i]</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"keyword\">typeof</span> item) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;string&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (item != <span class=\"string\">&quot;&quot;</span>) &#123;</span><br><span class=\"line\">                   output.push(item)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;number&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (item != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    output.push(item)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;filterZeroValue: list[] item must be string or number&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> output</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&quot;unionTypeFilterZeroValue&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    expect(unionTypeFilterZeroValue([<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"string\">&quot;c&quot;</span>])).toStrictEqual([<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;c&quot;</span>])</span><br><span class=\"line\">    expect(unionTypeFilterZeroValue([<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">3</span>])).toStrictEqual([<span class=\"number\">1</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"TypeScript-filterZeroValue-正确的实现\"><a href=\"#TypeScript-filterZeroValue-正确的实现\" class=\"headerlink\" title=\"TypeScript filterZeroValue 正确的实现\"></a>TypeScript filterZeroValue 正确的实现</h3><p>上面的 <code>tsFilterZeroValue</code> 和 <code>unionTypeFilterZeroValue</code> 都不够好,<br>反而 TypeScript 代码写的很复杂.虽然可能是我个人对 TypeScript 了解程度不够,<br>要注意团队中不是每个人都是 TypeScript 高手.</p>\n<p>实际上在TypeScript中使用泛型绝大部分情况下是编码思维没有转换为静态类型思维.</p>\n<p>请看下面的代码 </p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stringListFilterZeroValue</span>(<span class=\"params\">list: <span class=\"built_in\">string</span>[]</span>) :<span class=\"title\">string</span>[] </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v != <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">numberListFilterZeroValue</span>(<span class=\"params\">list: <span class=\"built_in\">number</span>[]</span>) :<span class=\"title\">number</span>[] </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v != <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&quot;stringAndNumberlistFilterZeroValue&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    expect(stringListFilterZeroValue([<span class=\"string\">&quot;nimo&quot;</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"string\">&quot;nico&quot;</span>])).toStrictEqual([<span class=\"string\">&quot;nimo&quot;</span>,<span class=\"string\">&quot;nico&quot;</span>])</span><br><span class=\"line\">    expect(numberListFilterZeroValue([<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">3</span>])).toStrictEqual([<span class=\"number\">1</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>不要带入动态类型快猛糙的思维去写 TypeScript</p>\n</blockquote>\n<p>该多写点”重复”的代码,这样反而实现会更简单,更易于阅读.</p>\n<p>最重要的是有些情况下使用了泛型或联合类型加上编码时疏忽了会造成想不到的bug:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateSQL</span>(<span class=\"params\">id: <span class=\"built_in\">string</span>, names: <span class=\"built_in\">string</span>[]</span>) :</span>&#123;sql:<span class=\"built_in\">string</span>, <span class=\"attr\">values</span>:<span class=\"built_in\">any</span>[]&#125; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> updateValue = stringListFilterZeroValue(names)</span><br><span class=\"line\">    <span class=\"comment\">// 如果 updateSQL 的函数参数 names 改成了  ages int[]</span></span><br><span class=\"line\">    <span class=\"comment\">// stringListFilterZeroValue 将会在编译期报错</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果使用的是 unionTypeFilterZeroValue 则不会</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// names 修改后 要让此处编译期报错的目的是要</span></span><br><span class=\"line\">    <span class=\"comment\">// 提醒自己,在没有修改前的代码逻辑中期望 updateValue 是一个 string[]</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果使用 unionTypeFilterZeroValue 则没有了这一层提醒</span></span><br><span class=\"line\">    <span class=\"comment\">// 而 JSON.stringify(string[]) 和 JSON.stringify(number[]) 的结果是不一样的</span></span><br><span class=\"line\">    <span class=\"comment\">// 而这个不一样类型系统是无法检查到的,因为返回值 的 values 属性因为 sql 的场景导致就是 any[]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        sql: <span class=\"string\">`UPDATE tableName SET names = ? WHERE id = ?`</span>,</span><br><span class=\"line\">        values: [<span class=\"built_in\">JSON</span>.stringify(updateValue), id],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&quot;updateSQL&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    expect(updateSQL(<span class=\"string\">&quot;1&quot;</span>, [<span class=\"string\">&quot;nimo&quot;</span>, <span class=\"string\">&quot;nico&quot;</span>])).toStrictEqual(</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            sql: <span class=\"string\">&quot;UPDATE tableName SET names = ? WHERE id = ?&quot;</span>,</span><br><span class=\"line\">            values: [</span><br><span class=\"line\">                <span class=\"string\">&#x27;[&quot;nimo&quot;,&quot;nico&quot;]&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>上面的例子不够完美,本文想表达的主要的观点是:</p>\n<p><strong>控制参数数量和类型不可变</strong></p>\n<p>在代码中明确函数参数固定且每个参数只能有一个类型能让代码更易于维护</p>\n<p><strong>尽可能多的在编译期做类型检查发现问题</strong></p>\n<p>即使单元测试和细心编码能检查出这种小概率的错误,但是编码要做悲观设计.不能总期望写代码的人状态在线</p>\n<p><strong>将松散的类型当做药品使用</strong></p>\n<p>泛型,联合类型这种应当当做药品去使用,不到万不得已不要使用.比如 Go 语言中就不支持 TypeScript 这种泛型,也照样构建了那么稳定的项目,<br>只要不是觉得业务代码中出现大量重复代码太麻烦,就要避免使用松散的类型.非业务逻辑的第三方封装代码,就必须让参数类型只能有一个.<br>除非你实现是 JSON.parse 这种必须用 any 的库.</p>\n<blockquote>\n<p>有些人对于效率和质量的认知可能与作者有偏差,作者是绝对侧重质量,在要效率非常低下的情况下才通过深思熟虑的才写一些”偷懒的代码”.<br>读者可以有自己的判断,但请注意: 如果因为类型不严谨导致项目中出现一个 bug,如果能后悔你会愿意花十倍的时间去弥补写出更多类型严谨的代码.   </p>\n</blockquote>\n<p>如果你觉得本文观点不错,请将本文推荐给你的朋友或同事</p>\n<p>原文地址 <a href=\"https://github.com/nimoc/blog/issues/34\">https://github.com/nimoc/blog/issues/34</a> (原文保持持续更新和更多的评论) </p>\n<script src=\"https://utteranc.es/client.js\"\nrepo=\"nimoc/blog\"\nissue-number=\"34\"\ntheme=\"github-light\"\ncrossorigin=\"anonymous\"\nasync>\n</script>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>"}],"Post":[],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}